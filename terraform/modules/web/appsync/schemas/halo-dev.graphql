schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

union SearchableAggregateGenericResult = SearchableAggregateBucketResult | SearchableAggregateScalarResult

type AbstractJourneyEvent @aws_api_key @aws_lambda {
  businessGoal: String
  createdAt: AWSDateTime
  description: String
  endTime: AWSDateTime
  enterpriseId: ID!
  flowId: ID!
  includeIntents: Boolean!
  industry: String
  journeyNameLibrary: String
  mode: MODE!
  sharingMode: String
  sourceEnterpriseId: ID
  startTime: AWSDateTime
  updatedAt: AWSDateTime
  useCase: String
  workspaceId: ID!
}

type AiBrainFileManager @aws_api_key @aws_lambda {
  aiEnabled: Boolean
  createdAt: AWSDateTime!
  enterpriseId: ID!
  fileId: ID!
  mode: MODE!
  name: String
  type: String
  updatedAt: AWSDateTime!
  url: String
  usage: String
}

type AnalyticsDashboard @aws_api_key @aws_lambda {
  analyticsDashboardId: ID!
  config: AWSJSON
  createdAt: AWSDateTime!
  enterpriseId: ID!
  mode: MODE!
  name: String!
  updatedAt: AWSDateTime!
}

type Api @aws_api_key @aws_lambda {
  apiId: ID!
  config: AWSJSON
  createdAt: AWSDateTime!
  enterpriseId: ID!
  mode: MODE!
  name: String!
  updatedAt: AWSDateTime!
  workspace: Workspace!
  workspaceId: ID!
}

type ApiGateWay @aws_api_key @aws_lambda {
  createdAt: AWSDateTime!
  enterpriseId: ID!
  flow: String
  interaction: String
  mode: MODE!
  name: String!
  nodeId: String
  payload: AWSJSON
  updatedAt: AWSDateTime!
  variable: String!
  workspace: Workspace!
  workspaceId: ID!
}

type AudienceSegments @aws_api_key @aws_lambda {
  createdAt: AWSDateTime
  enterpriseId: ID!
  mode: MODE!
  segmentConfig: AWSJSON
  segmentId: ID!
  segmentName: String
  updatedAt: AWSDateTime
}

type Broadcast @aws_api_key @aws_lambda {
  advancedConfig: AWSJSON
  asset: String
  broadcastId: ID!
  broadcastMessages(filter: ModelBroadcastMessageFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelBroadcastMessageConnection
  catalogItems: AWSJSON
  createdAt: AWSDateTime!
  enterpriseId: ID!
  isCatalogue: Boolean
  message: String!
  mode: MODE!
  name: String!
  scheduleTime: AWSDateTime!
  senderReceiver: AWSJSON
  status: BroadcastStatus!
  updatedAt: AWSDateTime!
}

type BroadcastMessage @aws_api_key @aws_lambda {
  broadcast: Broadcast!
  broadcastId: ID!
  broadcastMessageId: ID!
  catalogItems: AWSJSON
  createdAt: AWSDateTime!
  customerId: ID!
  enterpriseId: ID!
  from: LinkedApp!
  isCatalogue: Boolean
  linkedAppId: ID!
  meta: AWSJSON
  mode: MODE!
  reference: LinkedAppMessage
  scheduleTime: AWSDateTime!
  status: BroadcastMessageStatus!
  timeToRespond: Int
  to: Customer!
  updatedAt: AWSDateTime!
  waMessageId: ID
}

type Campaign @aws_api_key @aws_lambda {
  advancedConfig: AWSJSON
  averageOrderValue: String
  campaignApproverList(filter: ModelCampaignApproverFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelCampaignApproverConnection
  campaignAuditTrail(filter: ModelCampaignAuditTrailFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelCampaignAuditTrailConnection
  campaignId: ID!
  campaignMessages(filter: ModelCampaignMessageFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelCampaignMessageConnection
  contactGroup(filter: ModelCampaignContactGroupFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelCampaignContactGroupConnection
  createdAt: AWSDateTime!
  createdBy: User
  createdById: ID
  enterpriseId: ID!
  flow: Flow!
  flowId: ID!
  integration: Integration
  integrationId: ID
  isHidden: Boolean
  language: String
  lastResponseSyncTime: AWSDateTime
  marketingCost: String
  mode: MODE!
  name: String!
  recurringCampaign: RecurringCampaign
  recurringCampaignId: ID
  responseSyncStatus: ResponseSyncStatus
  scheduleTime: AWSDateTime!
  segment: String
  status: CampaignStatus!
  type: String!
  updatedAt: AWSDateTime!
  variables: AWSJSON
  workflowId: ID
  workflowSteps: WorkflowSteps
  workflowStepsId: ID
  workflows: Workflows
}

type CampaignApprover @aws_api_key @aws_lambda {
  Campaign: Campaign!
  approver: User
  approverId: ID!
  campaignId: ID!
  createdAt: AWSDateTime!
  enterpriseId: ID!
  mode: MODE!
  number: String!
  updatedAt: AWSDateTime!
}

type CampaignAuditTrail @aws_api_key @aws_lambda {
  Campaign: Campaign!
  approver: User
  approverId: ID!
  auditTrailId: ID!
  campaignId: ID!
  createdAt: AWSDateTime!
  enterpriseId: ID!
  mode: MODE!
  note: String
  sender: User
  senderId: ID
  status: CampaignStatus!
  updatedAt: AWSDateTime!
}

type CampaignContactGroup @aws_api_key @aws_lambda {
  Campaign: Campaign!
  campaignId: ID!
  contactGroup: ContactGroup!
  contactGroupId: ID!
  createdAt: AWSDateTime!
  enterpriseId: ID!
  mode: MODE!
  updatedAt: AWSDateTime!
}

type CampaignMessage @aws_api_key @aws_lambda {
  campaign: Campaign!
  campaignId: ID!
  campaignMessageId: ID!
  channel: CHANNEL!
  createdAt: AWSDateTime
  customer: Customer!
  customerId: ID!
  enterpriseId: ID!
  isForApproval: Boolean
  meta: AWSJSON
  mode: MODE!
  retryCount: Int
  scheduleTime: AWSDateTime!
  session: Session
  sessionId: ID
  status: CampaignMessageStatus!
  timeToRespond: Int
  updatedAt: AWSDateTime
}

type CampaignResponsePayload {
  message: String! @aws_api_key @aws_lambda
  success: Boolean! @aws_api_key @aws_lambda
}

type CampaignSyncPayload {
  campaignList: AWSJSON! @aws_api_key @aws_lambda
  contactLists: AWSJSON @aws_api_key @aws_lambda
  message: String! @aws_api_key @aws_lambda
  success: Boolean! @aws_api_key @aws_lambda
}

type Catalogue @aws_api_key @aws_lambda {
  catalogueId: ID!
  collection(filter: ModelCollectionCatalogueFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelCollectionCatalogueConnection
  countryOfOrigin: String!
  createdAt: AWSDateTime!
  description: String
  enterpriseId: ID!
  hide: Boolean
  images: [String]
  integrationId: ID
  itemCode: String
  link: String
  linkedApp(filter: ModelLinkedAppCatalogueFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelLinkedAppCatalogueConnection
  metaCatalogue: MetaCatalogue
  metaCatalogueId: ID
  mode: MODE!
  name: String!
  otherAttributes: AWSJSON
  price: String
  retailerId: String
  updatedAt: AWSDateTime
}

type CheckIntentNamePayload {
  created: Boolean!
}

type CloudFunctions @aws_api_key @aws_lambda {
  cloudFunctionsId: ID!
  code: AWSJSON
  createdAt: AWSDateTime!
  enterpriseId: ID!
  functionARN: String
  functionName: String
  functionURL: String
  mode: MODE!
  name: String!
  type: String!
  updatedAt: AWSDateTime!
  workspace: Workspace!
  workspaceId: ID!
}

type Collection @aws_api_key @aws_lambda {
  catalogue(filter: ModelCollectionCatalogueFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelCollectionCatalogueConnection
  collectionId: ID!
  createdAt: AWSDateTime!
  enterpriseId: ID!
  linkedApp(filter: ModelLinkedAppCollectionFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelLinkedAppCollectionConnection
  metaCatalogue: MetaCatalogue
  metaCatalogueId: ID
  mode: MODE!
  status: String
  title: String!
  updatedAt: AWSDateTime!
}

type CollectionCatalogue @aws_api_key @aws_lambda {
  catalogue: Catalogue!
  catalogueId: ID!
  collection: Collection!
  collectionId: ID!
  createdAt: AWSDateTime!
  enterpriseId: ID!
  mode: MODE!
  updatedAt: AWSDateTime!
}

type ContactGroup @aws_api_key @aws_lambda {
  campaign(filter: ModelCampaignContactGroupFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelCampaignContactGroupConnection
  contact(filter: ModelCustomerContactGroupFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelCustomerContactGroupConnection
  contactGroupId: ID!
  contactListSource: String
  createdAt: AWSDateTime!
  dynamic: Boolean
  enterpriseId: ID!
  linkedApp: LinkedApp
  linkedAppId: ID
  mode: MODE!
  name: String!
  updatedAt: AWSDateTime
}

type Conversation @aws_api_key @aws_lambda {
  agentInfo: AWSJSON
  content: String
  conversationId: ID!
  conversationInfo: ConversationInfo
  createdAt: AWSDateTime
  createdBy: ASSIGNMENT!
  customer: Customer!
  customerId: ID!
  enterpriseId: ID!
  imagePath: String
  metadata: AWSJSON
  mode: MODE!
  senderId: ID
  session: Session!
  sessionId: ID!
  updatedAt: AWSDateTime!
}

type ConversationInfo @aws_api_key @aws_lambda {
  analytics: AWSJSON
  channelMessageId: ID
  conversation: Conversation!
  conversationId: ID!
  createdAt: AWSDateTime!
  cumulativeLeadScore: Int
  deliveredAt: AWSDateTime
  enterpriseId: ID!
  errorMessage: AWSJSON
  leadScoreDiff: Int
  mode: MODE!
  pricing: AWSJSON
  readAt: AWSDateTime
  submittedAt: AWSDateTime
  submittedToPartner: AWSDateTime
  updatedAt: AWSDateTime!
}

type CreateBotPayload {
  created: Boolean! @aws_api_key @aws_lambda
  statusCheckUrl: Int @aws_api_key @aws_lambda
}

type Customer @aws_api_key @aws_lambda {
  blacklistReason: String
  blacklisted: Boolean
  blacklistedAt: AWSDateTime
  broadcastMessage(filter: ModelBroadcastMessageFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelBroadcastMessageConnection
  campaignMessage(filter: ModelCampaignMessageFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelCampaignMessageConnection
  contactGroup(filter: ModelCustomerContactGroupFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelCustomerContactGroupConnection
  conversationByDate(createdAt: ModelStringKeyConditionInput, filter: ModelConversationFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelConversationConnection
  createdAt: AWSDateTime
  customerId: ID!
  email: String
  enterpriseId: ID!
  federatedSessions(filter: ModelSessionFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection, updatedAt: ModelStringKeyConditionInput): ModelSessionConnection
  firstName: String
  lastName: String
  linkedApps(filter: ModelLinkedAppCustomerFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelLinkedAppCustomerConnection
  mode: MODE!
  name: String
  parent: SAAS
  parentId: String
  profile(filter: ModelProfileFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelProfileConnection
  sessionsByDate(filter: ModelSessionFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection, updatedAt: ModelStringKeyConditionInput): ModelSessionConnection
  tags: [String]
  updatedAt: AWSDateTime
  variables: AWSJSON
}

type CustomerContactGroup @aws_api_key @aws_lambda {
  blacklisted: Boolean
  contactGroup: ContactGroup!
  contactGroupId: ID!
  createdAt: AWSDateTime!
  customer: Customer!
  customerId: ID!
  enterpriseId: ID!
  mode: MODE!
  updatedAt: AWSDateTime
}

type DatabaseSchema @aws_api_key @aws_lambda {
  config: AWSJSON
  createdAt: AWSDateTime!
  databaseSchemaId: ID!
  description: String
  enterpriseId: ID!
  key: String!
  mode: MODE!
  schema: AWSJSON!
  timeFilterField: String
  updatedAt: AWSDateTime!
  values(filter: ModelDatabaseValuesFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelDatabaseValuesConnection
  workspace: Workspace!
  workspaceId: ID!
}

type DatabaseValues @aws_api_key @aws_lambda {
  createdAt: AWSDateTime!
  databaseSchema: DatabaseSchema!
  databaseSchemaId: ID!
  databaseValuesId: ID!
  enterpriseId: ID!
  mode: MODE!
  updatedAt: AWSDateTime!
  value: AWSJSON!
}

type DeleteEnterpriseRolePayload {
  deleted: Boolean!
}

type Enterprise @aws_api_key @aws_lambda {
  brandId: String!
  contactAttributes: AWSJSON
  createdAt: AWSDateTime!
  enterpriseId: ID!
  isActive: Boolean
  name: String!
  onboarding: Boolean
  organization: Organization!
  organizationId: ID!
  updatedAt: AWSDateTime!
  variables: AWSJSON
}

type Entity @aws_api_key @aws_lambda {
  createdAt: AWSDateTime!
  enterpriseId: ID!
  entityData: AWSJSON
  entityId: ID!
  language: String
  mode: MODE!
  name: String!
  resolutionStrategy: String
  slotTypeId: ID
  type: String!
  updatedAt: AWSDateTime!
  workspace: Workspace!
  workspaceId: ID!
}

type EventLabel @aws_api_key @aws_lambda {
  campaignId: String
  conversationId: ID!
  createdAt: AWSDateTime
  customer: Customer
  customerId: ID!
  enterpriseId: ID!
  flowId: ID!
  interactionId: ID!
  label: String!
  labelId: ID!
  mode: MODE!
  nodeId: ID!
  previousLabel: String
  previousValue: String
  session: Session
  sessionId: ID!
  type: EventLabelType!
  updatedAt: AWSDateTime
  value: String!
  workspaceId: ID!
}

type FileManagerFiles @aws_api_key @aws_lambda {
  createdAt: AWSDateTime!
  description: String
  enterpriseId: ID!
  fileManagerFilesId: ID!
  fileType: String
  isFavorite: Boolean
  name: String
  nanoId: String
  size: String
  tags: [String]
  updatedAt: AWSDateTime!
  url: String
  workspaceId: ID!
}

type Flow @aws_api_key @aws_lambda {
  campaign: Campaign
  campaignId: ID
  createdAt: AWSDateTime!
  designConfig: AWSJSON
  enterpriseId: ID!
  fallback: Interaction
  fallbackId: ID
  flowId: ID!
  flowTemplate: FlowTemplate
  flowTemplateId: ID
  idle: Interaction
  idleId: ID
  integration(filter: ModelIntegrationFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelIntegrationConnection
  interaction(filter: ModelInteractionFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelInteractionConnection
  isImported: Boolean
  isInbound: Boolean
  mode: MODE!
  name: String!
  recurringCampaign: RecurringCampaign
  recurringCampaignId: ID
  settings: AWSJSON
  start: Interaction
  startId: ID
  status: Boolean
  updatedAt: AWSDateTime!
  workflowId: ID
  workflowSteps: WorkflowSteps
  workflowStepsId: ID
  workflows: Workflows
  workspace: Workspace!
  workspaceId: ID!
}

type FlowTemplate @aws_api_key @aws_lambda {
  businessGoal: [String]!
  channels: [String]
  createdAt: AWSDateTime!
  enterpriseId: ID!
  flow: Flow
  flowId: ID
  flowTemplateId: ID!
  industry: [String]!
  isPrivate: Boolean
  mode: MODE!
  templateData: AWSJSON
  templateDescription: String!
  templateIcon: String!
  templateName: String!
  updatedAt: AWSDateTime!
  workspace: Workspace
  workspaceId: ID
}

type HealthTable @aws_api_key @aws_lambda {
  channel: CHANNEL
  checkFlag: Int
  config: AWSJSON
  count: Int!
  createdAt: AWSDateTime
  description: String
  enterpriseId: ID!
  functionOrigin: String
  healthTableId: ID!
  link: String
  mode: MODE!
  node: Node
  nodeId: ID
  read: Boolean!
  session(filter: ModelSessionFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelSessionConnection
  status: HEALTH_STATUS!
  subType: String
  title: String!
  type: ERROR_TYPE!
  updatedAt: AWSDateTime
  user: User
  userId: ID
}

type ImportExportPayload {
  createdEntityId: String @aws_api_key @aws_lambda
  message: String @aws_api_key @aws_lambda
  publishList: AWSJSON @aws_api_key @aws_lambda
  success: Boolean @aws_api_key @aws_lambda
  url: String @aws_api_key @aws_lambda
}

type Integration @aws_api_key @aws_lambda {
  channel: CHANNEL
  config: AWSJSON
  createdAt: AWSDateTime!
  details: AWSJSON
  enterpriseId: ID!
  flow: Flow
  flowId: ID
  integrationId: ID!
  logo: String
  metaCatalogue: MetaCatalogue
  metaCatalogueId: ID
  mode: MODE!
  name: String!
  number: String
  primary: Boolean
  saas: SAAS
  templates(filter: ModelTemplatesFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelTemplatesConnection
  updatedAt: AWSDateTime!
  whatsappFlows(filter: ModelWhatsappFlowsFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelWhatsappFlowsConnection
  workspace: Workspace
  workspaceId: ID
}

type Intent @aws_api_key @aws_lambda {
  createdAt: AWSDateTime!
  enterpriseId: ID!
  intentId: ID!
  language: String
  lexIntentId: ID
  mode: MODE!
  name: String!
  nodeId: ID
  slots: [String!]
  updatedAt: AWSDateTime
  utterance: [String!]
  utteranceMapping(filter: ModelUtteranceFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelUtteranceConnection
  workspace: Workspace!
  workspaceId: ID!
}

type IntentEvent @aws_api_key @aws_lambda {
  businessGoal: String
  createdAt: AWSDateTime
  description: String
  endTime: AWSDateTime
  enterpriseId: ID!
  includeIntents: Boolean!
  industry: String
  intentEventId: ID!
  mode: MODE!
  name: String
  sharingMode: String
  sourceEnterpriseId: ID
  startTime: AWSDateTime
  updatedAt: AWSDateTime
  useCase: String
  workspaceId: ID!
}

type Interaction @aws_api_key @aws_lambda {
  createdAt: AWSDateTime!
  enterpriseId: ID!
  flow: Flow!
  flowId: ID!
  interactionId: ID!
  mode: MODE!
  name: String!
  nodes(filter: ModelNodeFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelNodeConnection
  updatedAt: AWSDateTime!
}

type InteractionEvent @aws_api_key @aws_lambda {
  businessGoal: String
  createdAt: AWSDateTime
  description: String
  endTime: AWSDateTime
  enterpriseId: ID!
  includeIntents: Boolean!
  industry: String
  interactionId: ID!
  mode: MODE!
  name: String
  sharingMode: String
  sourceEnterpriseId: ID
  startTime: AWSDateTime
  updatedAt: AWSDateTime
  useCase: String
  workspaceId: ID!
}

type Job @aws_api_key @aws_lambda {
  createdAt: AWSDateTime!
  description: String
  enterpriseId: ID!
  executionArn: String
  failureReasons: [String]
  jobId: ID!
  mode: MODE!
  payload: AWSJSON
  read: Boolean
  result: AWSJSON
  status: JobStatus!
  type: JobType!
  updatedAt: AWSDateTime
  user: User!
  userId: ID!
}

type LinkedApp @aws_api_key @aws_lambda {
  broadcastMessage(filter: ModelBroadcastMessageFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelBroadcastMessageConnection
  catalogue(filter: ModelLinkedAppCatalogueFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelLinkedAppCatalogueConnection
  collection(filter: ModelLinkedAppCollectionFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelLinkedAppCollectionConnection
  config: AWSJSON
  contactGroup: ContactGroup
  contactGroupId: ID
  createdAt: AWSDateTime!
  customers(filter: ModelLinkedAppCustomerFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelLinkedAppCustomerConnection
  details: AWSJSON
  email: String!
  enterpriseId: ID!
  isBusinessAccount: Boolean
  isCartEnabled: Boolean
  lastSyncTime: AWSDateTime
  linkedAppId: ID!
  mode: MODE!
  name: String!
  qrCode: String
  role: String!
  status: LinkedAppStatus!
  updatedAt: AWSDateTime!
}

type LinkedAppCatalogue @aws_api_key @aws_lambda {
  catalogue: Catalogue!
  catalogueId: ID!
  createdAt: AWSDateTime!
  enterpriseId: ID!
  hide: Boolean
  linkedApp: LinkedApp!
  linkedAppId: ID!
  mode: MODE!
  status: String
  updatedAt: AWSDateTime!
  waLinkedAppCatalogueId: String
}

type LinkedAppCollection @aws_api_key @aws_lambda {
  collection: Collection!
  collectionId: ID!
  createdAt: AWSDateTime!
  enterpriseId: ID!
  linkedApp: LinkedApp!
  linkedAppId: ID!
  mode: MODE!
  status: String
  updatedAt: AWSDateTime!
  waLinkedAppCollectionId: String
}

type LinkedAppCustomer @aws_api_key @aws_lambda {
  createdAt: AWSDateTime!
  customer: Customer!
  customerDetails: AWSJSON
  customerId: ID!
  enterpriseId: ID!
  linkedApp: LinkedApp!
  linkedAppId: ID!
  messages(filter: ModelLinkedAppMessageFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelLinkedAppMessageConnection
  mode: MODE!
  updatedAt: AWSDateTime
}

type LinkedAppMessage @aws_api_key @aws_lambda {
  createdAt: AWSDateTime
  customerId: ID!
  enterpriseId: ID!
  linkedAppCustomer: LinkedAppCustomer!
  linkedAppId: ID!
  message: AWSJSON
  mode: MODE!
  updatedAt: AWSDateTime
  waMessageId: ID!
}

type MetaCatalogue @aws_api_key @aws_lambda {
  catalogue(filter: ModelCatalogueFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelCatalogueConnection
  collection(filter: ModelCollectionFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelCollectionConnection
  createdAt: AWSDateTime!
  enterpriseId: ID!
  integrationId: ID!
  isCartEnabled: Boolean
  isCatalogVisible: Boolean
  metaCatalogueId: ID!
  mode: MODE!
  name: String!
  updatedAt: AWSDateTime!
}

type MissedUtterance @aws_api_key @aws_lambda {
  channel: CHANNEL!
  confidence: Float!
  createdAt: AWSDateTime!
  enterpriseId: ID!
  language: String
  missedUtteranceId: ID!
  mode: MODE!
  nodeId: String
  updatedAt: AWSDateTime!
  utterance: String!
  workspace: Workspace!
  workspaceId: ID!
}

type ModelAbstractJourneyEventConnection @aws_api_key @aws_lambda {
  items: [AbstractJourneyEvent]!
  nextToken: String
}

type ModelAiBrainFileManagerConnection @aws_api_key @aws_lambda {
  items: [AiBrainFileManager]!
  nextToken: String
}

type ModelAnalyticsDashboardConnection @aws_api_key @aws_lambda {
  items: [AnalyticsDashboard]!
  nextToken: String
}

type ModelApiConnection @aws_api_key @aws_lambda {
  items: [Api]!
  nextToken: String
}

type ModelApiGateWayConnection @aws_api_key @aws_lambda {
  items: [ApiGateWay]!
  nextToken: String
}

type ModelAudienceSegmentsConnection @aws_api_key @aws_lambda {
  items: [AudienceSegments]!
  nextToken: String
}

type ModelBroadcastConnection @aws_api_key @aws_lambda {
  items: [Broadcast]!
  nextToken: String
}

type ModelBroadcastMessageConnection @aws_api_key @aws_lambda {
  items: [BroadcastMessage]!
  nextToken: String
}

type ModelCampaignApproverConnection @aws_api_key @aws_lambda {
  items: [CampaignApprover]!
  nextToken: String
}

type ModelCampaignAuditTrailConnection @aws_api_key @aws_lambda {
  items: [CampaignAuditTrail]!
  nextToken: String
}

type ModelCampaignConnection @aws_api_key @aws_lambda {
  items: [Campaign]!
  nextToken: String
}

type ModelCampaignContactGroupConnection @aws_api_key @aws_lambda {
  items: [CampaignContactGroup]!
  nextToken: String
}

type ModelCampaignMessageConnection @aws_api_key @aws_lambda {
  items: [CampaignMessage]!
  nextToken: String
}

type ModelCatalogueConnection @aws_api_key @aws_lambda {
  items: [Catalogue]!
  nextToken: String
}

type ModelCloudFunctionsConnection @aws_api_key @aws_lambda {
  items: [CloudFunctions]!
  nextToken: String
}

type ModelCollectionCatalogueConnection @aws_api_key @aws_lambda {
  items: [CollectionCatalogue]!
  nextToken: String
}

type ModelCollectionConnection @aws_api_key @aws_lambda {
  items: [Collection]!
  nextToken: String
}

type ModelContactGroupConnection @aws_api_key @aws_lambda {
  items: [ContactGroup]!
  nextToken: String
}

type ModelConversationConnection @aws_api_key @aws_lambda {
  items: [Conversation]!
  nextToken: String
}

type ModelConversationInfoConnection @aws_api_key @aws_lambda {
  items: [ConversationInfo]!
  nextToken: String
}

type ModelCustomerConnection @aws_api_key @aws_lambda {
  items: [Customer]!
  nextToken: String
}

type ModelCustomerContactGroupConnection @aws_api_key @aws_lambda {
  items: [CustomerContactGroup]!
  nextToken: String
}

type ModelDatabaseSchemaConnection @aws_api_key @aws_lambda {
  items: [DatabaseSchema]!
  nextToken: String
}

type ModelDatabaseValuesConnection @aws_api_key @aws_lambda {
  items: [DatabaseValues]!
  nextToken: String
}

type ModelEnterpriseConnection @aws_api_key @aws_lambda {
  items: [Enterprise]!
  nextToken: String
}

type ModelEntityConnection @aws_api_key @aws_lambda {
  items: [Entity]!
  nextToken: String
}

type ModelEventLabelConnection @aws_api_key @aws_lambda {
  items: [EventLabel]!
  nextToken: String
}

type ModelFileManagerFilesConnection @aws_api_key @aws_lambda {
  items: [FileManagerFiles]!
  nextToken: String
}

type ModelFlowConnection @aws_api_key @aws_lambda {
  items: [Flow]!
  nextToken: String
}

type ModelFlowTemplateConnection @aws_api_key @aws_lambda {
  items: [FlowTemplate]!
  nextToken: String
}

type ModelHealthTableConnection @aws_api_key @aws_lambda {
  items: [HealthTable]!
  nextToken: String
}

type ModelIntegrationConnection @aws_api_key @aws_lambda {
  items: [Integration]!
  nextToken: String
}

type ModelIntentConnection @aws_api_key @aws_lambda {
  items: [Intent]!
  nextToken: String
}

type ModelIntentEventConnection @aws_api_key @aws_lambda {
  items: [IntentEvent]!
  nextToken: String
}

type ModelInteractionConnection @aws_api_key @aws_lambda {
  items: [Interaction]!
  nextToken: String
}

type ModelInteractionEventConnection @aws_api_key @aws_lambda {
  items: [InteractionEvent]!
  nextToken: String
}

type ModelJobConnection @aws_api_key @aws_lambda {
  items: [Job]!
  nextToken: String
}

type ModelLinkedAppCatalogueConnection @aws_api_key @aws_lambda {
  items: [LinkedAppCatalogue]!
  nextToken: String
}

type ModelLinkedAppCollectionConnection @aws_api_key @aws_lambda {
  items: [LinkedAppCollection]!
  nextToken: String
}

type ModelLinkedAppConnection @aws_api_key @aws_lambda {
  items: [LinkedApp]!
  nextToken: String
}

type ModelLinkedAppCustomerConnection @aws_api_key @aws_lambda {
  items: [LinkedAppCustomer]!
  nextToken: String
}

type ModelLinkedAppMessageConnection @aws_api_key @aws_lambda {
  items: [LinkedAppMessage]!
  nextToken: String
}

type ModelMetaCatalogueConnection @aws_api_key @aws_lambda {
  items: [MetaCatalogue]!
  nextToken: String
}

type ModelMissedUtteranceConnection @aws_api_key @aws_lambda {
  items: [MissedUtterance]!
  nextToken: String
}

type ModelModuleConnection @aws_api_key @aws_lambda {
  items: [Module]!
  nextToken: String
}

type ModelNodeConnection @aws_api_key @aws_lambda {
  items: [Node]!
  nextToken: String
}

type ModelNotificationConnection @aws_api_key @aws_lambda {
  items: [Notification]!
  nextToken: String
}

type ModelOrganizationConnection @aws_api_key @aws_lambda {
  items: [Organization]!
  nextToken: String
}

type ModelOutwardWebhookConnection @aws_api_key @aws_lambda {
  items: [OutwardWebhook]!
  nextToken: String
}

type ModelPermissionConnection @aws_api_key @aws_lambda {
  items: [Permission]!
  nextToken: String
}

type ModelProfileConnection @aws_api_key @aws_lambda {
  items: [Profile]!
  nextToken: String
}

type ModelRecurringCampaignConnection @aws_api_key @aws_lambda {
  items: [RecurringCampaign]!
  nextToken: String
}

type ModelRoleConnection @aws_api_key @aws_lambda {
  items: [Role]!
  nextToken: String
}

type ModelSaasTriggerConnection @aws_api_key @aws_lambda {
  items: [SaasTrigger]!
  nextToken: String
}

type ModelScheduleNodeConnection @aws_api_key @aws_lambda {
  items: [ScheduleNode]!
  nextToken: String
}

type ModelSessionConnection @aws_api_key @aws_lambda {
  items: [Session]!
  nextToken: String
}

type ModelTableViewsConnection @aws_api_key @aws_lambda {
  items: [TableViews]!
  nextToken: String
}

type ModelTemplateEventConnection @aws_api_key @aws_lambda {
  items: [TemplateEvent]!
  nextToken: String
}

type ModelTemplatesConnection @aws_api_key @aws_lambda {
  items: [Templates]!
  nextToken: String
}

type ModelTriggerConnection @aws_api_key @aws_lambda {
  items: [Trigger]!
  nextToken: String
}

type ModelUserConnection @aws_api_key @aws_lambda {
  items: [User]!
  nextToken: String
}

type ModelUtteranceConnection @aws_api_key @aws_lambda {
  items: [Utterance]!
  nextToken: String
}

type ModelWhatsappFlowsConnection @aws_api_key @aws_lambda {
  items: [WhatsappFlows]!
  nextToken: String
}

type ModelWorkflowStepEventConnection @aws_api_key @aws_lambda {
  items: [WorkflowStepEvent]!
  nextToken: String
}

type ModelWorkflowStepsConnection @aws_api_key @aws_lambda {
  items: [WorkflowSteps]!
  nextToken: String
}

type ModelWorkflowsConnection @aws_api_key @aws_lambda {
  items: [Workflows]!
  nextToken: String
}

type ModelWorkspaceConnection @aws_api_key @aws_lambda {
  items: [Workspace]!
  nextToken: String
}

type Module @aws_api_key @aws_lambda {
  createdAt: AWSDateTime!
  enterpriseId: ID!
  moduleId: ID!
  name: String!
  role: Role
  roleId: ID
  subModule: AWSJSON
  updatedAt: AWSDateTime!
}

type Mutation {
  addContactGroup(contacts: [String!]!, enterpriseId: ID!, mode: MODE!, name: String!): ImportExportPayload @aws_api_key @aws_lambda
  bulkUpload(enterpriseId: ID!, fileId: String!, isOverwrite: Boolean, mode: MODE!, tableId: ID!, userId: String): ImportExportPayload @aws_api_key @aws_lambda
  campaignResponse(input: CampaignResponseInput!): CampaignResponsePayload @aws_api_key @aws_lambda
  campaignSync(input: CampaignSyncInput!): CampaignSyncPayload @aws_api_key @aws_lambda
  checkIntentName(input: CheckIntentNameInput!): CheckIntentNamePayload @aws_api_key @aws_lambda
  createAbstractJourneyEvent(condition: ModelAbstractJourneyEventConditionInput, input: CreateAbstractJourneyEventInput!): AbstractJourneyEvent @aws_api_key @aws_lambda
  createAiBrainFileManager(condition: ModelAiBrainFileManagerConditionInput, input: CreateAiBrainFileManagerInput!): AiBrainFileManager @aws_api_key @aws_lambda
  createAnalyticsDashboard(condition: ModelAnalyticsDashboardConditionInput, input: CreateAnalyticsDashboardInput!): AnalyticsDashboard @aws_api_key @aws_lambda
  createApi(condition: ModelApiConditionInput, input: CreateApiInput!): Api @aws_api_key @aws_lambda
  createApiGateWay(condition: ModelApiGateWayConditionInput, input: CreateApiGateWayInput!): ApiGateWay @aws_api_key @aws_lambda
  createAudienceSegments(condition: ModelAudienceSegmentsConditionInput, input: CreateAudienceSegmentsInput!): AudienceSegments @aws_api_key @aws_lambda
  createBroadcast(condition: ModelBroadcastConditionInput, input: CreateBroadcastInput!): Broadcast @aws_api_key @aws_lambda
  createBroadcastMessage(condition: ModelBroadcastMessageConditionInput, input: CreateBroadcastMessageInput!): BroadcastMessage @aws_api_key @aws_lambda
  createCampaign(condition: ModelCampaignConditionInput, input: CreateCampaignInput!): Campaign @aws_api_key @aws_lambda
  createCampaignApprover(condition: ModelCampaignApproverConditionInput, input: CreateCampaignApproverInput!): CampaignApprover @aws_api_key @aws_lambda
  createCampaignAuditTrail(condition: ModelCampaignAuditTrailConditionInput, input: CreateCampaignAuditTrailInput!): CampaignAuditTrail @aws_api_key @aws_lambda
  createCampaignContactGroup(condition: ModelCampaignContactGroupConditionInput, input: CreateCampaignContactGroupInput!): CampaignContactGroup @aws_api_key @aws_lambda
  createCampaignMessage(condition: ModelCampaignMessageConditionInput, input: CreateCampaignMessageInput!): CampaignMessage @aws_api_key @aws_lambda
  createCatalogue(condition: ModelCatalogueConditionInput, input: CreateCatalogueInput!): Catalogue @aws_api_key @aws_lambda
  createCloudFunctions(condition: ModelCloudFunctionsConditionInput, input: CreateCloudFunctionsInput!): CloudFunctions @aws_api_key @aws_lambda
  createCollection(condition: ModelCollectionConditionInput, input: CreateCollectionInput!): Collection @aws_api_key @aws_lambda
  createCollectionCatalogue(condition: ModelCollectionCatalogueConditionInput, input: CreateCollectionCatalogueInput!): CollectionCatalogue @aws_api_key @aws_lambda
  createContactGroup(condition: ModelContactGroupConditionInput, input: CreateContactGroupInput!): ContactGroup @aws_api_key @aws_lambda
  createConversation(condition: ModelConversationConditionInput, input: CreateConversationInput!): Conversation @aws_api_key @aws_lambda
  createConversationInfo(condition: ModelConversationInfoConditionInput, input: CreateConversationInfoInput!): ConversationInfo @aws_api_key @aws_lambda
  createCustomer(condition: ModelCustomerConditionInput, input: CreateCustomerInput!): Customer @aws_api_key @aws_lambda
  createCustomerContactGroup(condition: ModelCustomerContactGroupConditionInput, input: CreateCustomerContactGroupInput!): CustomerContactGroup @aws_api_key @aws_lambda
  createDatabaseSchema(condition: ModelDatabaseSchemaConditionInput, input: CreateDatabaseSchemaInput!): DatabaseSchema @aws_api_key @aws_lambda
  createDatabaseValues(condition: ModelDatabaseValuesConditionInput, input: CreateDatabaseValuesInput!): DatabaseValues @aws_api_key @aws_lambda
  createEnterprise(condition: ModelEnterpriseConditionInput, input: CreateEnterpriseInput!): Enterprise @aws_api_key @aws_lambda
  createEntity(condition: ModelEntityConditionInput, input: CreateEntityInput!): Entity @aws_api_key @aws_lambda
  createEventLabel(condition: ModelEventLabelConditionInput, input: CreateEventLabelInput!): EventLabel @aws_api_key @aws_lambda
  createFileManagerFiles(condition: ModelFileManagerFilesConditionInput, input: CreateFileManagerFilesInput!): FileManagerFiles @aws_api_key @aws_lambda
  createFlow(condition: ModelFlowConditionInput, input: CreateFlowInput!): Flow @aws_api_key @aws_lambda
  createFlowTemplate(condition: ModelFlowTemplateConditionInput, input: CreateFlowTemplateInput!): FlowTemplate @aws_api_key @aws_lambda
  createGbmBot(input: CreateGbmBotInput!): CreateBotPayload! @aws_api_key @aws_lambda
  createHealthTable(condition: ModelHealthTableConditionInput, input: CreateHealthTableInput!): HealthTable @aws_api_key @aws_lambda
  createIntegration(condition: ModelIntegrationConditionInput, input: CreateIntegrationInput!): Integration @aws_api_key @aws_lambda
  createIntent(condition: ModelIntentConditionInput, input: CreateIntentInput!): Intent @aws_api_key @aws_lambda
  createIntentEvent(condition: ModelIntentEventConditionInput, input: CreateIntentEventInput!): IntentEvent @aws_api_key @aws_lambda
  createInteraction(condition: ModelInteractionConditionInput, input: CreateInteractionInput!): Interaction @aws_api_key @aws_lambda
  createInteractionEvent(condition: ModelInteractionEventConditionInput, input: CreateInteractionEventInput!): InteractionEvent @aws_api_key @aws_lambda
  createJob(condition: ModelJobConditionInput, input: CreateJobInput!): Job @aws_api_key @aws_lambda
  createLinkedApp(condition: ModelLinkedAppConditionInput, input: CreateLinkedAppInput!): LinkedApp @aws_api_key @aws_lambda
  createLinkedAppCatalogue(condition: ModelLinkedAppCatalogueConditionInput, input: CreateLinkedAppCatalogueInput!): LinkedAppCatalogue @aws_api_key @aws_lambda
  createLinkedAppCollection(condition: ModelLinkedAppCollectionConditionInput, input: CreateLinkedAppCollectionInput!): LinkedAppCollection @aws_api_key @aws_lambda
  createLinkedAppCustomer(condition: ModelLinkedAppCustomerConditionInput, input: CreateLinkedAppCustomerInput!): LinkedAppCustomer @aws_api_key @aws_lambda
  createLinkedAppMessage(condition: ModelLinkedAppMessageConditionInput, input: CreateLinkedAppMessageInput!): LinkedAppMessage @aws_api_key @aws_lambda
  createMetaCatalogue(condition: ModelMetaCatalogueConditionInput, input: CreateMetaCatalogueInput!): MetaCatalogue @aws_api_key @aws_lambda
  createMissedUtterance(condition: ModelMissedUtteranceConditionInput, input: CreateMissedUtteranceInput!): MissedUtterance @aws_api_key @aws_lambda
  createModule(condition: ModelModuleConditionInput, input: CreateModuleInput!): Module @aws_api_key @aws_lambda
  createNode(condition: ModelNodeConditionInput, input: CreateNodeInput!): Node @aws_api_key @aws_lambda
  createNodeTransaction(config: AWSJSON, enterpriseId: ID!, interactionId: ID!, mode: MODE!, nextId: ID, nodeId: ID!, previousId: ID, templateId: ID, type: AWSJSON): Node @aws_api_key @aws_lambda
  createNotification(condition: ModelNotificationConditionInput, input: CreateNotificationInput!): Notification @aws_api_key @aws_lambda
  createOrUpdatePermission(enterpriseId: ID!, permissions: AWSJSON!): [Permission] @aws_api_key @aws_lambda
  createOrganization(condition: ModelOrganizationConditionInput, input: CreateOrganizationInput!): Organization @aws_api_key @aws_lambda
  createOutwardWebhook(condition: ModelOutwardWebhookConditionInput, input: CreateOutwardWebhookInput!): OutwardWebhook @aws_api_key @aws_lambda
  createPermission(condition: ModelPermissionConditionInput, input: CreatePermissionInput!): Permission @aws_api_key @aws_lambda
  createProfile(condition: ModelProfileConditionInput, input: CreateProfileInput!): Profile @aws_api_key @aws_lambda
  createRecurringCampaign(condition: ModelRecurringCampaignConditionInput, input: CreateRecurringCampaignInput!): RecurringCampaign @aws_api_key @aws_lambda
  createRole(condition: ModelRoleConditionInput, input: CreateRoleInput!): Role @aws_api_key @aws_lambda
  createSaasTrigger(condition: ModelSaasTriggerConditionInput, input: CreateSaasTriggerInput!): SaasTrigger @aws_api_key @aws_lambda
  createScheduleNode(condition: ModelScheduleNodeConditionInput, input: CreateScheduleNodeInput!): ScheduleNode @aws_api_key @aws_lambda
  createSession(condition: ModelSessionConditionInput, input: CreateSessionInput!): Session @aws_api_key @aws_lambda
  createTableViews(condition: ModelTableViewsConditionInput, input: CreateTableViewsInput!): TableViews @aws_api_key @aws_lambda
  createTemplateEvent(condition: ModelTemplateEventConditionInput, input: CreateTemplateEventInput!): TemplateEvent @aws_api_key @aws_lambda
  createTemplates(condition: ModelTemplatesConditionInput, input: CreateTemplatesInput!): Templates @aws_api_key @aws_lambda
  createTrigger(condition: ModelTriggerConditionInput, input: CreateTriggerInput!): Trigger @aws_api_key @aws_lambda
  createUser(condition: ModelUserConditionInput, input: CreateUserInput!): User @aws_api_key @aws_lambda
  createUtterance(condition: ModelUtteranceConditionInput, input: CreateUtteranceInput!): Utterance @aws_api_key @aws_lambda
  createWhatsappFlows(condition: ModelWhatsappFlowsConditionInput, input: CreateWhatsappFlowsInput!): WhatsappFlows @aws_api_key @aws_lambda
  createWorkflowStepEvent(condition: ModelWorkflowStepEventConditionInput, input: CreateWorkflowStepEventInput!): WorkflowStepEvent @aws_api_key @aws_lambda
  createWorkflowSteps(condition: ModelWorkflowStepsConditionInput, input: CreateWorkflowStepsInput!): WorkflowSteps @aws_api_key @aws_lambda
  createWorkflows(condition: ModelWorkflowsConditionInput, input: CreateWorkflowsInput!): Workflows @aws_api_key @aws_lambda
  createWorkspace(condition: ModelWorkspaceConditionInput, input: CreateWorkspaceInput!): Workspace @aws_api_key @aws_lambda
  deleteAbstractJourneyEvent(condition: ModelAbstractJourneyEventConditionInput, input: DeleteAbstractJourneyEventInput!): AbstractJourneyEvent @aws_api_key @aws_lambda
  deleteAiBrainFileManager(condition: ModelAiBrainFileManagerConditionInput, input: DeleteAiBrainFileManagerInput!): AiBrainFileManager @aws_api_key @aws_lambda
  deleteAnalyticsDashboard(condition: ModelAnalyticsDashboardConditionInput, input: DeleteAnalyticsDashboardInput!): AnalyticsDashboard @aws_api_key @aws_lambda
  deleteApi(condition: ModelApiConditionInput, input: DeleteApiInput!): Api @aws_api_key @aws_lambda
  deleteApiGateWay(condition: ModelApiGateWayConditionInput, input: DeleteApiGateWayInput!): ApiGateWay @aws_api_key @aws_lambda
  deleteAudienceSegments(condition: ModelAudienceSegmentsConditionInput, input: DeleteAudienceSegmentsInput!): AudienceSegments @aws_api_key @aws_lambda
  deleteBroadcast(condition: ModelBroadcastConditionInput, input: DeleteBroadcastInput!): Broadcast @aws_api_key @aws_lambda
  deleteBroadcastMessage(condition: ModelBroadcastMessageConditionInput, input: DeleteBroadcastMessageInput!): BroadcastMessage @aws_api_key @aws_lambda
  deleteCampaign(condition: ModelCampaignConditionInput, input: DeleteCampaignInput!): Campaign @aws_api_key @aws_lambda
  deleteCampaignApprover(condition: ModelCampaignApproverConditionInput, input: DeleteCampaignApproverInput!): CampaignApprover @aws_api_key @aws_lambda
  deleteCampaignAuditTrail(condition: ModelCampaignAuditTrailConditionInput, input: DeleteCampaignAuditTrailInput!): CampaignAuditTrail @aws_api_key @aws_lambda
  deleteCampaignContactGroup(condition: ModelCampaignContactGroupConditionInput, input: DeleteCampaignContactGroupInput!): CampaignContactGroup @aws_api_key @aws_lambda
  deleteCampaignMessage(condition: ModelCampaignMessageConditionInput, input: DeleteCampaignMessageInput!): CampaignMessage @aws_api_key @aws_lambda
  deleteCatalogue(condition: ModelCatalogueConditionInput, input: DeleteCatalogueInput!): Catalogue @aws_api_key @aws_lambda
  deleteCloudFunctions(condition: ModelCloudFunctionsConditionInput, input: DeleteCloudFunctionsInput!): CloudFunctions @aws_api_key @aws_lambda
  deleteCollection(condition: ModelCollectionConditionInput, input: DeleteCollectionInput!): Collection @aws_api_key @aws_lambda
  deleteCollectionCatalogue(condition: ModelCollectionCatalogueConditionInput, input: DeleteCollectionCatalogueInput!): CollectionCatalogue @aws_api_key @aws_lambda
  deleteContactGroup(condition: ModelContactGroupConditionInput, input: DeleteContactGroupInput!): ContactGroup @aws_api_key @aws_lambda
  deleteConversation(condition: ModelConversationConditionInput, input: DeleteConversationInput!): Conversation @aws_api_key @aws_lambda
  deleteConversationInfo(condition: ModelConversationInfoConditionInput, input: DeleteConversationInfoInput!): ConversationInfo @aws_api_key @aws_lambda
  deleteCustomer(condition: ModelCustomerConditionInput, input: DeleteCustomerInput!): Customer @aws_api_key @aws_lambda
  deleteCustomerContactGroup(condition: ModelCustomerContactGroupConditionInput, input: DeleteCustomerContactGroupInput!): CustomerContactGroup @aws_api_key @aws_lambda
  deleteDatabaseSchema(condition: ModelDatabaseSchemaConditionInput, input: DeleteDatabaseSchemaInput!): DatabaseSchema @aws_api_key @aws_lambda
  deleteDatabaseValues(condition: ModelDatabaseValuesConditionInput, input: DeleteDatabaseValuesInput!): DatabaseValues @aws_api_key @aws_lambda
  deleteEnterprise(condition: ModelEnterpriseConditionInput, input: DeleteEnterpriseInput!): Enterprise @aws_api_key @aws_lambda
  deleteEnterpriseRole(enterpriseId: ID!, id: ID!): DeleteEnterpriseRolePayload @aws_api_key @aws_lambda
  deleteEntity(condition: ModelEntityConditionInput, input: DeleteEntityInput!): Entity @aws_api_key @aws_lambda
  deleteEventLabel(condition: ModelEventLabelConditionInput, input: DeleteEventLabelInput!): EventLabel @aws_api_key @aws_lambda
  deleteFileManagerFiles(condition: ModelFileManagerFilesConditionInput, input: DeleteFileManagerFilesInput!): FileManagerFiles @aws_api_key @aws_lambda
  deleteFlow(condition: ModelFlowConditionInput, input: DeleteFlowInput!): Flow @aws_api_key @aws_lambda
  deleteFlowTemplate(condition: ModelFlowTemplateConditionInput, input: DeleteFlowTemplateInput!): FlowTemplate @aws_api_key @aws_lambda
  deleteHealthTable(condition: ModelHealthTableConditionInput, input: DeleteHealthTableInput!): HealthTable @aws_api_key @aws_lambda
  deleteIntegration(condition: ModelIntegrationConditionInput, input: DeleteIntegrationInput!): Integration @aws_api_key @aws_lambda
  deleteIntent(condition: ModelIntentConditionInput, input: DeleteIntentInput!): Intent @aws_api_key @aws_lambda
  deleteIntentEvent(condition: ModelIntentEventConditionInput, input: DeleteIntentEventInput!): IntentEvent @aws_api_key @aws_lambda
  deleteInteraction(condition: ModelInteractionConditionInput, input: DeleteInteractionInput!): Interaction @aws_api_key @aws_lambda
  deleteInteractionEvent(condition: ModelInteractionEventConditionInput, input: DeleteInteractionEventInput!): InteractionEvent @aws_api_key @aws_lambda
  deleteJob(condition: ModelJobConditionInput, input: DeleteJobInput!): Job @aws_api_key @aws_lambda
  deleteLinkedApp(condition: ModelLinkedAppConditionInput, input: DeleteLinkedAppInput!): LinkedApp @aws_api_key @aws_lambda
  deleteLinkedAppCatalogue(condition: ModelLinkedAppCatalogueConditionInput, input: DeleteLinkedAppCatalogueInput!): LinkedAppCatalogue @aws_api_key @aws_lambda
  deleteLinkedAppCollection(condition: ModelLinkedAppCollectionConditionInput, input: DeleteLinkedAppCollectionInput!): LinkedAppCollection @aws_api_key @aws_lambda
  deleteLinkedAppCustomer(condition: ModelLinkedAppCustomerConditionInput, input: DeleteLinkedAppCustomerInput!): LinkedAppCustomer @aws_api_key @aws_lambda
  deleteLinkedAppMessage(condition: ModelLinkedAppMessageConditionInput, input: DeleteLinkedAppMessageInput!): LinkedAppMessage @aws_api_key @aws_lambda
  deleteMetaCatalogue(condition: ModelMetaCatalogueConditionInput, input: DeleteMetaCatalogueInput!): MetaCatalogue @aws_api_key @aws_lambda
  deleteMissedUtterance(condition: ModelMissedUtteranceConditionInput, input: DeleteMissedUtteranceInput!): MissedUtterance @aws_api_key @aws_lambda
  deleteModule(condition: ModelModuleConditionInput, input: DeleteModuleInput!): Module @aws_api_key @aws_lambda
  deleteNode(condition: ModelNodeConditionInput, input: DeleteNodeInput!): Node @aws_api_key @aws_lambda
  deleteNodeTransaction(enterpriseId: ID!, interactionId: ID!, mode: MODE!, nextId: ID, nodeId: ID!, previousId: ID): Node @aws_api_key @aws_lambda
  deleteNotification(condition: ModelNotificationConditionInput, input: DeleteNotificationInput!): Notification @aws_api_key @aws_lambda
  deleteOrganization(condition: ModelOrganizationConditionInput, input: DeleteOrganizationInput!): Organization @aws_api_key @aws_lambda
  deleteOutwardWebhook(condition: ModelOutwardWebhookConditionInput, input: DeleteOutwardWebhookInput!): OutwardWebhook @aws_api_key @aws_lambda
  deletePermission(condition: ModelPermissionConditionInput, input: DeletePermissionInput!): Permission @aws_api_key @aws_lambda
  deleteProfile(condition: ModelProfileConditionInput, input: DeleteProfileInput!): Profile @aws_api_key @aws_lambda
  deleteRecurringCampaign(condition: ModelRecurringCampaignConditionInput, input: DeleteRecurringCampaignInput!): RecurringCampaign @aws_api_key @aws_lambda
  deleteRole(condition: ModelRoleConditionInput, input: DeleteRoleInput!): Role @aws_api_key @aws_lambda
  deleteSaasTrigger(condition: ModelSaasTriggerConditionInput, input: DeleteSaasTriggerInput!): SaasTrigger @aws_api_key @aws_lambda
  deleteScheduleNode(condition: ModelScheduleNodeConditionInput, input: DeleteScheduleNodeInput!): ScheduleNode @aws_api_key @aws_lambda
  deleteSession(condition: ModelSessionConditionInput, input: DeleteSessionInput!): Session @aws_api_key @aws_lambda
  deleteTableViews(condition: ModelTableViewsConditionInput, input: DeleteTableViewsInput!): TableViews @aws_api_key @aws_lambda
  deleteTemplateEvent(condition: ModelTemplateEventConditionInput, input: DeleteTemplateEventInput!): TemplateEvent @aws_api_key @aws_lambda
  deleteTemplates(condition: ModelTemplatesConditionInput, input: DeleteTemplatesInput!): Templates @aws_api_key @aws_lambda
  deleteTrigger(condition: ModelTriggerConditionInput, input: DeleteTriggerInput!): Trigger @aws_api_key @aws_lambda
  deleteUser(condition: ModelUserConditionInput, input: DeleteUserInput!): User @aws_api_key @aws_lambda
  deleteUtterance(condition: ModelUtteranceConditionInput, input: DeleteUtteranceInput!): Utterance @aws_api_key @aws_lambda
  deleteWhatsappFlows(condition: ModelWhatsappFlowsConditionInput, input: DeleteWhatsappFlowsInput!): WhatsappFlows @aws_api_key @aws_lambda
  deleteWorkflowStepEvent(condition: ModelWorkflowStepEventConditionInput, input: DeleteWorkflowStepEventInput!): WorkflowStepEvent @aws_api_key @aws_lambda
  deleteWorkflowSteps(condition: ModelWorkflowStepsConditionInput, input: DeleteWorkflowStepsInput!): WorkflowSteps @aws_api_key @aws_lambda
  deleteWorkflows(condition: ModelWorkflowsConditionInput, input: DeleteWorkflowsInput!): Workflows @aws_api_key @aws_lambda
  deleteWorkspace(condition: ModelWorkspaceConditionInput, input: DeleteWorkspaceInput!): Workspace @aws_api_key @aws_lambda
  importExport(input: ImportExportInput!): ImportExportPayload @aws_api_key @aws_lambda
  suggestedIntents(input: SuggestedIntentsInput!): SuggestedIntentPayload @aws_api_key @aws_lambda
  updateAbstractJourneyEvent(condition: ModelAbstractJourneyEventConditionInput, input: UpdateAbstractJourneyEventInput!): AbstractJourneyEvent @aws_api_key @aws_lambda
  updateAiBrainFileManager(condition: ModelAiBrainFileManagerConditionInput, input: UpdateAiBrainFileManagerInput!): AiBrainFileManager @aws_api_key @aws_lambda
  updateAnalyticsDashboard(condition: ModelAnalyticsDashboardConditionInput, input: UpdateAnalyticsDashboardInput!): AnalyticsDashboard @aws_api_key @aws_lambda
  updateApi(condition: ModelApiConditionInput, input: UpdateApiInput!): Api @aws_api_key @aws_lambda
  updateApiGateWay(condition: ModelApiGateWayConditionInput, input: UpdateApiGateWayInput!): ApiGateWay @aws_api_key @aws_lambda
  updateAudienceSegments(condition: ModelAudienceSegmentsConditionInput, input: UpdateAudienceSegmentsInput!): AudienceSegments @aws_api_key @aws_lambda
  updateBroadcast(condition: ModelBroadcastConditionInput, input: UpdateBroadcastInput!): Broadcast @aws_api_key @aws_lambda
  updateBroadcastMessage(condition: ModelBroadcastMessageConditionInput, input: UpdateBroadcastMessageInput!): BroadcastMessage @aws_api_key @aws_lambda
  updateCampaign(condition: ModelCampaignConditionInput, input: UpdateCampaignInput!): Campaign @aws_api_key @aws_lambda
  updateCampaignApprover(condition: ModelCampaignApproverConditionInput, input: UpdateCampaignApproverInput!): CampaignApprover @aws_api_key @aws_lambda
  updateCampaignAuditTrail(condition: ModelCampaignAuditTrailConditionInput, input: UpdateCampaignAuditTrailInput!): CampaignAuditTrail @aws_api_key @aws_lambda
  updateCampaignContactGroup(condition: ModelCampaignContactGroupConditionInput, input: UpdateCampaignContactGroupInput!): CampaignContactGroup @aws_api_key @aws_lambda
  updateCampaignMessage(condition: ModelCampaignMessageConditionInput, input: UpdateCampaignMessageInput!): CampaignMessage @aws_api_key @aws_lambda
  updateCatalogue(condition: ModelCatalogueConditionInput, input: UpdateCatalogueInput!): Catalogue @aws_api_key @aws_lambda
  updateCloudFunctions(condition: ModelCloudFunctionsConditionInput, input: UpdateCloudFunctionsInput!): CloudFunctions @aws_api_key @aws_lambda
  updateCollection(condition: ModelCollectionConditionInput, input: UpdateCollectionInput!): Collection @aws_api_key @aws_lambda
  updateCollectionCatalogue(condition: ModelCollectionCatalogueConditionInput, input: UpdateCollectionCatalogueInput!): CollectionCatalogue @aws_api_key @aws_lambda
  updateContactGroup(condition: ModelContactGroupConditionInput, input: UpdateContactGroupInput!): ContactGroup @aws_api_key @aws_lambda
  updateConversation(condition: ModelConversationConditionInput, input: UpdateConversationInput!): Conversation @aws_api_key @aws_lambda
  updateConversationInfo(condition: ModelConversationInfoConditionInput, input: UpdateConversationInfoInput!): ConversationInfo @aws_api_key @aws_lambda
  updateCustomer(condition: ModelCustomerConditionInput, input: UpdateCustomerInput!): Customer @aws_api_key @aws_lambda
  updateCustomerContactGroup(condition: ModelCustomerContactGroupConditionInput, input: UpdateCustomerContactGroupInput!): CustomerContactGroup @aws_api_key @aws_lambda
  updateDatabaseSchema(condition: ModelDatabaseSchemaConditionInput, input: UpdateDatabaseSchemaInput!): DatabaseSchema @aws_api_key @aws_lambda
  updateDatabaseValues(condition: ModelDatabaseValuesConditionInput, input: UpdateDatabaseValuesInput!): DatabaseValues @aws_api_key @aws_lambda
  updateEnterprise(condition: ModelEnterpriseConditionInput, input: UpdateEnterpriseInput!): Enterprise @aws_api_key @aws_lambda
  updateEntity(condition: ModelEntityConditionInput, input: UpdateEntityInput!): Entity @aws_api_key @aws_lambda
  updateEventLabel(condition: ModelEventLabelConditionInput, input: UpdateEventLabelInput!): EventLabel @aws_api_key @aws_lambda
  updateFileManagerFiles(condition: ModelFileManagerFilesConditionInput, input: UpdateFileManagerFilesInput!): FileManagerFiles @aws_api_key @aws_lambda
  updateFlow(condition: ModelFlowConditionInput, input: UpdateFlowInput!): Flow @aws_api_key @aws_lambda
  updateFlowTemplate(condition: ModelFlowTemplateConditionInput, input: UpdateFlowTemplateInput!): FlowTemplate @aws_api_key @aws_lambda
  updateHealthTable(condition: ModelHealthTableConditionInput, input: UpdateHealthTableInput!): HealthTable @aws_api_key @aws_lambda
  updateIntegration(condition: ModelIntegrationConditionInput, input: UpdateIntegrationInput!): Integration @aws_api_key @aws_lambda
  updateIntent(condition: ModelIntentConditionInput, input: UpdateIntentInput!): Intent @aws_api_key @aws_lambda
  updateIntentEvent(condition: ModelIntentEventConditionInput, input: UpdateIntentEventInput!): IntentEvent @aws_api_key @aws_lambda
  updateInteraction(condition: ModelInteractionConditionInput, input: UpdateInteractionInput!): Interaction @aws_api_key @aws_lambda
  updateInteractionEvent(condition: ModelInteractionEventConditionInput, input: UpdateInteractionEventInput!): InteractionEvent @aws_api_key @aws_lambda
  updateJob(condition: ModelJobConditionInput, input: UpdateJobInput!): Job @aws_api_key @aws_lambda
  updateLinkedApp(condition: ModelLinkedAppConditionInput, input: UpdateLinkedAppInput!): LinkedApp @aws_api_key @aws_lambda
  updateLinkedAppCatalogue(condition: ModelLinkedAppCatalogueConditionInput, input: UpdateLinkedAppCatalogueInput!): LinkedAppCatalogue @aws_api_key @aws_lambda
  updateLinkedAppCollection(condition: ModelLinkedAppCollectionConditionInput, input: UpdateLinkedAppCollectionInput!): LinkedAppCollection @aws_api_key @aws_lambda
  updateLinkedAppCustomer(condition: ModelLinkedAppCustomerConditionInput, input: UpdateLinkedAppCustomerInput!): LinkedAppCustomer @aws_api_key @aws_lambda
  updateLinkedAppMessage(condition: ModelLinkedAppMessageConditionInput, input: UpdateLinkedAppMessageInput!): LinkedAppMessage @aws_api_key @aws_lambda
  updateMetaCatalogue(condition: ModelMetaCatalogueConditionInput, input: UpdateMetaCatalogueInput!): MetaCatalogue @aws_api_key @aws_lambda
  updateMissedUtterance(condition: ModelMissedUtteranceConditionInput, input: UpdateMissedUtteranceInput!): MissedUtterance @aws_api_key @aws_lambda
  updateModule(condition: ModelModuleConditionInput, input: UpdateModuleInput!): Module @aws_api_key @aws_lambda
  updateNode(condition: ModelNodeConditionInput, input: UpdateNodeInput!): Node @aws_api_key @aws_lambda
  updateNotification(condition: ModelNotificationConditionInput, input: UpdateNotificationInput!): Notification @aws_api_key @aws_lambda
  updateOrganization(condition: ModelOrganizationConditionInput, input: UpdateOrganizationInput!): Organization @aws_api_key @aws_lambda
  updateOutwardWebhook(condition: ModelOutwardWebhookConditionInput, input: UpdateOutwardWebhookInput!): OutwardWebhook @aws_api_key @aws_lambda
  updatePermission(condition: ModelPermissionConditionInput, input: UpdatePermissionInput!): Permission @aws_api_key @aws_lambda
  updateProfile(condition: ModelProfileConditionInput, input: UpdateProfileInput!): Profile @aws_api_key @aws_lambda
  updateRecurringCampaign(condition: ModelRecurringCampaignConditionInput, input: UpdateRecurringCampaignInput!): RecurringCampaign @aws_api_key @aws_lambda
  updateRole(condition: ModelRoleConditionInput, input: UpdateRoleInput!): Role @aws_api_key @aws_lambda
  updateSaasTrigger(condition: ModelSaasTriggerConditionInput, input: UpdateSaasTriggerInput!): SaasTrigger @aws_api_key @aws_lambda
  updateScheduleNode(condition: ModelScheduleNodeConditionInput, input: UpdateScheduleNodeInput!): ScheduleNode @aws_api_key @aws_lambda
  updateSession(condition: ModelSessionConditionInput, input: UpdateSessionInput!): Session @aws_api_key @aws_lambda
  updateTableViews(condition: ModelTableViewsConditionInput, input: UpdateTableViewsInput!): TableViews @aws_api_key @aws_lambda
  updateTemplateEvent(condition: ModelTemplateEventConditionInput, input: UpdateTemplateEventInput!): TemplateEvent @aws_api_key @aws_lambda
  updateTemplates(condition: ModelTemplatesConditionInput, input: UpdateTemplatesInput!): Templates @aws_api_key @aws_lambda
  updateTrigger(condition: ModelTriggerConditionInput, input: UpdateTriggerInput!): Trigger @aws_api_key @aws_lambda
  updateUser(condition: ModelUserConditionInput, input: UpdateUserInput!): User @aws_api_key @aws_lambda
  updateUtterance(condition: ModelUtteranceConditionInput, input: UpdateUtteranceInput!): Utterance @aws_api_key @aws_lambda
  updateWhatsappFlows(condition: ModelWhatsappFlowsConditionInput, input: UpdateWhatsappFlowsInput!): WhatsappFlows @aws_api_key @aws_lambda
  updateWorkflowStepEvent(condition: ModelWorkflowStepEventConditionInput, input: UpdateWorkflowStepEventInput!): WorkflowStepEvent @aws_api_key @aws_lambda
  updateWorkflowSteps(condition: ModelWorkflowStepsConditionInput, input: UpdateWorkflowStepsInput!): WorkflowSteps @aws_api_key @aws_lambda
  updateWorkflows(condition: ModelWorkflowsConditionInput, input: UpdateWorkflowsInput!): Workflows @aws_api_key @aws_lambda
  updateWorkspace(condition: ModelWorkspaceConditionInput, input: UpdateWorkspaceInput!): Workspace @aws_api_key @aws_lambda
  workspaceBuild(enterpriseId: ID!, event: LEX_BUILD!, mode: MODE!, workspaceId: ID!): Workspace @aws_api_key @aws_lambda
}

type Node @aws_api_key @aws_lambda {
  config: AWSJSON
  connectedNodes: [String]
  connectedNodesData: AWSJSON
  createdAt: AWSDateTime!
  enterpriseId: ID!
  errorMessage: String
  healthTable(filter: ModelHealthTableFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelHealthTableConnection
  intentId: ID
  interaction: Interaction!
  interactionId: ID!
  language: String
  mode: MODE!
  nextId: ID
  noError: Boolean
  nodeId: ID!
  previousId: ID
  scheduleNode(filter: ModelScheduleNodeFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelScheduleNodeConnection
  template: Templates
  templateId: ID
  type: AWSJSON
  updatedAt: AWSDateTime!
}

type Notification @aws_api_key @aws_lambda {
  categoryStatus: JobStatus
  createdAt: AWSDateTime!
  description: String
  enterpriseId: ID!
  link: String
  mode: MODE!
  notificationId: ID!
  read: Boolean!
  title: String
  type: CATEGORY
  updatedAt: AWSDateTime
  user: User!
  userId: ID!
}

type Organization @aws_api_key @aws_lambda {
  brandId: String!
  brandName: String!
  createdAt: AWSDateTime!
  name: String!
  orgUnits(filter: ModelEnterpriseFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelEnterpriseConnection
  organizationId: ID!
  updatedAt: AWSDateTime!
}

type OutwardWebhook @aws_api_key @aws_lambda {
  config: AWSJSON
  createdAt: AWSDateTime!
  description: String
  enterpriseId: ID!
  filters: [String]
  mode: MODE!
  name: String!
  outwardWebhookId: ID!
  updatedAt: AWSDateTime!
  workspace: Workspace!
  workspaceId: ID!
}

type Permission @aws_api_key @aws_lambda {
  create: Boolean!
  createdAt: AWSDateTime!
  delete: Boolean!
  enterpriseId: ID!
  module: Module!
  moduleId: ID!
  permissionId: ID!
  read: Boolean!
  role: Role!
  roleId: ID!
  subModulePermission: AWSJSON
  update: Boolean!
  updatedAt: AWSDateTime!
}

type PermissionPayload {
  updated: Boolean!
}

type Profile @aws_api_key @aws_lambda {
  channel: CHANNEL!
  createdAt: AWSDateTime
  customer: Customer!
  customerId: ID!
  enterpriseId: ID!
  maskedProfileId: String
  mode: MODE!
  profileId: ID!
  updatedAt: AWSDateTime!
}

type Query {
  apiGateWayByWorkspaceId(enterpriseId: ID!, filter: ModelApiGateWayFilterInput, limit: Int, modeWorkspaceId: ModelApiGateWayApiGateWayByWorkspaceIdCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelApiGateWayConnection @aws_api_key @aws_lambda
  apisByWorkspaceId(enterpriseId: ID!, filter: ModelApiFilterInput, limit: Int, modeWorkspaceId: ModelApiApisByWorkspaceIdCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelApiConnection @aws_api_key @aws_lambda
  broadcastByStatus(filter: ModelBroadcastFilterInput, limit: Int, nextToken: String, scheduleTime: ModelStringKeyConditionInput, sortDirection: ModelSortDirection, status: BroadcastStatus!): ModelBroadcastConnection @aws_api_key @aws_lambda
  broadcastMessageByBroadcastId(enterpriseId: ID!, filter: ModelBroadcastMessageFilterInput, limit: Int, modeBroadcastId: ModelBroadcastMessageBroadcastMessageByBroadcastIdCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelBroadcastMessageConnection @aws_api_key @aws_lambda
  broadcastMessageByCustomerId(enterpriseId: ID!, filter: ModelBroadcastMessageFilterInput, limit: Int, modeCustomerId: ModelBroadcastMessageBroadcastMessageByCustomerIdCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelBroadcastMessageConnection @aws_api_key @aws_lambda
  broadcastMessageByLinkedAppId(enterpriseId: ID!, filter: ModelBroadcastMessageFilterInput, limit: Int, modeLinkedAppId: ModelBroadcastMessageBroadcastMessageByLinkedAppIdCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelBroadcastMessageConnection @aws_api_key @aws_lambda
  broadcastMessageByStatus(filter: ModelBroadcastMessageFilterInput, limit: Int, nextToken: String, scheduleTime: ModelStringKeyConditionInput, sortDirection: ModelSortDirection, status: BroadcastMessageStatus!): ModelBroadcastMessageConnection @aws_api_key @aws_lambda
  campaignApproverByCampaignId(enterpriseId: ID!, filter: ModelCampaignApproverFilterInput, limit: Int, modeCampaignId: ModelCampaignApproverCampaignApproverByCampaignIdCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelCampaignApproverConnection @aws_api_key @aws_lambda
  campaignApproverByUser(enterpriseId: ID!, filter: ModelCampaignApproverFilterInput, limit: Int, modeApproverId: ModelCampaignApproverCampaignApproverByUserCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelCampaignApproverConnection @aws_api_key @aws_lambda
  campaignAuditTrailByCampaignId(enterpriseId: ID!, filter: ModelCampaignAuditTrailFilterInput, limit: Int, modeCampaignId: ModelCampaignAuditTrailCampaignAuditTrailByCampaignIdCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelCampaignAuditTrailConnection @aws_api_key @aws_lambda
  campaignByStatus(filter: ModelCampaignFilterInput, limit: Int, nextToken: String, scheduleTime: ModelStringKeyConditionInput, sortDirection: ModelSortDirection, status: CampaignStatus!): ModelCampaignConnection @aws_api_key @aws_lambda
  campaignContactGroupByCampaignId(enterpriseId: ID!, filter: ModelCampaignContactGroupFilterInput, limit: Int, modeCampaignId: ModelCampaignContactGroupCampaignContactGroupByCampaignIdCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelCampaignContactGroupConnection @aws_api_key @aws_lambda
  campaignMessageByCustomerAndStatus(enterpriseId: ID!, filter: ModelCampaignMessageFilterInput, limit: Int, modeCustomerIdStatus: ModelCampaignMessageCampaignMessageByCustomerAndStatusCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelCampaignMessageConnection @aws_api_key @aws_lambda
  campaignMessageByCustomerId(enterpriseId: ID!, filter: ModelCampaignMessageFilterInput, limit: Int, modeCustomerId: ModelCampaignMessageCampaignMessageByCustomerIdCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelCampaignMessageConnection @aws_api_key @aws_lambda
  campaignMessageByStatus(filter: ModelCampaignMessageFilterInput, limit: Int, nextToken: String, scheduleTime: ModelStringKeyConditionInput, sortDirection: ModelSortDirection, status: CampaignMessageStatus!): ModelCampaignMessageConnection @aws_api_key @aws_lambda
  campaignMessageByStatusByEnterpriseId(enterpriseId: ID!, filter: ModelCampaignMessageFilterInput, limit: Int, modeCampaignIdStatus: ModelCampaignMessageCampaignMessageByStatusByEnterpriseIdCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelCampaignMessageConnection @aws_api_key @aws_lambda
  campaignMessagesByCampaignId(enterpriseId: ID!, filter: ModelCampaignMessageFilterInput, limit: Int, modeCampaignId: ModelCampaignMessageCampaignMessagesByCampaignIdCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelCampaignMessageConnection @aws_api_key @aws_lambda
  campaignsByMode(enterpriseId: ID!, filter: ModelCampaignFilterInput, limit: Int, modeScheduleTime: ModelCampaignCampaignsByModeCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelCampaignConnection @aws_api_key @aws_lambda
  campaignsByRecurringCampaignId(enterpriseId: ID!, filter: ModelCampaignFilterInput, limit: Int, modeRecurringCampaignId: ModelCampaignCampaignsByRecurringCampaignIdCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelCampaignConnection @aws_api_key @aws_lambda
  catalogueByMetaCatalogueId(enterpriseId: ID!, filter: ModelCatalogueFilterInput, limit: Int, modeMetaCatalogueId: ModelCatalogueCatalogueByMetaCatalogueIdCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelCatalogueConnection @aws_api_key @aws_lambda
  catalogueCollectionByCatalogueId(enterpriseId: ID!, filter: ModelCollectionCatalogueFilterInput, limit: Int, modeCatalogueId: ModelCollectionCatalogueCatalogueCollectionByCatalogueIdCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelCollectionCatalogueConnection @aws_api_key @aws_lambda
  catalogueCollectionByCollectionId(enterpriseId: ID!, filter: ModelCollectionCatalogueFilterInput, limit: Int, modeCollectionId: ModelCollectionCatalogueCatalogueCollectionByCollectionIdCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelCollectionCatalogueConnection @aws_api_key @aws_lambda
  catalogueLinkedAppByCatalogueId(enterpriseId: ID!, filter: ModelLinkedAppCatalogueFilterInput, limit: Int, modeCatalogueId: ModelLinkedAppCatalogueCatalogueLinkedAppByCatalogueIdCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelLinkedAppCatalogueConnection @aws_api_key @aws_lambda
  cloudFunctionsByWorkspaceId(enterpriseId: ID!, filter: ModelCloudFunctionsFilterInput, limit: Int, modeWorkspaceId: ModelCloudFunctionsCloudFunctionsByWorkspaceIdCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelCloudFunctionsConnection @aws_api_key @aws_lambda
  collectionByMetaCatalogueId(enterpriseId: ID!, filter: ModelCollectionFilterInput, limit: Int, modeMetaCatalogueId: ModelCollectionCollectionByMetaCatalogueIdCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelCollectionConnection @aws_api_key @aws_lambda
  collectionLinkedAppByCollectionId(enterpriseId: ID!, filter: ModelLinkedAppCollectionFilterInput, limit: Int, modeCollectionId: ModelLinkedAppCollectionCollectionLinkedAppByCollectionIdCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelLinkedAppCollectionConnection @aws_api_key @aws_lambda
  contactGroupCampaignByContactGroupId(enterpriseId: ID!, filter: ModelCampaignContactGroupFilterInput, limit: Int, modeContactGroupId: ModelCampaignContactGroupContactGroupCampaignByContactGroupIdCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelCampaignContactGroupConnection @aws_api_key @aws_lambda
  contactGroupContactByContactGroupId(enterpriseId: ID!, filter: ModelCustomerContactGroupFilterInput, limit: Int, modeContactGroupId: ModelCustomerContactGroupContactGroupContactByContactGroupIdCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelCustomerContactGroupConnection @aws_api_key @aws_lambda
  conversationByChannelMessageId(channelMessageId: ID!, filter: ModelConversationInfoFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelConversationInfoConnection @aws_api_key @aws_lambda
  conversationByCustomerAndCreatedBy(enterpriseId: ID!, filter: ModelConversationFilterInput, limit: Int, modeCustomerIdCreatedBy: ModelConversationConversationByCustomerAndCreatedByCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelConversationConnection @aws_api_key @aws_lambda
  conversationByDate(createdAt: ModelStringKeyConditionInput, filter: ModelConversationFilterInput, limit: Int, nextToken: String, sessionId: ID!, sortDirection: ModelSortDirection): ModelConversationConnection @aws_api_key @aws_lambda
  customerByParentId(filter: ModelCustomerFilterInput, limit: Int, nextToken: String, parentId: String!, sortDirection: ModelSortDirection, updatedAt: ModelStringKeyConditionInput): ModelCustomerConnection @aws_api_key @aws_lambda
  customerByUpdatedAt(enterpriseId: ID!, filter: ModelCustomerFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection, updatedAt: ModelStringKeyConditionInput): ModelCustomerConnection @aws_api_key @aws_lambda
  customerContactGroupByCustomerId(enterpriseId: ID!, filter: ModelCustomerContactGroupFilterInput, limit: Int, modeCustomerId: ModelCustomerContactGroupCustomerContactGroupByCustomerIdCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelCustomerContactGroupConnection @aws_api_key @aws_lambda
  customerConversationByDate(createdAt: ModelStringKeyConditionInput, customerId: ID!, filter: ModelConversationFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelConversationConnection @aws_api_key @aws_lambda
  customerEventsByTime(customerIdStartTimeEndTime: ModelWorkflowStepEventCustomerEventsByTimeCompositeKeyConditionInput, enterpriseId: ID!, filter: ModelWorkflowStepEventFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelWorkflowStepEventConnection @aws_api_key @aws_lambda
  databaseSchemaByWorkspaceId(enterpriseId: ID!, filter: ModelDatabaseSchemaFilterInput, limit: Int, modeWorkspaceId: ModelDatabaseSchemaDatabaseSchemaByWorkspaceIdCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelDatabaseSchemaConnection @aws_api_key @aws_lambda
  databaseValuesByDatabaseSchemaId(enterpriseId: ID!, filter: ModelDatabaseValuesFilterInput, limit: Int, modeDatabaseSchemaId: ModelDatabaseValuesDatabaseValuesByDatabaseSchemaIdCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelDatabaseValuesConnection @aws_api_key @aws_lambda
  entityByWorkspaceId(enterpriseId: ID!, filter: ModelEntityFilterInput, limit: Int, modeWorkspaceId: ModelEntityEntityByWorkspaceIdCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelEntityConnection @aws_api_key @aws_lambda
  eventLabelsByCustomerId(enterpriseId: ID!, filter: ModelEventLabelFilterInput, limit: Int, modeCustomerId: ModelEventLabelEventLabelsByCustomerIdCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelEventLabelConnection @aws_api_key @aws_lambda
  eventLabelsBycustomerAndLabel(enterpriseId: ID!, filter: ModelEventLabelFilterInput, limit: Int, modeCustomerIdLabel: ModelEventLabelEventLabelsBycustomerAndLabelCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelEventLabelConnection @aws_api_key @aws_lambda
  fileManagerFilesByWorkspaceId(enterpriseId: ID!, filter: ModelFileManagerFilesFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection, workspaceId: ModelIDKeyConditionInput): ModelFileManagerFilesConnection @aws_api_key @aws_lambda
  flowByWorkspaceId(enterpriseId: ID!, filter: ModelFlowFilterInput, limit: Int, modeWorkspaceId: ModelFlowFlowByWorkspaceIdCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelFlowConnection @aws_api_key @aws_lambda
  getAbstractJourneyEvent(enterpriseId: ID!, flowId: ID!, mode: MODE!): AbstractJourneyEvent @aws_api_key @aws_lambda
  getAiBrainFileManager(enterpriseId: ID!, fileId: ID!, mode: MODE!): AiBrainFileManager @aws_api_key @aws_lambda
  getAnalyticsDashboard(analyticsDashboardId: ID!, enterpriseId: ID!, mode: MODE!): AnalyticsDashboard @aws_api_key @aws_lambda
  getApi(apiId: ID!, enterpriseId: ID!, mode: MODE!): Api @aws_api_key @aws_lambda
  getApiGateWay(enterpriseId: ID!, mode: MODE!, name: String!, workspaceId: ID!): ApiGateWay @aws_api_key @aws_lambda
  getAudienceSegments(enterpriseId: ID!, mode: MODE!, segmentId: ID!): AudienceSegments @aws_api_key @aws_lambda
  getBroadcast(broadcastId: ID!, enterpriseId: ID!, mode: MODE!): Broadcast @aws_api_key @aws_lambda
  getBroadcastMessage(broadcastMessageId: ID!, enterpriseId: ID!, mode: MODE!): BroadcastMessage @aws_api_key @aws_lambda
  getCampaign(campaignId: ID!, enterpriseId: ID!, mode: MODE!): Campaign @aws_api_key @aws_lambda
  getCampaignApprover(approverId: ID!, campaignId: ID!, enterpriseId: ID!, mode: MODE!): CampaignApprover @aws_api_key @aws_lambda
  getCampaignAuditTrail(auditTrailId: ID!, enterpriseId: ID!, mode: MODE!): CampaignAuditTrail @aws_api_key @aws_lambda
  getCampaignContactGroup(campaignId: ID!, contactGroupId: ID!, enterpriseId: ID!, mode: MODE!): CampaignContactGroup @aws_api_key @aws_lambda
  getCampaignMessage(campaignMessageId: ID!, enterpriseId: ID!, mode: MODE!): CampaignMessage @aws_api_key @aws_lambda
  getCatalogue(catalogueId: ID!, enterpriseId: ID!, mode: MODE!): Catalogue @aws_api_key @aws_lambda
  getCloudFunctions(cloudFunctionsId: ID!, enterpriseId: ID!, mode: MODE!): CloudFunctions @aws_api_key @aws_lambda
  getCollection(collectionId: ID!, enterpriseId: ID!, mode: MODE!): Collection @aws_api_key @aws_lambda
  getCollectionCatalogue(catalogueId: ID!, collectionId: ID!, enterpriseId: ID!, mode: MODE!): CollectionCatalogue @aws_api_key @aws_lambda
  getContactGroup(contactGroupId: ID!, enterpriseId: ID!, mode: MODE!): ContactGroup @aws_api_key @aws_lambda
  getConversation(conversationId: ID!, enterpriseId: ID!, mode: MODE!): Conversation @aws_api_key @aws_lambda
  getConversationInfo(conversationId: ID!, enterpriseId: ID!, mode: MODE!): ConversationInfo @aws_api_key @aws_lambda
  getCustomer(customerId: ID!, enterpriseId: ID!, mode: MODE!): Customer @aws_api_key @aws_lambda
  getCustomerContactGroup(contactGroupId: ID!, customerId: ID!, enterpriseId: ID!, mode: MODE!): CustomerContactGroup @aws_api_key @aws_lambda
  getDatabaseSchema(databaseSchemaId: ID!, enterpriseId: ID!, mode: MODE!): DatabaseSchema @aws_api_key @aws_lambda
  getDatabaseValues(databaseValuesId: ID!, enterpriseId: ID!, mode: MODE!): DatabaseValues @aws_api_key @aws_lambda
  getEnterprise(enterpriseId: ID!): Enterprise @aws_api_key @aws_lambda
  getEntity(enterpriseId: ID!, entityId: ID!, mode: MODE!): Entity @aws_api_key @aws_lambda
  getEventLabel(conversationId: ID!, customerId: ID!, enterpriseId: ID!, labelId: ID!, mode: MODE!): EventLabel @aws_api_key @aws_lambda
  getFileManagerFiles(enterpriseId: ID!, fileManagerFilesId: ID!): FileManagerFiles @aws_api_key @aws_lambda
  getFlow(enterpriseId: ID!, flowId: ID!, mode: MODE!): Flow @aws_api_key @aws_lambda
  getFlowTemplate(enterpriseId: ID!, flowTemplateId: ID!, mode: MODE!): FlowTemplate @aws_api_key @aws_lambda
  getHealthTable(enterpriseId: ID!, healthTableId: ID!, mode: MODE!): HealthTable @aws_api_key @aws_lambda
  getIntegration(enterpriseId: ID!, integrationId: ID!, mode: MODE!): Integration @aws_api_key @aws_lambda
  getIntent(enterpriseId: ID!, intentId: ID!, mode: MODE!): Intent @aws_api_key @aws_lambda
  getIntentEvent(enterpriseId: ID!, intentEventId: ID!, mode: MODE!): IntentEvent @aws_api_key @aws_lambda
  getInteraction(enterpriseId: ID!, interactionId: ID!, mode: MODE!): Interaction @aws_api_key @aws_lambda
  getInteractionEvent(enterpriseId: ID!, interactionId: ID!, mode: MODE!): InteractionEvent @aws_api_key @aws_lambda
  getJob(enterpriseId: ID!, jobId: ID!, mode: MODE!): Job @aws_api_key @aws_lambda
  getLinkedApp(enterpriseId: ID!, linkedAppId: ID!, mode: MODE!): LinkedApp @aws_api_key @aws_lambda
  getLinkedAppCatalogue(catalogueId: ID!, enterpriseId: ID!, linkedAppId: ID!, mode: MODE!): LinkedAppCatalogue @aws_api_key @aws_lambda
  getLinkedAppCollection(collectionId: ID!, enterpriseId: ID!, linkedAppId: ID!, mode: MODE!): LinkedAppCollection @aws_api_key @aws_lambda
  getLinkedAppCustomer(customerId: ID!, enterpriseId: ID!, linkedAppId: ID!, mode: MODE!): LinkedAppCustomer @aws_api_key @aws_lambda
  getLinkedAppMessage(enterpriseId: ID!, mode: MODE!, waMessageId: ID!): LinkedAppMessage @aws_api_key @aws_lambda
  getMetaCatalogue(enterpriseId: ID!, metaCatalogueId: ID!, mode: MODE!): MetaCatalogue @aws_api_key @aws_lambda
  getMissedUtterance(enterpriseId: ID!, missedUtteranceId: ID!, mode: MODE!): MissedUtterance @aws_api_key @aws_lambda
  getModule(enterpriseId: ID!, moduleId: ID!): Module @aws_api_key @aws_lambda
  getNode(enterpriseId: ID!, mode: MODE!, nodeId: ID!): Node @aws_api_key @aws_lambda
  getNotification(enterpriseId: ID!, mode: MODE!, notificationId: ID!): Notification @aws_api_key @aws_lambda
  getOrganization(brandId: String!, organizationId: ID!): Organization @aws_api_key @aws_lambda
  getOutwardWebhook(enterpriseId: ID!, mode: MODE!, outwardWebhookId: ID!): OutwardWebhook @aws_api_key @aws_lambda
  getPermission(enterpriseId: ID!, permissionId: ID!): Permission @aws_api_key @aws_lambda
  getProfile(channel: CHANNEL!, enterpriseId: ID!, mode: MODE!, profileId: ID!): Profile @aws_api_key @aws_lambda
  getRecurringCampaign(enterpriseId: ID!, mode: MODE!, recurringCampaignId: ID!): RecurringCampaign @aws_api_key @aws_lambda
  getRole(enterpriseId: ID!, roleId: ID!): Role @aws_api_key @aws_lambda
  getSaasTrigger(enterpriseId: ID!, mode: MODE!, saasTriggerId: ID!): SaasTrigger @aws_api_key @aws_lambda
  getScheduleNode(enterpriseId: ID!, mode: MODE!, scheduleNodeId: ID!): ScheduleNode @aws_api_key @aws_lambda
  getSession(enterpriseId: ID!, mode: MODE!, sessionId: ID!): Session @aws_api_key @aws_lambda
  getTableViews(enterpriseId: ID!, mode: MODE!, tableViewsId: ID!): TableViews @aws_api_key @aws_lambda
  getTemplateEvent(enterpriseId: ID!, mode: MODE!, templateEventId: ID!): TemplateEvent @aws_api_key @aws_lambda
  getTemplates(enterpriseId: ID!, mode: MODE!, templatesId: ID!): Templates @aws_api_key @aws_lambda
  getTrigger(enterpriseId: ID!, mode: MODE!, name: String!, triggerId: ID!, workspaceId: ID!): Trigger @aws_api_key @aws_lambda
  getUser(enterpriseId: ID!, userId: ID!): User @aws_api_key @aws_lambda
  getUtterance(enterpriseId: ID!, mode: MODE!, utteranceId: ID!): Utterance @aws_api_key @aws_lambda
  getWhatsappFlows(enterpriseId: ID!, mode: MODE!, whatsappFlowId: ID!): WhatsappFlows @aws_api_key @aws_lambda
  getWorkflowStepEvent(id: ID!): WorkflowStepEvent @aws_api_key @aws_lambda
  getWorkflowSteps(enterpriseId: ID!, mode: MODE!, stepId: ID!): WorkflowSteps @aws_api_key @aws_lambda
  getWorkflows(enterpriseId: ID!, mode: MODE!, workflowId: ID!): Workflows @aws_api_key @aws_lambda
  getWorkspace(enterpriseId: ID!, mode: MODE!, workspaceId: ID!): Workspace @aws_api_key @aws_lambda
  healthTableByNodeId(filter: ModelHealthTableFilterInput, limit: Int, nextToken: String, nodeId: ID!, sortDirection: ModelSortDirection): ModelHealthTableConnection @aws_api_key @aws_lambda
  integrationByFlowId(enterpriseId: ID!, filter: ModelIntegrationFilterInput, limit: Int, modeFlowId: ModelIntegrationIntegrationByFlowIdCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelIntegrationConnection @aws_api_key @aws_lambda
  integrationsByWorkspaceId(enterpriseId: ID!, filter: ModelIntegrationFilterInput, limit: Int, modeWorkspaceId: ModelIntegrationIntegrationsByWorkspaceIdCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelIntegrationConnection @aws_api_key @aws_lambda
  integrationsByWorkspaceIdAndChannel(channel: ModelStringKeyConditionInput, filter: ModelIntegrationFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection, workspaceId: ID!): ModelIntegrationConnection @aws_api_key @aws_lambda
  intentByNodeId(filter: ModelIntentFilterInput, limit: Int, nextToken: String, nodeId: ID!, sortDirection: ModelSortDirection, updatedAt: ModelStringKeyConditionInput): ModelIntentConnection @aws_api_key @aws_lambda
  intentByWorkspaceId(enterpriseId: ID!, filter: ModelIntentFilterInput, limit: Int, modeWorkspaceId: ModelIntentIntentByWorkspaceIdCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelIntentConnection @aws_api_key @aws_lambda
  intentEvenByWorkspaceId(enterpriseId: ID!, filter: ModelIntentEventFilterInput, limit: Int, modeWorkspaceId: ModelIntentEventIntentEvenByWorkspaceIdCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelIntentEventConnection @aws_api_key @aws_lambda
  interactionByFlowId(enterpriseId: ID!, filter: ModelInteractionFilterInput, limit: Int, modeFlowId: ModelInteractionInteractionByFlowIdCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelInteractionConnection @aws_api_key @aws_lambda
  interactionEventByWorkspaceId(enterpriseId: ID!, filter: ModelInteractionEventFilterInput, limit: Int, modeWorkspaceId: ModelInteractionEventInteractionEventByWorkspaceIdCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelInteractionEventConnection @aws_api_key @aws_lambda
  jobByUser(enterpriseId: ID!, filter: ModelJobFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection, userId: ModelIDKeyConditionInput): ModelJobConnection @aws_api_key @aws_lambda
  journeyEventsByWorkspaceId(enterpriseId: ID!, filter: ModelAbstractJourneyEventFilterInput, limit: Int, modeWorkspaceId: ModelAbstractJourneyEventJourneyEventsByWorkspaceIdCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelAbstractJourneyEventConnection @aws_api_key @aws_lambda
  linkedAppCatalogueByLinkedAppId(enterpriseId: ID!, filter: ModelLinkedAppCatalogueFilterInput, limit: Int, modeLinkedAppId: ModelLinkedAppCatalogueLinkedAppCatalogueByLinkedAppIdCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelLinkedAppCatalogueConnection @aws_api_key @aws_lambda
  linkedAppCollectionByLinkedAppId(enterpriseId: ID!, filter: ModelLinkedAppCollectionFilterInput, limit: Int, modeLinkedAppId: ModelLinkedAppCollectionLinkedAppCollectionByLinkedAppIdCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelLinkedAppCollectionConnection @aws_api_key @aws_lambda
  linkedAppCustomerByCustomerId(enterpriseId: ID!, filter: ModelLinkedAppCustomerFilterInput, limit: Int, modeCustomerId: ModelLinkedAppCustomerLinkedAppCustomerByCustomerIdCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelLinkedAppCustomerConnection @aws_api_key @aws_lambda
  linkedAppCustomersByLinkedAppId(enterpriseId: ID!, filter: ModelLinkedAppCustomerFilterInput, limit: Int, modeLinkedAppId: ModelLinkedAppCustomerLinkedAppCustomersByLinkedAppIdCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelLinkedAppCustomerConnection @aws_api_key @aws_lambda
  linkedAppMessagesByLinkedAppCustomerId(enterpriseId: ID!, filter: ModelLinkedAppMessageFilterInput, limit: Int, modeLinkedAppIdCustomerId: ModelLinkedAppMessageLinkedAppMessagesByLinkedAppCustomerIdCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelLinkedAppMessageConnection @aws_api_key @aws_lambda
  listAbstractJourneyEvents(enterpriseId: ID, filter: ModelAbstractJourneyEventFilterInput, limit: Int, modeFlowId: ModelAbstractJourneyEventPrimaryCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelAbstractJourneyEventConnection @aws_api_key @aws_lambda
  listAiBrainFileManagers(enterpriseId: ID, filter: ModelAiBrainFileManagerFilterInput, limit: Int, modeFileId: ModelAiBrainFileManagerPrimaryCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelAiBrainFileManagerConnection @aws_api_key @aws_lambda
  listAnalyticsDashboards(enterpriseId: ID, filter: ModelAnalyticsDashboardFilterInput, limit: Int, modeAnalyticsDashboardId: ModelAnalyticsDashboardPrimaryCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelAnalyticsDashboardConnection @aws_api_key @aws_lambda
  listApiGateWays(enterpriseId: ID, filter: ModelApiGateWayFilterInput, limit: Int, modeWorkspaceIdName: ModelApiGateWayPrimaryCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelApiGateWayConnection @aws_api_key @aws_lambda
  listApis(enterpriseId: ID, filter: ModelApiFilterInput, limit: Int, modeApiId: ModelApiPrimaryCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelApiConnection @aws_api_key @aws_lambda
  listAudienceSegments(enterpriseId: ID, filter: ModelAudienceSegmentsFilterInput, limit: Int, modeSegmentId: ModelAudienceSegmentsPrimaryCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelAudienceSegmentsConnection @aws_api_key @aws_lambda
  listBroadcastMessages(enterpriseId: ID, filter: ModelBroadcastMessageFilterInput, limit: Int, modeBroadcastMessageId: ModelBroadcastMessagePrimaryCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelBroadcastMessageConnection @aws_api_key @aws_lambda
  listBroadcasts(enterpriseId: ID, filter: ModelBroadcastFilterInput, limit: Int, modeBroadcastId: ModelBroadcastPrimaryCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelBroadcastConnection @aws_api_key @aws_lambda
  listCampaignApprovers(enterpriseId: ID, filter: ModelCampaignApproverFilterInput, limit: Int, modeCampaignIdApproverId: ModelCampaignApproverPrimaryCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelCampaignApproverConnection @aws_api_key @aws_lambda
  listCampaignAuditTrails(enterpriseId: ID, filter: ModelCampaignAuditTrailFilterInput, limit: Int, modeAuditTrailId: ModelCampaignAuditTrailPrimaryCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelCampaignAuditTrailConnection @aws_api_key @aws_lambda
  listCampaignContactGroups(enterpriseId: ID, filter: ModelCampaignContactGroupFilterInput, limit: Int, modeCampaignIdContactGroupId: ModelCampaignContactGroupPrimaryCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelCampaignContactGroupConnection @aws_api_key @aws_lambda
  listCampaignMessages(enterpriseId: ID, filter: ModelCampaignMessageFilterInput, limit: Int, modeCampaignMessageId: ModelCampaignMessagePrimaryCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelCampaignMessageConnection @aws_api_key @aws_lambda
  listCampaigns(enterpriseId: ID, filter: ModelCampaignFilterInput, limit: Int, modeCampaignId: ModelCampaignPrimaryCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelCampaignConnection @aws_api_key @aws_lambda
  listCatalogues(enterpriseId: ID, filter: ModelCatalogueFilterInput, limit: Int, modeCatalogueId: ModelCataloguePrimaryCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelCatalogueConnection @aws_api_key @aws_lambda
  listCloudFunctions(enterpriseId: ID, filter: ModelCloudFunctionsFilterInput, limit: Int, modeCloudFunctionsId: ModelCloudFunctionsPrimaryCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelCloudFunctionsConnection @aws_api_key @aws_lambda
  listCollectionCatalogues(enterpriseId: ID, filter: ModelCollectionCatalogueFilterInput, limit: Int, modeCollectionIdCatalogueId: ModelCollectionCataloguePrimaryCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelCollectionCatalogueConnection @aws_api_key @aws_lambda
  listCollections(enterpriseId: ID, filter: ModelCollectionFilterInput, limit: Int, modeCollectionId: ModelCollectionPrimaryCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelCollectionConnection @aws_api_key @aws_lambda
  listContactGroups(enterpriseId: ID, filter: ModelContactGroupFilterInput, limit: Int, modeContactGroupId: ModelContactGroupPrimaryCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelContactGroupConnection @aws_api_key @aws_lambda
  listConversationInfos(enterpriseId: ID, filter: ModelConversationInfoFilterInput, limit: Int, modeConversationId: ModelConversationInfoPrimaryCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelConversationInfoConnection @aws_api_key @aws_lambda
  listConversations(enterpriseId: ID, filter: ModelConversationFilterInput, limit: Int, modeConversationId: ModelConversationPrimaryCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelConversationConnection @aws_api_key @aws_lambda
  listCustomerContactGroups(enterpriseId: ID, filter: ModelCustomerContactGroupFilterInput, limit: Int, modeCustomerIdContactGroupId: ModelCustomerContactGroupPrimaryCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelCustomerContactGroupConnection @aws_api_key @aws_lambda
  listCustomers(enterpriseId: ID, filter: ModelCustomerFilterInput, limit: Int, modeCustomerId: ModelCustomerPrimaryCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelCustomerConnection @aws_api_key @aws_lambda
  listDatabaseSchemas(enterpriseId: ID, filter: ModelDatabaseSchemaFilterInput, limit: Int, modeDatabaseSchemaId: ModelDatabaseSchemaPrimaryCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelDatabaseSchemaConnection @aws_api_key @aws_lambda
  listDatabaseValues(enterpriseId: ID, filter: ModelDatabaseValuesFilterInput, limit: Int, modeDatabaseValuesId: ModelDatabaseValuesPrimaryCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelDatabaseValuesConnection @aws_api_key @aws_lambda
  listEnterprises(enterpriseId: ID, filter: ModelEnterpriseFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelEnterpriseConnection @aws_api_key @aws_lambda
  listEntities(enterpriseId: ID, filter: ModelEntityFilterInput, limit: Int, modeEntityId: ModelEntityPrimaryCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelEntityConnection @aws_api_key @aws_lambda
  listEventLabels(enterpriseId: ID, filter: ModelEventLabelFilterInput, limit: Int, modeConversationIdCustomerIdLabelId: ModelEventLabelPrimaryCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelEventLabelConnection @aws_api_key @aws_lambda
  listFileManagerFiles(enterpriseId: ID, fileManagerFilesId: ModelIDKeyConditionInput, filter: ModelFileManagerFilesFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelFileManagerFilesConnection @aws_api_key @aws_lambda
  listFlowTemplates(enterpriseId: ID, filter: ModelFlowTemplateFilterInput, limit: Int, modeFlowTemplateId: ModelFlowTemplatePrimaryCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelFlowTemplateConnection @aws_api_key @aws_lambda
  listFlows(enterpriseId: ID, filter: ModelFlowFilterInput, limit: Int, modeFlowId: ModelFlowPrimaryCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelFlowConnection @aws_api_key @aws_lambda
  listHealthTables(enterpriseId: ID, filter: ModelHealthTableFilterInput, limit: Int, modeHealthTableId: ModelHealthTablePrimaryCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelHealthTableConnection @aws_api_key @aws_lambda
  listIntegrations(enterpriseId: ID, filter: ModelIntegrationFilterInput, limit: Int, modeIntegrationId: ModelIntegrationPrimaryCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelIntegrationConnection @aws_api_key @aws_lambda
  listIntentEvents(enterpriseId: ID, filter: ModelIntentEventFilterInput, limit: Int, modeIntentEventId: ModelIntentEventPrimaryCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelIntentEventConnection @aws_api_key @aws_lambda
  listIntents(enterpriseId: ID, filter: ModelIntentFilterInput, limit: Int, modeIntentId: ModelIntentPrimaryCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelIntentConnection @aws_api_key @aws_lambda
  listInteractionEvents(enterpriseId: ID, filter: ModelInteractionEventFilterInput, limit: Int, modeInteractionId: ModelInteractionEventPrimaryCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelInteractionEventConnection @aws_api_key @aws_lambda
  listInteractions(enterpriseId: ID, filter: ModelInteractionFilterInput, limit: Int, modeInteractionId: ModelInteractionPrimaryCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelInteractionConnection @aws_api_key @aws_lambda
  listJobs(enterpriseId: ID, filter: ModelJobFilterInput, limit: Int, modeJobId: ModelJobPrimaryCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelJobConnection @aws_api_key @aws_lambda
  listLinkedAppCatalogues(enterpriseId: ID, filter: ModelLinkedAppCatalogueFilterInput, limit: Int, modeLinkedAppIdCatalogueId: ModelLinkedAppCataloguePrimaryCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelLinkedAppCatalogueConnection @aws_api_key @aws_lambda
  listLinkedAppCollections(enterpriseId: ID, filter: ModelLinkedAppCollectionFilterInput, limit: Int, modeLinkedAppIdCollectionId: ModelLinkedAppCollectionPrimaryCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelLinkedAppCollectionConnection @aws_api_key @aws_lambda
  listLinkedAppCustomers(enterpriseId: ID, filter: ModelLinkedAppCustomerFilterInput, limit: Int, modeCustomerIdLinkedAppId: ModelLinkedAppCustomerPrimaryCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelLinkedAppCustomerConnection @aws_api_key @aws_lambda
  listLinkedAppMessages(enterpriseId: ID, filter: ModelLinkedAppMessageFilterInput, limit: Int, modeWaMessageId: ModelLinkedAppMessagePrimaryCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelLinkedAppMessageConnection @aws_api_key @aws_lambda
  listLinkedApps(enterpriseId: ID, filter: ModelLinkedAppFilterInput, limit: Int, modeLinkedAppId: ModelLinkedAppPrimaryCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelLinkedAppConnection @aws_api_key @aws_lambda
  listMetaCatalogues(enterpriseId: ID, filter: ModelMetaCatalogueFilterInput, limit: Int, modeMetaCatalogueId: ModelMetaCataloguePrimaryCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelMetaCatalogueConnection @aws_api_key @aws_lambda
  listMissedUtterances(enterpriseId: ID, filter: ModelMissedUtteranceFilterInput, limit: Int, modeMissedUtteranceId: ModelMissedUtterancePrimaryCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelMissedUtteranceConnection @aws_api_key @aws_lambda
  listModules(enterpriseId: ID, filter: ModelModuleFilterInput, limit: Int, moduleId: ModelIDKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelModuleConnection @aws_api_key @aws_lambda
  listNodes(enterpriseId: ID, filter: ModelNodeFilterInput, limit: Int, modeNodeId: ModelNodePrimaryCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelNodeConnection @aws_api_key @aws_lambda
  listNotifications(enterpriseId: ID, filter: ModelNotificationFilterInput, limit: Int, modeNotificationId: ModelNotificationPrimaryCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelNotificationConnection @aws_api_key @aws_lambda
  listOrganizations(brandId: ModelStringKeyConditionInput, filter: ModelOrganizationFilterInput, limit: Int, nextToken: String, organizationId: ID, sortDirection: ModelSortDirection): ModelOrganizationConnection @aws_api_key @aws_lambda
  listOutwardWebhooks(enterpriseId: ID, filter: ModelOutwardWebhookFilterInput, limit: Int, modeOutwardWebhookId: ModelOutwardWebhookPrimaryCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelOutwardWebhookConnection @aws_api_key @aws_lambda
  listPermissions(enterpriseId: ID, filter: ModelPermissionFilterInput, limit: Int, nextToken: String, permissionId: ModelIDKeyConditionInput, sortDirection: ModelSortDirection): ModelPermissionConnection @aws_api_key @aws_lambda
  listProfiles(enterpriseId: ID, filter: ModelProfileFilterInput, limit: Int, modeChannelProfileId: ModelProfilePrimaryCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelProfileConnection @aws_api_key @aws_lambda
  listRecurringCampaigns(enterpriseId: ID, filter: ModelRecurringCampaignFilterInput, limit: Int, modeRecurringCampaignId: ModelRecurringCampaignPrimaryCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelRecurringCampaignConnection @aws_api_key @aws_lambda
  listRoles(enterpriseId: ID, filter: ModelRoleFilterInput, limit: Int, nextToken: String, roleId: ModelIDKeyConditionInput, sortDirection: ModelSortDirection): ModelRoleConnection @aws_api_key @aws_lambda
  listSaasTriggers(enterpriseId: ID, filter: ModelSaasTriggerFilterInput, limit: Int, modeSaasTriggerId: ModelSaasTriggerPrimaryCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelSaasTriggerConnection @aws_api_key @aws_lambda
  listScheduleNodes(enterpriseId: ID, filter: ModelScheduleNodeFilterInput, limit: Int, modeScheduleNodeId: ModelScheduleNodePrimaryCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelScheduleNodeConnection @aws_api_key @aws_lambda
  listSessions(enterpriseId: ID, filter: ModelSessionFilterInput, limit: Int, modeSessionId: ModelSessionPrimaryCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelSessionConnection @aws_api_key @aws_lambda
  listTableViews(enterpriseId: ID, filter: ModelTableViewsFilterInput, limit: Int, modeTableViewsId: ModelTableViewsPrimaryCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelTableViewsConnection @aws_api_key @aws_lambda
  listTemplateEvents(enterpriseId: ID, filter: ModelTemplateEventFilterInput, limit: Int, modeTemplateEventId: ModelTemplateEventPrimaryCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelTemplateEventConnection @aws_api_key @aws_lambda
  listTemplates(enterpriseId: ID, filter: ModelTemplatesFilterInput, limit: Int, modeTemplatesId: ModelTemplatesPrimaryCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelTemplatesConnection @aws_api_key @aws_lambda
  listTriggers(enterpriseId: ID, filter: ModelTriggerFilterInput, limit: Int, modeTriggerIdNameWorkspaceId: ModelTriggerPrimaryCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelTriggerConnection @aws_api_key @aws_lambda
  listUsers(enterpriseId: ID, filter: ModelUserFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection, userId: ModelIDKeyConditionInput): ModelUserConnection @aws_api_key @aws_lambda
  listUtterances(enterpriseId: ID, filter: ModelUtteranceFilterInput, limit: Int, modeUtteranceId: ModelUtterancePrimaryCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelUtteranceConnection @aws_api_key @aws_lambda
  listWhatsappFlows(enterpriseId: ID, filter: ModelWhatsappFlowsFilterInput, limit: Int, modeWhatsappFlowId: ModelWhatsappFlowsPrimaryCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelWhatsappFlowsConnection @aws_api_key @aws_lambda
  listWorkflowStepEvents(filter: ModelWorkflowStepEventFilterInput, limit: Int, nextToken: String): ModelWorkflowStepEventConnection @aws_api_key @aws_lambda
  listWorkflowSteps(enterpriseId: ID, filter: ModelWorkflowStepsFilterInput, limit: Int, modeStepId: ModelWorkflowStepsPrimaryCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelWorkflowStepsConnection @aws_api_key @aws_lambda
  listWorkflows(enterpriseId: ID, filter: ModelWorkflowsFilterInput, limit: Int, modeWorkflowId: ModelWorkflowsPrimaryCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelWorkflowsConnection @aws_api_key @aws_lambda
  listWorkspaces(enterpriseId: ID, filter: ModelWorkspaceFilterInput, limit: Int, modeWorkspaceId: ModelWorkspacePrimaryCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelWorkspaceConnection @aws_api_key @aws_lambda
  missedUtteranceByNodeId(filter: ModelMissedUtteranceFilterInput, limit: Int, nextToken: String, nodeId: String!, sortDirection: ModelSortDirection, updatedAt: ModelStringKeyConditionInput): ModelMissedUtteranceConnection @aws_api_key @aws_lambda
  missedUtteranceByWorkspaceId(enterpriseId: ID!, filter: ModelMissedUtteranceFilterInput, limit: Int, modeWorkspaceId: ModelMissedUtteranceMissedUtteranceByWorkspaceIdCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelMissedUtteranceConnection @aws_api_key @aws_lambda
  nodeByInteractionId(enterpriseId: ID!, filter: ModelNodeFilterInput, limit: Int, modeInteractionId: ModelNodeNodeByInteractionIdCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelNodeConnection @aws_api_key @aws_lambda
  nodeByNodeId(filter: ModelNodeFilterInput, limit: Int, nextToken: String, nodeId: ID!, sortDirection: ModelSortDirection): ModelNodeConnection @aws_api_key @aws_lambda
  notificationByUser(enterpriseId: ID!, filter: ModelNotificationFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection, userId: ModelIDKeyConditionInput): ModelNotificationConnection @aws_api_key @aws_lambda
  orgUnitsByOrganizationId(brandId: ModelStringKeyConditionInput, filter: ModelEnterpriseFilterInput, limit: Int, nextToken: String, organizationId: ID!, sortDirection: ModelSortDirection): ModelEnterpriseConnection @aws_api_key @aws_lambda
  outwardWebhookByWorkspaceId(enterpriseId: ID!, filter: ModelOutwardWebhookFilterInput, limit: Int, modeWorkspaceId: ModelOutwardWebhookOutwardWebhookByWorkspaceIdCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelOutwardWebhookConnection @aws_api_key @aws_lambda
  permissionByRole(enterpriseId: ID!, filter: ModelPermissionFilterInput, limit: Int, nextToken: String, roleId: ModelIDKeyConditionInput, sortDirection: ModelSortDirection): ModelPermissionConnection @aws_api_key @aws_lambda
  profileByCustomerId(enterpriseId: ID!, filter: ModelProfileFilterInput, limit: Int, modeCustomerId: ModelProfileProfileByCustomerIdCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelProfileConnection @aws_api_key @aws_lambda
  quicksightGenerateAnonUrl(input: QuicksightGenerateAnonUrlInput): QuicksightGenerateAnonUrlPayload @aws_api_key @aws_lambda
  requestReportsCsv(input: RequestReportsCsvInput!): RequestReportsCsvPayload @aws_api_key @aws_lambda
  saasTriggerByWorkspaceId(enterpriseId: ID!, filter: ModelSaasTriggerFilterInput, limit: Int, modeWorkspaceId: ModelSaasTriggerSaasTriggerByWorkspaceIdCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelSaasTriggerConnection @aws_api_key @aws_lambda
  scheduleNodeByNodeId(enterpriseId: ID!, filter: ModelScheduleNodeFilterInput, limit: Int, modeNodeId: ModelScheduleNodeScheduleNodeByNodeIdCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelScheduleNodeConnection @aws_api_key @aws_lambda
  scheduleNodeBySessionId(filter: ModelScheduleNodeFilterInput, limit: Int, nextToken: String, sessionId: ID!, sortDirection: ModelSortDirection, updatedAt: ModelStringKeyConditionInput): ModelScheduleNodeConnection @aws_api_key @aws_lambda
  scheduleNodeByStatus(filter: ModelScheduleNodeFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection, status: ScheduleNodeStatus!, time: ModelStringKeyConditionInput): ModelScheduleNodeConnection @aws_api_key @aws_lambda
  searchBroadcastMessages(aggregates: [SearchableBroadcastMessageAggregationInput], filter: SearchableBroadcastMessageFilterInput, from: Int, limit: Int, nextToken: String, sort: [SearchableBroadcastMessageSortInput]): SearchableBroadcastMessageConnection @aws_api_key @aws_lambda
  searchBroadcasts(aggregates: [SearchableBroadcastAggregationInput], filter: SearchableBroadcastFilterInput, from: Int, limit: Int, nextToken: String, sort: [SearchableBroadcastSortInput]): SearchableBroadcastConnection @aws_api_key @aws_lambda
  searchCampaignApprovers(aggregates: [SearchableCampaignApproverAggregationInput], filter: SearchableCampaignApproverFilterInput, from: Int, limit: Int, nextToken: String, sort: [SearchableCampaignApproverSortInput]): SearchableCampaignApproverConnection @aws_api_key @aws_lambda
  searchCampaignAuditTrails(aggregates: [SearchableCampaignAuditTrailAggregationInput], filter: SearchableCampaignAuditTrailFilterInput, from: Int, limit: Int, nextToken: String, sort: [SearchableCampaignAuditTrailSortInput]): SearchableCampaignAuditTrailConnection @aws_api_key @aws_lambda
  searchCampaignMessages(aggregates: [SearchableCampaignMessageAggregationInput], filter: SearchableCampaignMessageFilterInput, from: Int, limit: Int, nextToken: String, sort: [SearchableCampaignMessageSortInput]): SearchableCampaignMessageConnection @aws_api_key @aws_lambda
  searchCatalogues(aggregates: [SearchableCatalogueAggregationInput], filter: SearchableCatalogueFilterInput, from: Int, limit: Int, nextToken: String, sort: [SearchableCatalogueSortInput]): SearchableCatalogueConnection @aws_api_key @aws_lambda
  searchCollectionCatalogues(aggregates: [SearchableCollectionCatalogueAggregationInput], filter: SearchableCollectionCatalogueFilterInput, from: Int, limit: Int, nextToken: String, sort: [SearchableCollectionCatalogueSortInput]): SearchableCollectionCatalogueConnection @aws_api_key @aws_lambda
  searchCollections(aggregates: [SearchableCollectionAggregationInput], filter: SearchableCollectionFilterInput, from: Int, limit: Int, nextToken: String, sort: [SearchableCollectionSortInput]): SearchableCollectionConnection @aws_api_key @aws_lambda
  searchContactGroups(aggregates: [SearchableContactGroupAggregationInput], filter: SearchableContactGroupFilterInput, from: Int, limit: Int, nextToken: String, sort: [SearchableContactGroupSortInput]): SearchableContactGroupConnection @aws_api_key @aws_lambda
  searchCustomerContactGroups(aggregates: [SearchableCustomerContactGroupAggregationInput], filter: SearchableCustomerContactGroupFilterInput, from: Int, limit: Int, nextToken: String, sort: [SearchableCustomerContactGroupSortInput]): SearchableCustomerContactGroupConnection @aws_api_key @aws_lambda
  searchCustomers(aggregates: [SearchableCustomerAggregationInput], filter: SearchableCustomerFilterInput, from: Int, limit: Int, nextToken: String, sort: [SearchableCustomerSortInput]): SearchableCustomerConnection @aws_api_key @aws_lambda
  searchDatabaseValues(aggregates: [SearchableDatabaseValuesAggregationInput], filter: SearchableDatabaseValuesFilterInput, from: Int, limit: Int, nextToken: String, sort: [SearchableDatabaseValuesSortInput]): SearchableDatabaseValuesConnection @aws_api_key @aws_lambda
  searchEventLabels(aggregates: [SearchableEventLabelAggregationInput], filter: SearchableEventLabelFilterInput, from: Int, limit: Int, nextToken: String, sort: [SearchableEventLabelSortInput]): SearchableEventLabelConnection @aws_api_key @aws_lambda
  searchHealthTables(aggregates: [SearchableHealthTableAggregationInput], filter: SearchableHealthTableFilterInput, from: Int, limit: Int, nextToken: String, sort: [SearchableHealthTableSortInput]): SearchableHealthTableConnection @aws_api_key @aws_lambda
  searchIntents(aggregates: [SearchableIntentAggregationInput], filter: SearchableIntentFilterInput, from: Int, limit: Int, nextToken: String, sort: [SearchableIntentSortInput]): SearchableIntentConnection @aws_api_key @aws_lambda
  searchLinkedAppCatalogues(aggregates: [SearchableLinkedAppCatalogueAggregationInput], filter: SearchableLinkedAppCatalogueFilterInput, from: Int, limit: Int, nextToken: String, sort: [SearchableLinkedAppCatalogueSortInput]): SearchableLinkedAppCatalogueConnection @aws_api_key @aws_lambda
  searchLinkedAppCollections(aggregates: [SearchableLinkedAppCollectionAggregationInput], filter: SearchableLinkedAppCollectionFilterInput, from: Int, limit: Int, nextToken: String, sort: [SearchableLinkedAppCollectionSortInput]): SearchableLinkedAppCollectionConnection @aws_api_key @aws_lambda
  searchLinkedAppMessages(aggregates: [SearchableLinkedAppMessageAggregationInput], filter: SearchableLinkedAppMessageFilterInput, from: Int, limit: Int, nextToken: String, sort: [SearchableLinkedAppMessageSortInput]): SearchableLinkedAppMessageConnection @aws_api_key @aws_lambda
  searchMissedUtterances(aggregates: [SearchableMissedUtteranceAggregationInput], filter: SearchableMissedUtteranceFilterInput, from: Int, limit: Int, nextToken: String, sort: [SearchableMissedUtteranceSortInput]): SearchableMissedUtteranceConnection @aws_api_key @aws_lambda
  searchSessions(aggregates: [SearchableSessionAggregationInput], filter: SearchableSessionFilterInput, from: Int, limit: Int, nextToken: String, sort: [SearchableSessionSortInput]): SearchableSessionConnection @aws_api_key @aws_lambda
  searchUtterances(aggregates: [SearchableUtteranceAggregationInput], filter: SearchableUtteranceFilterInput, from: Int, limit: Int, nextToken: String, sort: [SearchableUtteranceSortInput]): SearchableUtteranceConnection @aws_api_key @aws_lambda
  sessionByAssignment(assignment: ASSIGNMENT!, filter: ModelSessionFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection, updatedAt: ModelStringKeyConditionInput): ModelSessionConnection @aws_api_key @aws_lambda
  sessionByDate(customerId: ID!, filter: ModelSessionFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection, updatedAt: ModelStringKeyConditionInput): ModelSessionConnection @aws_api_key @aws_lambda
  sessionByFederatedLiveToCustomer(federatedLiveToCustomerId: ID!, filter: ModelSessionFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection, updatedAt: ModelStringKeyConditionInput): ModelSessionConnection @aws_api_key @aws_lambda
  sessionByUser(agentId: ModelIDKeyConditionInput, enterpriseId: ID!, filter: ModelSessionFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelSessionConnection @aws_api_key @aws_lambda
  sessionByWorkspace(assignment: ModelStringKeyConditionInput, filter: ModelSessionFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection, workspaceId: ID!): ModelSessionConnection @aws_api_key @aws_lambda
  sessionsByHealthTableId(filter: ModelSessionFilterInput, healthTableId: ID!, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelSessionConnection @aws_api_key @aws_lambda
  stepsByWorkflow(enterpriseId: ID!, filter: ModelWorkflowStepsFilterInput, limit: Int, modeWorkflowId: ModelWorkflowStepsStepsByWorkflowCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelWorkflowStepsConnection @aws_api_key @aws_lambda
  templateByWATemplateId(filter: ModelTemplatesFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection, templateId: String!): ModelTemplatesConnection @aws_api_key @aws_lambda
  templateEventByWorkspaceId(enterpriseId: ID!, filter: ModelTemplateEventFilterInput, limit: Int, modeWorkspaceId: ModelTemplateEventTemplateEventByWorkspaceIdCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelTemplateEventConnection @aws_api_key @aws_lambda
  templatesByIntegrationId(enterpriseId: ID!, filter: ModelTemplatesFilterInput, limit: Int, modeIntegrationId: ModelTemplatesTemplatesByIntegrationIdCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelTemplatesConnection @aws_api_key @aws_lambda
  triggerByWorkspaceId(enterpriseId: ID!, filter: ModelTriggerFilterInput, limit: Int, modeWorkspaceId: ModelTriggerTriggerByWorkspaceIdCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelTriggerConnection @aws_api_key @aws_lambda
  userByClerkUserId(clerkUserId: String!, filter: ModelUserFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelUserConnection @aws_api_key @aws_lambda
  utterancesByIntentId(enterpriseId: ID!, filter: ModelUtteranceFilterInput, limit: Int, modeIntentId: ModelUtteranceUtterancesByIntentIdCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelUtteranceConnection @aws_api_key @aws_lambda
  whatsappFlowsByIntegrationId(enterpriseId: ID!, filter: ModelWhatsappFlowsFilterInput, limit: Int, modeIntegrationId: ModelWhatsappFlowsWhatsappFlowsByIntegrationIdCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelWhatsappFlowsConnection @aws_api_key @aws_lambda
}

type QuicksightGenerateAnonUrlPayload {
  url: String
}

type RecurringCampaign @aws_api_key @aws_lambda {
  campaigns(filter: ModelCampaignFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelCampaignConnection
  createdAt: AWSDateTime!
  enterpriseId: ID!
  flow: Flow!
  flowId: ID!
  language: String
  lastResponseSyncTime: AWSDateTime
  mode: MODE!
  name: String!
  recurringCampaignId: ID!
  responseSyncStatus: ResponseSyncStatus
  segment: String
  type: String!
  updatedAt: AWSDateTime!
  variables: AWSJSON
}

type RequestReportsCsvPayload {
  url: String
}

type Role @aws_api_key @aws_lambda {
  createdAt: AWSDateTime!
  enterpriseId: ID!
  module: Module
  moduleId: ID
  name: String!
  permission(filter: ModelPermissionFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelPermissionConnection
  roleId: ID!
  updatedAt: AWSDateTime!
}

type SaasTrigger @aws_api_key @aws_lambda {
  channel: CHANNEL!
  createdAt: AWSDateTime!
  customerAttrPath: String
  enterpriseId: ID!
  incomingPath: String
  mode: MODE!
  name: String!
  otherDetails: AWSJSON
  saasTriggerId: ID!
  triggerType: String!
  type: SAAS!
  updatedAt: AWSDateTime!
  workspace: Workspace!
  workspaceId: ID!
}

type ScheduleNode @aws_api_key @aws_lambda {
  createdAt: AWSDateTime!
  enterpriseId: ID!
  mode: MODE!
  node: Node!
  nodeId: ID!
  scheduleNodeId: ID!
  session: Session!
  sessionId: ID!
  status: ScheduleNodeStatus!
  time: AWSDateTime!
  updatedAt: AWSDateTime
}

type SearchableAggregateBucketResult @aws_api_key @aws_lambda {
  buckets: [SearchableAggregateBucketResultItem]
}

type SearchableAggregateBucketResultItem @aws_api_key @aws_lambda {
  doc_count: Int!
  key: String!
}

type SearchableAggregateResult @aws_api_key @aws_lambda {
  name: String!
  result: SearchableAggregateGenericResult
}

type SearchableAggregateScalarResult @aws_api_key @aws_lambda {
  value: Float!
}

type SearchableBroadcastConnection @aws_api_key @aws_lambda {
  aggregateItems: [SearchableAggregateResult]!
  items: [Broadcast]!
  nextToken: String
  total: Int
}

type SearchableBroadcastMessageConnection @aws_api_key @aws_lambda {
  aggregateItems: [SearchableAggregateResult]!
  items: [BroadcastMessage]!
  nextToken: String
  total: Int
}

type SearchableCampaignApproverConnection @aws_api_key @aws_lambda {
  aggregateItems: [SearchableAggregateResult]!
  items: [CampaignApprover]!
  nextToken: String
  total: Int
}

type SearchableCampaignAuditTrailConnection @aws_api_key @aws_lambda {
  aggregateItems: [SearchableAggregateResult]!
  items: [CampaignAuditTrail]!
  nextToken: String
  total: Int
}

type SearchableCampaignMessageConnection @aws_api_key @aws_lambda {
  aggregateItems: [SearchableAggregateResult]!
  items: [CampaignMessage]!
  nextToken: String
  total: Int
}

type SearchableCatalogueConnection @aws_api_key @aws_lambda {
  aggregateItems: [SearchableAggregateResult]!
  items: [Catalogue]!
  nextToken: String
  total: Int
}

type SearchableCollectionCatalogueConnection @aws_api_key @aws_lambda {
  aggregateItems: [SearchableAggregateResult]!
  items: [CollectionCatalogue]!
  nextToken: String
  total: Int
}

type SearchableCollectionConnection @aws_api_key @aws_lambda {
  aggregateItems: [SearchableAggregateResult]!
  items: [Collection]!
  nextToken: String
  total: Int
}

type SearchableContactGroupConnection @aws_api_key @aws_lambda {
  aggregateItems: [SearchableAggregateResult]!
  items: [ContactGroup]!
  nextToken: String
  total: Int
}

type SearchableCustomerConnection @aws_api_key @aws_lambda {
  aggregateItems: [SearchableAggregateResult]!
  items: [Customer]!
  nextToken: String
  total: Int
}

type SearchableCustomerContactGroupConnection @aws_api_key @aws_lambda {
  aggregateItems: [SearchableAggregateResult]!
  items: [CustomerContactGroup]!
  nextToken: String
  total: Int
}

type SearchableDatabaseValuesConnection @aws_api_key @aws_lambda {
  aggregateItems: [SearchableAggregateResult]!
  items: [DatabaseValues]!
  nextToken: String
  total: Int
}

type SearchableEventLabelConnection @aws_api_key @aws_lambda {
  aggregateItems: [SearchableAggregateResult]!
  items: [EventLabel]!
  nextToken: String
  total: Int
}

type SearchableHealthTableConnection @aws_api_key @aws_lambda {
  aggregateItems: [SearchableAggregateResult]!
  items: [HealthTable]!
  nextToken: String
  total: Int
}

type SearchableIntentConnection @aws_api_key @aws_lambda {
  aggregateItems: [SearchableAggregateResult]!
  items: [Intent]!
  nextToken: String
  total: Int
}

type SearchableLinkedAppCatalogueConnection @aws_api_key @aws_lambda {
  aggregateItems: [SearchableAggregateResult]!
  items: [LinkedAppCatalogue]!
  nextToken: String
  total: Int
}

type SearchableLinkedAppCollectionConnection @aws_api_key @aws_lambda {
  aggregateItems: [SearchableAggregateResult]!
  items: [LinkedAppCollection]!
  nextToken: String
  total: Int
}

type SearchableLinkedAppMessageConnection @aws_api_key @aws_lambda {
  aggregateItems: [SearchableAggregateResult]!
  items: [LinkedAppMessage]!
  nextToken: String
  total: Int
}

type SearchableMissedUtteranceConnection @aws_api_key @aws_lambda {
  aggregateItems: [SearchableAggregateResult]!
  items: [MissedUtterance]!
  nextToken: String
  total: Int
}

type SearchableSessionConnection @aws_api_key @aws_lambda {
  aggregateItems: [SearchableAggregateResult]!
  items: [Session]!
  nextToken: String
  total: Int
}

type SearchableUtteranceConnection @aws_api_key @aws_lambda {
  aggregateItems: [SearchableAggregateResult]!
  items: [Utterance]!
  nextToken: String
  total: Int
}

type Session @aws_api_key @aws_lambda {
  active: Boolean
  agent: User
  agentId: ID
  assignment: ASSIGNMENT!
  campaignMessage: CampaignMessage
  campaignMessageId: ID
  channel: CHANNEL!
  conversationByDate(createdAt: ModelStringKeyConditionInput, filter: ModelConversationFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelConversationConnection
  createdAt: AWSDateTime
  currentNode: Node
  currentNodeId: ID
  customer: Customer!
  customerId: ID!
  enterpriseId: ID!
  federatedLiveToCustomer: Customer
  federatedLiveToCustomerId: ID
  federatedRole: FEDERATED_ROLE
  flow: Flow!
  flowId: ID!
  healthTable: HealthTable
  healthTableId: ID
  initiatedBy: SESSION_INITIATED_BY
  integration: Integration
  integrationId: ID
  language: String
  metaConversationId: ID
  mode: MODE!
  nextNode: Node
  nextNodeId: ID
  nodeId: ID
  preview: Boolean
  referrer: String
  referrerType: String
  scheduleNode(filter: ModelScheduleNodeFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection, updatedAt: ModelStringKeyConditionInput): ModelScheduleNodeConnection
  sessionId: ID!
  tags: [String]
  updatedAt: AWSDateTime
  validationCount: Int
  variables: AWSJSON
  workspace: Workspace!
  workspaceId: ID!
}

type Subscription {
  onConversationBySession(enterpriseId: String!, mode: MODE!, sessionId: ID!): Conversation @aws_api_key @aws_lambda @aws_subscribe(mutations : ["createConversation", "updateConversation"])
  onCreateAbstractJourneyEvent(filter: ModelSubscriptionAbstractJourneyEventFilterInput): AbstractJourneyEvent @aws_api_key @aws_lambda @aws_subscribe(mutations : ["createAbstractJourneyEvent"])
  onCreateAiBrainFileManager(filter: ModelSubscriptionAiBrainFileManagerFilterInput): AiBrainFileManager @aws_api_key @aws_lambda @aws_subscribe(mutations : ["createAiBrainFileManager"])
  onCreateAnalyticsDashboard(filter: ModelSubscriptionAnalyticsDashboardFilterInput): AnalyticsDashboard @aws_api_key @aws_lambda @aws_subscribe(mutations : ["createAnalyticsDashboard"])
  onCreateApi(filter: ModelSubscriptionApiFilterInput): Api @aws_api_key @aws_lambda @aws_subscribe(mutations : ["createApi"])
  onCreateApiGateWay(filter: ModelSubscriptionApiGateWayFilterInput): ApiGateWay @aws_api_key @aws_lambda @aws_subscribe(mutations : ["createApiGateWay"])
  onCreateAudienceSegments(filter: ModelSubscriptionAudienceSegmentsFilterInput): AudienceSegments @aws_api_key @aws_lambda @aws_subscribe(mutations : ["createAudienceSegments"])
  onCreateBroadcast(filter: ModelSubscriptionBroadcastFilterInput): Broadcast @aws_api_key @aws_lambda @aws_subscribe(mutations : ["createBroadcast"])
  onCreateBroadcastMessage(filter: ModelSubscriptionBroadcastMessageFilterInput): BroadcastMessage @aws_api_key @aws_lambda @aws_subscribe(mutations : ["createBroadcastMessage"])
  onCreateCampaign(filter: ModelSubscriptionCampaignFilterInput): Campaign @aws_api_key @aws_lambda @aws_subscribe(mutations : ["createCampaign"])
  onCreateCampaignApprover(filter: ModelSubscriptionCampaignApproverFilterInput): CampaignApprover @aws_api_key @aws_lambda @aws_subscribe(mutations : ["createCampaignApprover"])
  onCreateCampaignAuditTrail(filter: ModelSubscriptionCampaignAuditTrailFilterInput): CampaignAuditTrail @aws_api_key @aws_lambda @aws_subscribe(mutations : ["createCampaignAuditTrail"])
  onCreateCampaignContactGroup(filter: ModelSubscriptionCampaignContactGroupFilterInput): CampaignContactGroup @aws_api_key @aws_lambda @aws_subscribe(mutations : ["createCampaignContactGroup"])
  onCreateCampaignMessage(filter: ModelSubscriptionCampaignMessageFilterInput): CampaignMessage @aws_api_key @aws_lambda @aws_subscribe(mutations : ["createCampaignMessage"])
  onCreateCatalogue(filter: ModelSubscriptionCatalogueFilterInput): Catalogue @aws_api_key @aws_lambda @aws_subscribe(mutations : ["createCatalogue"])
  onCreateCloudFunctions(filter: ModelSubscriptionCloudFunctionsFilterInput): CloudFunctions @aws_api_key @aws_lambda @aws_subscribe(mutations : ["createCloudFunctions"])
  onCreateCollection(filter: ModelSubscriptionCollectionFilterInput): Collection @aws_api_key @aws_lambda @aws_subscribe(mutations : ["createCollection"])
  onCreateCollectionCatalogue(filter: ModelSubscriptionCollectionCatalogueFilterInput): CollectionCatalogue @aws_api_key @aws_lambda @aws_subscribe(mutations : ["createCollectionCatalogue"])
  onCreateContactGroup(filter: ModelSubscriptionContactGroupFilterInput): ContactGroup @aws_api_key @aws_lambda @aws_subscribe(mutations : ["createContactGroup"])
  onCreateConversation(filter: ModelSubscriptionConversationFilterInput): Conversation @aws_api_key @aws_lambda @aws_subscribe(mutations : ["createConversation"])
  onCreateConversationInfo(filter: ModelSubscriptionConversationInfoFilterInput): ConversationInfo @aws_api_key @aws_lambda @aws_subscribe(mutations : ["createConversationInfo"])
  onCreateCustomer(filter: ModelSubscriptionCustomerFilterInput): Customer @aws_api_key @aws_lambda @aws_subscribe(mutations : ["createCustomer"])
  onCreateCustomerContactGroup(filter: ModelSubscriptionCustomerContactGroupFilterInput): CustomerContactGroup @aws_api_key @aws_lambda @aws_subscribe(mutations : ["createCustomerContactGroup"])
  onCreateDatabaseSchema(filter: ModelSubscriptionDatabaseSchemaFilterInput): DatabaseSchema @aws_api_key @aws_lambda @aws_subscribe(mutations : ["createDatabaseSchema"])
  onCreateDatabaseValues(filter: ModelSubscriptionDatabaseValuesFilterInput): DatabaseValues @aws_api_key @aws_lambda @aws_subscribe(mutations : ["createDatabaseValues"])
  onCreateEnterprise(filter: ModelSubscriptionEnterpriseFilterInput): Enterprise @aws_api_key @aws_lambda @aws_subscribe(mutations : ["createEnterprise"])
  onCreateEntity(filter: ModelSubscriptionEntityFilterInput): Entity @aws_api_key @aws_lambda @aws_subscribe(mutations : ["createEntity"])
  onCreateEventLabel(filter: ModelSubscriptionEventLabelFilterInput): EventLabel @aws_api_key @aws_lambda @aws_subscribe(mutations : ["createEventLabel"])
  onCreateFileManagerFiles(filter: ModelSubscriptionFileManagerFilesFilterInput): FileManagerFiles @aws_api_key @aws_lambda @aws_subscribe(mutations : ["createFileManagerFiles"])
  onCreateFlow(filter: ModelSubscriptionFlowFilterInput): Flow @aws_api_key @aws_lambda @aws_subscribe(mutations : ["createFlow"])
  onCreateFlowTemplate(filter: ModelSubscriptionFlowTemplateFilterInput): FlowTemplate @aws_api_key @aws_lambda @aws_subscribe(mutations : ["createFlowTemplate"])
  onCreateHealthTable(filter: ModelSubscriptionHealthTableFilterInput): HealthTable @aws_api_key @aws_lambda @aws_subscribe(mutations : ["createHealthTable"])
  onCreateIntegration(filter: ModelSubscriptionIntegrationFilterInput): Integration @aws_api_key @aws_lambda @aws_subscribe(mutations : ["createIntegration"])
  onCreateIntent(filter: ModelSubscriptionIntentFilterInput): Intent @aws_api_key @aws_lambda @aws_subscribe(mutations : ["createIntent"])
  onCreateIntentEvent(filter: ModelSubscriptionIntentEventFilterInput): IntentEvent @aws_api_key @aws_lambda @aws_subscribe(mutations : ["createIntentEvent"])
  onCreateInteraction(filter: ModelSubscriptionInteractionFilterInput): Interaction @aws_api_key @aws_lambda @aws_subscribe(mutations : ["createInteraction"])
  onCreateInteractionEvent(filter: ModelSubscriptionInteractionEventFilterInput): InteractionEvent @aws_api_key @aws_lambda @aws_subscribe(mutations : ["createInteractionEvent"])
  onCreateJob(filter: ModelSubscriptionJobFilterInput): Job @aws_api_key @aws_lambda @aws_subscribe(mutations : ["createJob"])
  onCreateLinkedApp(filter: ModelSubscriptionLinkedAppFilterInput): LinkedApp @aws_api_key @aws_lambda @aws_subscribe(mutations : ["createLinkedApp"])
  onCreateLinkedAppCatalogue(filter: ModelSubscriptionLinkedAppCatalogueFilterInput): LinkedAppCatalogue @aws_api_key @aws_lambda @aws_subscribe(mutations : ["createLinkedAppCatalogue"])
  onCreateLinkedAppCollection(filter: ModelSubscriptionLinkedAppCollectionFilterInput): LinkedAppCollection @aws_api_key @aws_lambda @aws_subscribe(mutations : ["createLinkedAppCollection"])
  onCreateLinkedAppCustomer(filter: ModelSubscriptionLinkedAppCustomerFilterInput): LinkedAppCustomer @aws_api_key @aws_lambda @aws_subscribe(mutations : ["createLinkedAppCustomer"])
  onCreateLinkedAppMessage(filter: ModelSubscriptionLinkedAppMessageFilterInput): LinkedAppMessage @aws_api_key @aws_lambda @aws_subscribe(mutations : ["createLinkedAppMessage"])
  onCreateMetaCatalogue(filter: ModelSubscriptionMetaCatalogueFilterInput): MetaCatalogue @aws_api_key @aws_lambda @aws_subscribe(mutations : ["createMetaCatalogue"])
  onCreateMissedUtterance(filter: ModelSubscriptionMissedUtteranceFilterInput): MissedUtterance @aws_api_key @aws_lambda @aws_subscribe(mutations : ["createMissedUtterance"])
  onCreateModule(filter: ModelSubscriptionModuleFilterInput): Module @aws_api_key @aws_lambda @aws_subscribe(mutations : ["createModule"])
  onCreateNode(filter: ModelSubscriptionNodeFilterInput): Node @aws_api_key @aws_lambda @aws_subscribe(mutations : ["createNode"])
  onCreateNotification(filter: ModelSubscriptionNotificationFilterInput): Notification @aws_api_key @aws_lambda @aws_subscribe(mutations : ["createNotification"])
  onCreateOrganization(filter: ModelSubscriptionOrganizationFilterInput): Organization @aws_api_key @aws_lambda @aws_subscribe(mutations : ["createOrganization"])
  onCreateOutwardWebhook(filter: ModelSubscriptionOutwardWebhookFilterInput): OutwardWebhook @aws_api_key @aws_lambda @aws_subscribe(mutations : ["createOutwardWebhook"])
  onCreatePermission(filter: ModelSubscriptionPermissionFilterInput): Permission @aws_api_key @aws_lambda @aws_subscribe(mutations : ["createPermission"])
  onCreateProfile(filter: ModelSubscriptionProfileFilterInput): Profile @aws_api_key @aws_lambda @aws_subscribe(mutations : ["createProfile"])
  onCreateRecurringCampaign(filter: ModelSubscriptionRecurringCampaignFilterInput): RecurringCampaign @aws_api_key @aws_lambda @aws_subscribe(mutations : ["createRecurringCampaign"])
  onCreateRole(filter: ModelSubscriptionRoleFilterInput): Role @aws_api_key @aws_lambda @aws_subscribe(mutations : ["createRole"])
  onCreateSaasTrigger(filter: ModelSubscriptionSaasTriggerFilterInput): SaasTrigger @aws_api_key @aws_lambda @aws_subscribe(mutations : ["createSaasTrigger"])
  onCreateScheduleNode(filter: ModelSubscriptionScheduleNodeFilterInput): ScheduleNode @aws_api_key @aws_lambda @aws_subscribe(mutations : ["createScheduleNode"])
  onCreateSession(filter: ModelSubscriptionSessionFilterInput): Session @aws_api_key @aws_lambda @aws_subscribe(mutations : ["createSession"])
  onCreateTableViews(filter: ModelSubscriptionTableViewsFilterInput): TableViews @aws_api_key @aws_lambda @aws_subscribe(mutations : ["createTableViews"])
  onCreateTemplateEvent(filter: ModelSubscriptionTemplateEventFilterInput): TemplateEvent @aws_api_key @aws_lambda @aws_subscribe(mutations : ["createTemplateEvent"])
  onCreateTemplates(filter: ModelSubscriptionTemplatesFilterInput): Templates @aws_api_key @aws_lambda @aws_subscribe(mutations : ["createTemplates"])
  onCreateTrigger(filter: ModelSubscriptionTriggerFilterInput): Trigger @aws_api_key @aws_lambda @aws_subscribe(mutations : ["createTrigger"])
  onCreateUser(filter: ModelSubscriptionUserFilterInput): User @aws_api_key @aws_lambda @aws_subscribe(mutations : ["createUser"])
  onCreateUtterance(filter: ModelSubscriptionUtteranceFilterInput): Utterance @aws_api_key @aws_lambda @aws_subscribe(mutations : ["createUtterance"])
  onCreateWhatsappFlows(filter: ModelSubscriptionWhatsappFlowsFilterInput): WhatsappFlows @aws_api_key @aws_lambda @aws_subscribe(mutations : ["createWhatsappFlows"])
  onCreateWorkflowStepEvent(filter: ModelSubscriptionWorkflowStepEventFilterInput): WorkflowStepEvent @aws_api_key @aws_lambda @aws_subscribe(mutations : ["createWorkflowStepEvent"])
  onCreateWorkflowSteps(filter: ModelSubscriptionWorkflowStepsFilterInput): WorkflowSteps @aws_api_key @aws_lambda @aws_subscribe(mutations : ["createWorkflowSteps"])
  onCreateWorkflows(filter: ModelSubscriptionWorkflowsFilterInput): Workflows @aws_api_key @aws_lambda @aws_subscribe(mutations : ["createWorkflows"])
  onCreateWorkspace(filter: ModelSubscriptionWorkspaceFilterInput): Workspace @aws_api_key @aws_lambda @aws_subscribe(mutations : ["createWorkspace"])
  onDeleteAbstractJourneyEvent(filter: ModelSubscriptionAbstractJourneyEventFilterInput): AbstractJourneyEvent @aws_api_key @aws_lambda @aws_subscribe(mutations : ["deleteAbstractJourneyEvent"])
  onDeleteAiBrainFileManager(filter: ModelSubscriptionAiBrainFileManagerFilterInput): AiBrainFileManager @aws_api_key @aws_lambda @aws_subscribe(mutations : ["deleteAiBrainFileManager"])
  onDeleteAnalyticsDashboard(filter: ModelSubscriptionAnalyticsDashboardFilterInput): AnalyticsDashboard @aws_api_key @aws_lambda @aws_subscribe(mutations : ["deleteAnalyticsDashboard"])
  onDeleteApi(filter: ModelSubscriptionApiFilterInput): Api @aws_api_key @aws_lambda @aws_subscribe(mutations : ["deleteApi"])
  onDeleteApiGateWay(filter: ModelSubscriptionApiGateWayFilterInput): ApiGateWay @aws_api_key @aws_lambda @aws_subscribe(mutations : ["deleteApiGateWay"])
  onDeleteAudienceSegments(filter: ModelSubscriptionAudienceSegmentsFilterInput): AudienceSegments @aws_api_key @aws_lambda @aws_subscribe(mutations : ["deleteAudienceSegments"])
  onDeleteBroadcast(filter: ModelSubscriptionBroadcastFilterInput): Broadcast @aws_api_key @aws_lambda @aws_subscribe(mutations : ["deleteBroadcast"])
  onDeleteBroadcastMessage(filter: ModelSubscriptionBroadcastMessageFilterInput): BroadcastMessage @aws_api_key @aws_lambda @aws_subscribe(mutations : ["deleteBroadcastMessage"])
  onDeleteCampaign(filter: ModelSubscriptionCampaignFilterInput): Campaign @aws_api_key @aws_lambda @aws_subscribe(mutations : ["deleteCampaign"])
  onDeleteCampaignApprover(filter: ModelSubscriptionCampaignApproverFilterInput): CampaignApprover @aws_api_key @aws_lambda @aws_subscribe(mutations : ["deleteCampaignApprover"])
  onDeleteCampaignAuditTrail(filter: ModelSubscriptionCampaignAuditTrailFilterInput): CampaignAuditTrail @aws_api_key @aws_lambda @aws_subscribe(mutations : ["deleteCampaignAuditTrail"])
  onDeleteCampaignContactGroup(filter: ModelSubscriptionCampaignContactGroupFilterInput): CampaignContactGroup @aws_api_key @aws_lambda @aws_subscribe(mutations : ["deleteCampaignContactGroup"])
  onDeleteCampaignMessage(filter: ModelSubscriptionCampaignMessageFilterInput): CampaignMessage @aws_api_key @aws_lambda @aws_subscribe(mutations : ["deleteCampaignMessage"])
  onDeleteCatalogue(filter: ModelSubscriptionCatalogueFilterInput): Catalogue @aws_api_key @aws_lambda @aws_subscribe(mutations : ["deleteCatalogue"])
  onDeleteCloudFunctions(filter: ModelSubscriptionCloudFunctionsFilterInput): CloudFunctions @aws_api_key @aws_lambda @aws_subscribe(mutations : ["deleteCloudFunctions"])
  onDeleteCollection(filter: ModelSubscriptionCollectionFilterInput): Collection @aws_api_key @aws_lambda @aws_subscribe(mutations : ["deleteCollection"])
  onDeleteCollectionCatalogue(filter: ModelSubscriptionCollectionCatalogueFilterInput): CollectionCatalogue @aws_api_key @aws_lambda @aws_subscribe(mutations : ["deleteCollectionCatalogue"])
  onDeleteContactGroup(filter: ModelSubscriptionContactGroupFilterInput): ContactGroup @aws_api_key @aws_lambda @aws_subscribe(mutations : ["deleteContactGroup"])
  onDeleteConversation(filter: ModelSubscriptionConversationFilterInput): Conversation @aws_api_key @aws_lambda @aws_subscribe(mutations : ["deleteConversation"])
  onDeleteConversationInfo(filter: ModelSubscriptionConversationInfoFilterInput): ConversationInfo @aws_api_key @aws_lambda @aws_subscribe(mutations : ["deleteConversationInfo"])
  onDeleteCustomer(filter: ModelSubscriptionCustomerFilterInput): Customer @aws_api_key @aws_lambda @aws_subscribe(mutations : ["deleteCustomer"])
  onDeleteCustomerContactGroup(filter: ModelSubscriptionCustomerContactGroupFilterInput): CustomerContactGroup @aws_api_key @aws_lambda @aws_subscribe(mutations : ["deleteCustomerContactGroup"])
  onDeleteDatabaseSchema(filter: ModelSubscriptionDatabaseSchemaFilterInput): DatabaseSchema @aws_api_key @aws_lambda @aws_subscribe(mutations : ["deleteDatabaseSchema"])
  onDeleteDatabaseValues(filter: ModelSubscriptionDatabaseValuesFilterInput): DatabaseValues @aws_api_key @aws_lambda @aws_subscribe(mutations : ["deleteDatabaseValues"])
  onDeleteEnterprise(filter: ModelSubscriptionEnterpriseFilterInput): Enterprise @aws_api_key @aws_lambda @aws_subscribe(mutations : ["deleteEnterprise"])
  onDeleteEntity(filter: ModelSubscriptionEntityFilterInput): Entity @aws_api_key @aws_lambda @aws_subscribe(mutations : ["deleteEntity"])
  onDeleteEventLabel(filter: ModelSubscriptionEventLabelFilterInput): EventLabel @aws_api_key @aws_lambda @aws_subscribe(mutations : ["deleteEventLabel"])
  onDeleteFileManagerFiles(filter: ModelSubscriptionFileManagerFilesFilterInput): FileManagerFiles @aws_api_key @aws_lambda @aws_subscribe(mutations : ["deleteFileManagerFiles"])
  onDeleteFlow(filter: ModelSubscriptionFlowFilterInput): Flow @aws_api_key @aws_lambda @aws_subscribe(mutations : ["deleteFlow"])
  onDeleteFlowTemplate(filter: ModelSubscriptionFlowTemplateFilterInput): FlowTemplate @aws_api_key @aws_lambda @aws_subscribe(mutations : ["deleteFlowTemplate"])
  onDeleteHealthTable(filter: ModelSubscriptionHealthTableFilterInput): HealthTable @aws_api_key @aws_lambda @aws_subscribe(mutations : ["deleteHealthTable"])
  onDeleteIntegration(filter: ModelSubscriptionIntegrationFilterInput): Integration @aws_api_key @aws_lambda @aws_subscribe(mutations : ["deleteIntegration"])
  onDeleteIntent(filter: ModelSubscriptionIntentFilterInput): Intent @aws_api_key @aws_lambda @aws_subscribe(mutations : ["deleteIntent"])
  onDeleteIntentEvent(filter: ModelSubscriptionIntentEventFilterInput): IntentEvent @aws_api_key @aws_lambda @aws_subscribe(mutations : ["deleteIntentEvent"])
  onDeleteInteraction(filter: ModelSubscriptionInteractionFilterInput): Interaction @aws_api_key @aws_lambda @aws_subscribe(mutations : ["deleteInteraction"])
  onDeleteInteractionEvent(filter: ModelSubscriptionInteractionEventFilterInput): InteractionEvent @aws_api_key @aws_lambda @aws_subscribe(mutations : ["deleteInteractionEvent"])
  onDeleteJob(filter: ModelSubscriptionJobFilterInput): Job @aws_api_key @aws_lambda @aws_subscribe(mutations : ["deleteJob"])
  onDeleteLinkedApp(filter: ModelSubscriptionLinkedAppFilterInput): LinkedApp @aws_api_key @aws_lambda @aws_subscribe(mutations : ["deleteLinkedApp"])
  onDeleteLinkedAppCatalogue(filter: ModelSubscriptionLinkedAppCatalogueFilterInput): LinkedAppCatalogue @aws_api_key @aws_lambda @aws_subscribe(mutations : ["deleteLinkedAppCatalogue"])
  onDeleteLinkedAppCollection(filter: ModelSubscriptionLinkedAppCollectionFilterInput): LinkedAppCollection @aws_api_key @aws_lambda @aws_subscribe(mutations : ["deleteLinkedAppCollection"])
  onDeleteLinkedAppCustomer(filter: ModelSubscriptionLinkedAppCustomerFilterInput): LinkedAppCustomer @aws_api_key @aws_lambda @aws_subscribe(mutations : ["deleteLinkedAppCustomer"])
  onDeleteLinkedAppMessage(filter: ModelSubscriptionLinkedAppMessageFilterInput): LinkedAppMessage @aws_api_key @aws_lambda @aws_subscribe(mutations : ["deleteLinkedAppMessage"])
  onDeleteMetaCatalogue(filter: ModelSubscriptionMetaCatalogueFilterInput): MetaCatalogue @aws_api_key @aws_lambda @aws_subscribe(mutations : ["deleteMetaCatalogue"])
  onDeleteMissedUtterance(filter: ModelSubscriptionMissedUtteranceFilterInput): MissedUtterance @aws_api_key @aws_lambda @aws_subscribe(mutations : ["deleteMissedUtterance"])
  onDeleteModule(filter: ModelSubscriptionModuleFilterInput): Module @aws_api_key @aws_lambda @aws_subscribe(mutations : ["deleteModule"])
  onDeleteNode(filter: ModelSubscriptionNodeFilterInput): Node @aws_api_key @aws_lambda @aws_subscribe(mutations : ["deleteNode"])
  onDeleteNotification(filter: ModelSubscriptionNotificationFilterInput): Notification @aws_api_key @aws_lambda @aws_subscribe(mutations : ["deleteNotification"])
  onDeleteOrganization(filter: ModelSubscriptionOrganizationFilterInput): Organization @aws_api_key @aws_lambda @aws_subscribe(mutations : ["deleteOrganization"])
  onDeleteOutwardWebhook(filter: ModelSubscriptionOutwardWebhookFilterInput): OutwardWebhook @aws_api_key @aws_lambda @aws_subscribe(mutations : ["deleteOutwardWebhook"])
  onDeletePermission(filter: ModelSubscriptionPermissionFilterInput): Permission @aws_api_key @aws_lambda @aws_subscribe(mutations : ["deletePermission"])
  onDeleteProfile(filter: ModelSubscriptionProfileFilterInput): Profile @aws_api_key @aws_lambda @aws_subscribe(mutations : ["deleteProfile"])
  onDeleteRecurringCampaign(filter: ModelSubscriptionRecurringCampaignFilterInput): RecurringCampaign @aws_api_key @aws_lambda @aws_subscribe(mutations : ["deleteRecurringCampaign"])
  onDeleteRole(filter: ModelSubscriptionRoleFilterInput): Role @aws_api_key @aws_lambda @aws_subscribe(mutations : ["deleteRole"])
  onDeleteSaasTrigger(filter: ModelSubscriptionSaasTriggerFilterInput): SaasTrigger @aws_api_key @aws_lambda @aws_subscribe(mutations : ["deleteSaasTrigger"])
  onDeleteScheduleNode(filter: ModelSubscriptionScheduleNodeFilterInput): ScheduleNode @aws_api_key @aws_lambda @aws_subscribe(mutations : ["deleteScheduleNode"])
  onDeleteSession(filter: ModelSubscriptionSessionFilterInput): Session @aws_api_key @aws_lambda @aws_subscribe(mutations : ["deleteSession"])
  onDeleteTableViews(filter: ModelSubscriptionTableViewsFilterInput): TableViews @aws_api_key @aws_lambda @aws_subscribe(mutations : ["deleteTableViews"])
  onDeleteTemplateEvent(filter: ModelSubscriptionTemplateEventFilterInput): TemplateEvent @aws_api_key @aws_lambda @aws_subscribe(mutations : ["deleteTemplateEvent"])
  onDeleteTemplates(filter: ModelSubscriptionTemplatesFilterInput): Templates @aws_api_key @aws_lambda @aws_subscribe(mutations : ["deleteTemplates"])
  onDeleteTrigger(filter: ModelSubscriptionTriggerFilterInput): Trigger @aws_api_key @aws_lambda @aws_subscribe(mutations : ["deleteTrigger"])
  onDeleteUser(filter: ModelSubscriptionUserFilterInput): User @aws_api_key @aws_lambda @aws_subscribe(mutations : ["deleteUser"])
  onDeleteUtterance(filter: ModelSubscriptionUtteranceFilterInput): Utterance @aws_api_key @aws_lambda @aws_subscribe(mutations : ["deleteUtterance"])
  onDeleteWhatsappFlows(filter: ModelSubscriptionWhatsappFlowsFilterInput): WhatsappFlows @aws_api_key @aws_lambda @aws_subscribe(mutations : ["deleteWhatsappFlows"])
  onDeleteWorkflowStepEvent(filter: ModelSubscriptionWorkflowStepEventFilterInput): WorkflowStepEvent @aws_api_key @aws_lambda @aws_subscribe(mutations : ["deleteWorkflowStepEvent"])
  onDeleteWorkflowSteps(filter: ModelSubscriptionWorkflowStepsFilterInput): WorkflowSteps @aws_api_key @aws_lambda @aws_subscribe(mutations : ["deleteWorkflowSteps"])
  onDeleteWorkflows(filter: ModelSubscriptionWorkflowsFilterInput): Workflows @aws_api_key @aws_lambda @aws_subscribe(mutations : ["deleteWorkflows"])
  onDeleteWorkspace(filter: ModelSubscriptionWorkspaceFilterInput): Workspace @aws_api_key @aws_lambda @aws_subscribe(mutations : ["deleteWorkspace"])
  onHealthTableForUser(enterpriseId: String!, mode: MODE!, userId: ID!): HealthTable @aws_api_key @aws_lambda @aws_subscribe(mutations : ["createHealthTable", "updateHealthTable"])
  onJobForUser(enterpriseId: String!, mode: MODE!, userId: ID!): Job @aws_api_key @aws_lambda @aws_subscribe(mutations : ["createJob", "updateJob"])
  onNotificationForUser(enterpriseId: String!, mode: MODE!, userId: ID!): Notification @aws_api_key @aws_lambda @aws_subscribe(mutations : ["createNotification"])
  onSessionUpdateById(enterpriseId: String!, mode: MODE!, sessionId: ID!): Session @aws_api_key @aws_lambda @aws_subscribe(mutations : ["updateSession"])
  onUpdateAbstractJourneyEvent(filter: ModelSubscriptionAbstractJourneyEventFilterInput): AbstractJourneyEvent @aws_api_key @aws_lambda @aws_subscribe(mutations : ["updateAbstractJourneyEvent"])
  onUpdateAiBrainFileManager(filter: ModelSubscriptionAiBrainFileManagerFilterInput): AiBrainFileManager @aws_api_key @aws_lambda @aws_subscribe(mutations : ["updateAiBrainFileManager"])
  onUpdateAnalyticsDashboard(filter: ModelSubscriptionAnalyticsDashboardFilterInput): AnalyticsDashboard @aws_api_key @aws_lambda @aws_subscribe(mutations : ["updateAnalyticsDashboard"])
  onUpdateApi(filter: ModelSubscriptionApiFilterInput): Api @aws_api_key @aws_lambda @aws_subscribe(mutations : ["updateApi"])
  onUpdateApiGateWay(filter: ModelSubscriptionApiGateWayFilterInput): ApiGateWay @aws_api_key @aws_lambda @aws_subscribe(mutations : ["updateApiGateWay"])
  onUpdateAudienceSegments(filter: ModelSubscriptionAudienceSegmentsFilterInput): AudienceSegments @aws_api_key @aws_lambda @aws_subscribe(mutations : ["updateAudienceSegments"])
  onUpdateBroadcast(filter: ModelSubscriptionBroadcastFilterInput): Broadcast @aws_api_key @aws_lambda @aws_subscribe(mutations : ["updateBroadcast"])
  onUpdateBroadcastMessage(filter: ModelSubscriptionBroadcastMessageFilterInput): BroadcastMessage @aws_api_key @aws_lambda @aws_subscribe(mutations : ["updateBroadcastMessage"])
  onUpdateCampaign(filter: ModelSubscriptionCampaignFilterInput): Campaign @aws_api_key @aws_lambda @aws_subscribe(mutations : ["updateCampaign"])
  onUpdateCampaignApprover(filter: ModelSubscriptionCampaignApproverFilterInput): CampaignApprover @aws_api_key @aws_lambda @aws_subscribe(mutations : ["updateCampaignApprover"])
  onUpdateCampaignAuditTrail(filter: ModelSubscriptionCampaignAuditTrailFilterInput): CampaignAuditTrail @aws_api_key @aws_lambda @aws_subscribe(mutations : ["updateCampaignAuditTrail"])
  onUpdateCampaignContactGroup(filter: ModelSubscriptionCampaignContactGroupFilterInput): CampaignContactGroup @aws_api_key @aws_lambda @aws_subscribe(mutations : ["updateCampaignContactGroup"])
  onUpdateCampaignMessage(filter: ModelSubscriptionCampaignMessageFilterInput): CampaignMessage @aws_api_key @aws_lambda @aws_subscribe(mutations : ["updateCampaignMessage"])
  onUpdateCatalogue(filter: ModelSubscriptionCatalogueFilterInput): Catalogue @aws_api_key @aws_lambda @aws_subscribe(mutations : ["updateCatalogue"])
  onUpdateCloudFunctions(filter: ModelSubscriptionCloudFunctionsFilterInput): CloudFunctions @aws_api_key @aws_lambda @aws_subscribe(mutations : ["updateCloudFunctions"])
  onUpdateCollection(filter: ModelSubscriptionCollectionFilterInput): Collection @aws_api_key @aws_lambda @aws_subscribe(mutations : ["updateCollection"])
  onUpdateCollectionCatalogue(filter: ModelSubscriptionCollectionCatalogueFilterInput): CollectionCatalogue @aws_api_key @aws_lambda @aws_subscribe(mutations : ["updateCollectionCatalogue"])
  onUpdateContactGroup(filter: ModelSubscriptionContactGroupFilterInput): ContactGroup @aws_api_key @aws_lambda @aws_subscribe(mutations : ["updateContactGroup"])
  onUpdateConversation(filter: ModelSubscriptionConversationFilterInput): Conversation @aws_api_key @aws_lambda @aws_subscribe(mutations : ["updateConversation"])
  onUpdateConversationInfo(filter: ModelSubscriptionConversationInfoFilterInput): ConversationInfo @aws_api_key @aws_lambda @aws_subscribe(mutations : ["updateConversationInfo"])
  onUpdateCustomer(filter: ModelSubscriptionCustomerFilterInput): Customer @aws_api_key @aws_lambda @aws_subscribe(mutations : ["updateCustomer"])
  onUpdateCustomerContactGroup(filter: ModelSubscriptionCustomerContactGroupFilterInput): CustomerContactGroup @aws_api_key @aws_lambda @aws_subscribe(mutations : ["updateCustomerContactGroup"])
  onUpdateDatabaseSchema(filter: ModelSubscriptionDatabaseSchemaFilterInput): DatabaseSchema @aws_api_key @aws_lambda @aws_subscribe(mutations : ["updateDatabaseSchema"])
  onUpdateDatabaseValues(filter: ModelSubscriptionDatabaseValuesFilterInput): DatabaseValues @aws_api_key @aws_lambda @aws_subscribe(mutations : ["updateDatabaseValues"])
  onUpdateEnterprise(filter: ModelSubscriptionEnterpriseFilterInput): Enterprise @aws_api_key @aws_lambda @aws_subscribe(mutations : ["updateEnterprise"])
  onUpdateEntity(filter: ModelSubscriptionEntityFilterInput): Entity @aws_api_key @aws_lambda @aws_subscribe(mutations : ["updateEntity"])
  onUpdateEventLabel(filter: ModelSubscriptionEventLabelFilterInput): EventLabel @aws_api_key @aws_lambda @aws_subscribe(mutations : ["updateEventLabel"])
  onUpdateFileManagerFiles(filter: ModelSubscriptionFileManagerFilesFilterInput): FileManagerFiles @aws_api_key @aws_lambda @aws_subscribe(mutations : ["updateFileManagerFiles"])
  onUpdateFlow(filter: ModelSubscriptionFlowFilterInput): Flow @aws_api_key @aws_lambda @aws_subscribe(mutations : ["updateFlow"])
  onUpdateFlowTemplate(filter: ModelSubscriptionFlowTemplateFilterInput): FlowTemplate @aws_api_key @aws_lambda @aws_subscribe(mutations : ["updateFlowTemplate"])
  onUpdateHealthTable(filter: ModelSubscriptionHealthTableFilterInput): HealthTable @aws_api_key @aws_lambda @aws_subscribe(mutations : ["updateHealthTable"])
  onUpdateIntegration(filter: ModelSubscriptionIntegrationFilterInput): Integration @aws_api_key @aws_lambda @aws_subscribe(mutations : ["updateIntegration"])
  onUpdateIntent(filter: ModelSubscriptionIntentFilterInput): Intent @aws_api_key @aws_lambda @aws_subscribe(mutations : ["updateIntent"])
  onUpdateIntentEvent(filter: ModelSubscriptionIntentEventFilterInput): IntentEvent @aws_api_key @aws_lambda @aws_subscribe(mutations : ["updateIntentEvent"])
  onUpdateInteraction(filter: ModelSubscriptionInteractionFilterInput): Interaction @aws_api_key @aws_lambda @aws_subscribe(mutations : ["updateInteraction"])
  onUpdateInteractionEvent(filter: ModelSubscriptionInteractionEventFilterInput): InteractionEvent @aws_api_key @aws_lambda @aws_subscribe(mutations : ["updateInteractionEvent"])
  onUpdateJob(filter: ModelSubscriptionJobFilterInput): Job @aws_api_key @aws_lambda @aws_subscribe(mutations : ["updateJob"])
  onUpdateLinkedApp(filter: ModelSubscriptionLinkedAppFilterInput): LinkedApp @aws_api_key @aws_lambda @aws_subscribe(mutations : ["updateLinkedApp"])
  onUpdateLinkedAppCatalogue(filter: ModelSubscriptionLinkedAppCatalogueFilterInput): LinkedAppCatalogue @aws_api_key @aws_lambda @aws_subscribe(mutations : ["updateLinkedAppCatalogue"])
  onUpdateLinkedAppCollection(filter: ModelSubscriptionLinkedAppCollectionFilterInput): LinkedAppCollection @aws_api_key @aws_lambda @aws_subscribe(mutations : ["updateLinkedAppCollection"])
  onUpdateLinkedAppCustomer(filter: ModelSubscriptionLinkedAppCustomerFilterInput): LinkedAppCustomer @aws_api_key @aws_lambda @aws_subscribe(mutations : ["updateLinkedAppCustomer"])
  onUpdateLinkedAppMessage(filter: ModelSubscriptionLinkedAppMessageFilterInput): LinkedAppMessage @aws_api_key @aws_lambda @aws_subscribe(mutations : ["updateLinkedAppMessage"])
  onUpdateMetaCatalogue(filter: ModelSubscriptionMetaCatalogueFilterInput): MetaCatalogue @aws_api_key @aws_lambda @aws_subscribe(mutations : ["updateMetaCatalogue"])
  onUpdateMissedUtterance(filter: ModelSubscriptionMissedUtteranceFilterInput): MissedUtterance @aws_api_key @aws_lambda @aws_subscribe(mutations : ["updateMissedUtterance"])
  onUpdateModule(filter: ModelSubscriptionModuleFilterInput): Module @aws_api_key @aws_lambda @aws_subscribe(mutations : ["updateModule"])
  onUpdateNode(filter: ModelSubscriptionNodeFilterInput): Node @aws_api_key @aws_lambda @aws_subscribe(mutations : ["updateNode"])
  onUpdateNotification(filter: ModelSubscriptionNotificationFilterInput): Notification @aws_api_key @aws_lambda @aws_subscribe(mutations : ["updateNotification"])
  onUpdateOrganization(filter: ModelSubscriptionOrganizationFilterInput): Organization @aws_api_key @aws_lambda @aws_subscribe(mutations : ["updateOrganization"])
  onUpdateOutwardWebhook(filter: ModelSubscriptionOutwardWebhookFilterInput): OutwardWebhook @aws_api_key @aws_lambda @aws_subscribe(mutations : ["updateOutwardWebhook"])
  onUpdatePermission(filter: ModelSubscriptionPermissionFilterInput): Permission @aws_api_key @aws_lambda @aws_subscribe(mutations : ["updatePermission"])
  onUpdateProfile(filter: ModelSubscriptionProfileFilterInput): Profile @aws_api_key @aws_lambda @aws_subscribe(mutations : ["updateProfile"])
  onUpdateRecurringCampaign(filter: ModelSubscriptionRecurringCampaignFilterInput): RecurringCampaign @aws_api_key @aws_lambda @aws_subscribe(mutations : ["updateRecurringCampaign"])
  onUpdateRole(filter: ModelSubscriptionRoleFilterInput): Role @aws_api_key @aws_lambda @aws_subscribe(mutations : ["updateRole"])
  onUpdateSaasTrigger(filter: ModelSubscriptionSaasTriggerFilterInput): SaasTrigger @aws_api_key @aws_lambda @aws_subscribe(mutations : ["updateSaasTrigger"])
  onUpdateScheduleNode(filter: ModelSubscriptionScheduleNodeFilterInput): ScheduleNode @aws_api_key @aws_lambda @aws_subscribe(mutations : ["updateScheduleNode"])
  onUpdateSession(filter: ModelSubscriptionSessionFilterInput): Session @aws_api_key @aws_lambda @aws_subscribe(mutations : ["updateSession"])
  onUpdateTableViews(filter: ModelSubscriptionTableViewsFilterInput): TableViews @aws_api_key @aws_lambda @aws_subscribe(mutations : ["updateTableViews"])
  onUpdateTemplateEvent(filter: ModelSubscriptionTemplateEventFilterInput): TemplateEvent @aws_api_key @aws_lambda @aws_subscribe(mutations : ["updateTemplateEvent"])
  onUpdateTemplates(filter: ModelSubscriptionTemplatesFilterInput): Templates @aws_api_key @aws_lambda @aws_subscribe(mutations : ["updateTemplates"])
  onUpdateTrigger(filter: ModelSubscriptionTriggerFilterInput): Trigger @aws_api_key @aws_lambda @aws_subscribe(mutations : ["updateTrigger"])
  onUpdateUser(filter: ModelSubscriptionUserFilterInput): User @aws_api_key @aws_lambda @aws_subscribe(mutations : ["updateUser"])
  onUpdateUtterance(filter: ModelSubscriptionUtteranceFilterInput): Utterance @aws_api_key @aws_lambda @aws_subscribe(mutations : ["updateUtterance"])
  onUpdateWhatsappFlows(filter: ModelSubscriptionWhatsappFlowsFilterInput): WhatsappFlows @aws_api_key @aws_lambda @aws_subscribe(mutations : ["updateWhatsappFlows"])
  onUpdateWorkflowStepEvent(filter: ModelSubscriptionWorkflowStepEventFilterInput): WorkflowStepEvent @aws_api_key @aws_lambda @aws_subscribe(mutations : ["updateWorkflowStepEvent"])
  onUpdateWorkflowSteps(filter: ModelSubscriptionWorkflowStepsFilterInput): WorkflowSteps @aws_api_key @aws_lambda @aws_subscribe(mutations : ["updateWorkflowSteps"])
  onUpdateWorkflows(filter: ModelSubscriptionWorkflowsFilterInput): Workflows @aws_api_key @aws_lambda @aws_subscribe(mutations : ["updateWorkflows"])
  onUpdateWorkspace(filter: ModelSubscriptionWorkspaceFilterInput): Workspace @aws_api_key @aws_lambda @aws_subscribe(mutations : ["updateWorkspace"])
  onWorkspaceActive(enterpriseId: String!, mode: MODE!, workspaceId: String!): Workspace @aws_api_key @aws_lambda @aws_subscribe(mutations : ["updateWorkspace"])
}

type SuggestedIntentPayload {
  suggestionArr: [String]!
}

type TableViews @aws_api_key @aws_lambda {
  createdAt: AWSDateTime!
  databaseKey: String
  enterpriseId: ID!
  mode: MODE!
  name: String!
  tableViewsId: ID!
  type: TableType!
  updatedAt: AWSDateTime
  viewConfig: AWSJSON!
}

type TemplateEvent @aws_api_key @aws_lambda {
  businessGoal: String
  createdAt: AWSDateTime
  description: String
  endTime: AWSDateTime
  enterpriseId: ID!
  includeIntents: Boolean!
  industry: String
  mode: MODE!
  name: String
  sharingMode: String
  sourceEnterpriseId: ID
  startTime: AWSDateTime
  templateEventId: ID!
  templateType: String
  updatedAt: AWSDateTime
  useCase: String
  workspaceId: ID!
}

type Templates @aws_api_key @aws_lambda {
  category: TemplateCategory!
  channel: CHANNEL!
  config: AWSJSON
  createdAt: AWSDateTime!
  enterpriseId: ID!
  integration: Integration
  integrationId: ID
  language: String!
  mode: MODE!
  namespaceId: String
  node: Node
  nodeId: ID
  phoneNo: String
  reSubmit: Boolean
  status: WA_TEMPLATE_STATUS!
  statusMessage: String
  templateId: String
  templatesId: ID!
  title: String!
  updatedAt: AWSDateTime
}

type Trigger @aws_api_key @aws_lambda {
  createdAt: AWSDateTime!
  enterpriseId: ID!
  mode: MODE!
  name: String!
  node: Node
  nodeId: ID
  triggerId: ID!
  updatedAt: AWSDateTime!
  workspace: Workspace
  workspaceId: ID!
}

type User @aws_api_key @aws_lambda {
  active: Boolean!
  availability: AVAILABILITY!
  avatarUrl: String
  browserToken: String
  clerkUserId: String
  createdAt: AWSDateTime!
  email: String!
  enterpriseId: ID!
  inviterUserIdClerk: String
  isLoggedIn: Boolean
  job(filter: ModelJobFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelJobConnection
  lName: String
  lastSignIn: AWSDateTime
  name: String
  notification(filter: ModelNotificationFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelNotificationConnection
  notificationConfig: AWSJSON
  phoneNumber: String
  profileDetails: AWSJSON
  role: Role
  roleId: ID
  session(filter: ModelSessionFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelSessionConnection
  updatedAt: AWSDateTime!
  userId: ID!
}

type Utterance @aws_api_key @aws_lambda {
  createdAt: AWSDateTime!
  enterpriseId: ID!
  intent: Intent!
  intentId: ID!
  isPaid: Boolean
  mode: MODE!
  sourceName: String
  updatedAt: AWSDateTime!
  utterance: String!
  utteranceId: ID!
}

type WhatsappFlows @aws_api_key @aws_lambda {
  config: AWSJSON
  createdAt: AWSDateTime!
  enterpriseId: ID!
  integration: Integration
  integrationId: ID!
  mode: MODE!
  name: String!
  status: WA_FLOW_STATUS!
  updatedAt: AWSDateTime!
  whatsappFlowId: ID!
}

type WorkflowStepEvent @aws_api_key @aws_lambda {
  campaignId: ID
  createdAt: AWSDateTime
  customerId: ID!
  endTime: AWSDateTime
  enterpriseId: ID!
  eventToBeTracked: String
  flowId: ID
  id: ID!
  mode: MODE!
  startTime: AWSDateTime
  stepId: ID!
  updatedAt: AWSDateTime
  workflowId: ID!
}

type WorkflowSteps @aws_api_key @aws_lambda {
  campaign: Campaign
  campaignId: ID
  conditionalNextSteps: AWSJSON
  createdAt: AWSDateTime
  enterpriseId: ID!
  flow: Flow
  flowId: ID
  integration: Integration
  integrationId: ID
  mode: MODE!
  nextStepId: ID
  previousStepId: ID
  status: WorkflowStatus!
  stepConfig: AWSJSON
  stepDetails: AWSJSON
  stepId: ID!
  stepType: StepType
  updatedAt: AWSDateTime
  workflow: Workflows!
  workflowId: ID!
}

type Workflows @aws_api_key @aws_lambda {
  config: AWSJSON
  createdAt: AWSDateTime!
  currentStep: WorkflowSteps
  currentStepId: ID
  enterpriseId: ID!
  mode: MODE!
  startingCampaign: Campaign
  startingCampaignId: ID
  startingFlow: Flow
  startingFlowId: ID
  status: WorkflowStatus!
  updatedAt: AWSDateTime!
  workflowId: ID!
  workflowName: String
  workflowSteps(filter: ModelWorkflowStepsFilterInput, limit: Int, modeWorkflowId: ModelWorkflowStepsStepsByWorkflowCompositeKeyConditionInput, nextToken: String, sortDirection: ModelSortDirection): ModelWorkflowStepsConnection
}

type Workspace @aws_api_key @aws_lambda {
  active: Boolean
  apiGateWay(filter: ModelApiGateWayFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelApiGateWayConnection
  apis(filter: ModelApiFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelApiConnection
  botAliasId: String
  botDraftId: String
  botFailureReason: [String]
  botId: String
  botLastUpdated: AWSDateTime
  botStatus: BotStatus
  cloudFunctions(filter: ModelCloudFunctionsFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelCloudFunctionsConnection
  createdAt: AWSDateTime!
  databaseSchema(filter: ModelDatabaseSchemaFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelDatabaseSchemaConnection
  defaultLanguage: String
  defaultTables: [String]
  designConfig: AWSJSON
  enterpriseId: ID!
  entity(filter: ModelEntityFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelEntityConnection
  fileManagerFiles(filter: ModelFileManagerFilesFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelFileManagerFilesConnection
  flow(filter: ModelFlowFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelFlowConnection
  flowTemplate: FlowTemplate
  integration(filter: ModelIntegrationFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelIntegrationConnection
  intent(filter: ModelIntentFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelIntentConnection
  isImported: Boolean
  language: [String]
  missedUtterance(filter: ModelMissedUtteranceFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelMissedUtteranceConnection
  mode: MODE!
  name: String!
  outwardWebhook(filter: ModelOutwardWebhookFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelOutwardWebhookConnection
  publishConfig: AWSJSON
  publishLastUpdated: AWSDateTime
  saasTrigger(filter: ModelSaasTriggerFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelSaasTriggerConnection
  sessionTimeout: AWSJSON
  timeZone: String
  tools: AWSJSON
  trigger(filter: ModelTriggerFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelTriggerConnection
  unSupportedMessages: AWSJSON
  updatedAt: AWSDateTime!
  variables: AWSJSON
  workspaceId: ID!
  workspaceLastPublished: AWSDateTime
}

enum ASSIGNMENT {
  ACTION
  AGENT
  BOT
  CUSTOMER
  EVENT
  FEDERATED_LIVE
  LINKED_APP
  NOTE
}

enum AVAILABILITY {
  AVAILABLE
  AWAY
  BUSY
  OFFLINE
}

enum BotStatus {
  FAILURE
  SUCCESS
  TRAINING
}

enum BroadcastMessageStatus {
  ABORTED
  ACTIVE
  DELIVERED
  ERROR
  PAUSED
  READ
  RESPONDED
  SCHEDULED
  SENT
}

enum BroadcastStatus {
  ABORTED
  ACTIVE
  COMPLETED
  PAUSED
  SCHEDULED
}

enum CATEGORY {
  ANALYTICS
  BUILDER
  CAMPAIGN_MANAGER
  CONVERSATIONS
  CUSTOMER_HUB
  DASHBOARD
  JOB
  LINKED_APP
  OBA
  SYSTEM
}

enum CHANNEL {
  FACEBOOK
  GBM
  INSTAGRAM
  WEB
  WHATSAPP
}

enum CampaignMessageStatus {
  ABORTED
  ACTIVE
  DELIVERED
  ERROR
  PAUSED
  READ
  RESPONDED
  RETRY
  SCHEDULED
  SENT
}

enum CampaignStatus {
  ABORTED
  ACTIVE
  APPROVED
  COMPLETED
  DRAFT
  IN_REVIEW
  PAUSED
  REJECTED
  SCHEDULED
}

enum ERROR_TYPE {
  APPLICATION
  FEDERATED_AND_LINKED_APPS
  INFRASTRUCTURE
  WHATSAPP_CLOUD_API
}

enum EventLabelType {
  BUSINESS_GOAL
  DATA_POINT
  QUESTION
}

enum FEDERATED_ROLE {
  AGENT
  USER
}

enum HEALTH_STATUS {
  CLOSED
  OPEN
}

enum ImportExportType {
  ABSTRACT_INTENT
  ABSTRACT_INTERACTION
  ABSTRACT_JOURNEY
  INTERACTION
  JOURNEY
  WORKSPACE
}

enum JobStatus {
  ABORTED
  FAILED
  IN_PROGRESS
  SUCCESS
}

enum JobType {
  BULK_UPLOAD
  CAMPAIGNS
  CAMPAIGN_RESPONSE_SYNC
  CONTACTS
  CONTACT_LIST
  DELETE_CONTACTS
  DYNAMICS_CONTACT
  DYNAMICS_CONTACT_LIST
  FLOWS
  LINKED_APP_CONTACT_LIST
}

enum LEX_BUILD {
  BUILD
  PUBLISH
  UTTERANCES
}

enum Languages {
  Arabic
  English
  French
  German
  Hindi
  Italian
  Portuguese
  Spanish
}

enum LinkedAppStatus {
  ACTIVE
  DISCONNECTED
  INACTIVE
  INVITED
  REINVITE
  SYNCHRONIZING
}

enum MODE {
  LIVE
  TEST
}

enum ModelAttributeTypes {
  _null
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
}

enum ModelSortDirection {
  ASC
  DESC
}

enum Operation {
  ABSTRACT
  DUPLICATE
  EXPORT
  IMPORT
  PUBLISH
  PUBLISH_PREVIEW
}

enum OperationType {
  FILE
  TEMPLATE
}

enum PlatformModels {
  CAMPAIGN_JOURNEY
  INBOUND_JOURNEY
}

enum Publish {
  PRIVATE
  PUBLIC
}

enum ResponseSyncStatus {
  FAILED
  PENDING
  SUCCESS
}

enum SAAS {
  GOOGLE_CALENDAR
  GOOGLE_SHEETS
  HUBSPOT
  ICAL
  MAGENTO
  MS_DYNAMICS_CRM
  SALESFORCE
  SHOPIFY
  WHATSAPP
  WOOCOMMERCE
}

enum SESSION_INITIATED_BY {
  AGENT
  AI
  CAMPAIGN
  CUSTOMER
  SAAS_TRIGGER
  WEBHOOK
}

enum ScheduleNodeStatus {
  EXECUTED
  PENDING
}

enum SearchableAggregateType {
  avg
  max
  min
  sum
  terms
}

enum SearchableBroadcastAggregateField {
  advancedConfig
  asset
  broadcastId
  catalogItems
  createdAt
  enterpriseId
  isCatalogue
  message
  mode
  name
  scheduleTime
  senderReceiver
  status
  updatedAt
}

enum SearchableBroadcastMessageAggregateField {
  broadcastId
  broadcastMessageId
  catalogItems
  createdAt
  customerId
  enterpriseId
  isCatalogue
  linkedAppId
  meta
  mode
  scheduleTime
  status
  timeToRespond
  updatedAt
  waMessageId
}

enum SearchableBroadcastMessageSortableFields {
  broadcastId
  broadcastMessageId
  catalogItems
  createdAt
  customerId
  enterpriseId
  isCatalogue
  linkedAppId
  meta
  scheduleTime
  timeToRespond
  updatedAt
  waMessageId
}

enum SearchableBroadcastSortableFields {
  advancedConfig
  asset
  broadcastId
  catalogItems
  createdAt
  enterpriseId
  isCatalogue
  message
  name
  scheduleTime
  senderReceiver
  updatedAt
}

enum SearchableCampaignApproverAggregateField {
  approverId
  campaignId
  createdAt
  enterpriseId
  mode
  number
  updatedAt
}

enum SearchableCampaignApproverSortableFields {
  approverId
  campaignId
  createdAt
  enterpriseId
  number
  updatedAt
}

enum SearchableCampaignAuditTrailAggregateField {
  approverId
  auditTrailId
  campaignId
  createdAt
  enterpriseId
  mode
  note
  senderId
  status
  updatedAt
}

enum SearchableCampaignAuditTrailSortableFields {
  approverId
  auditTrailId
  campaignId
  createdAt
  enterpriseId
  note
  senderId
  updatedAt
}

enum SearchableCampaignMessageAggregateField {
  campaignId
  campaignMessageId
  channel
  createdAt
  customerId
  enterpriseId
  isForApproval
  meta
  mode
  retryCount
  scheduleTime
  sessionId
  status
  timeToRespond
  updatedAt
}

enum SearchableCampaignMessageSortableFields {
  campaignId
  campaignMessageId
  createdAt
  customerId
  enterpriseId
  isForApproval
  meta
  retryCount
  scheduleTime
  sessionId
  timeToRespond
  updatedAt
}

enum SearchableCatalogueAggregateField {
  catalogueId
  countryOfOrigin
  createdAt
  description
  enterpriseId
  hide
  images
  integrationId
  itemCode
  link
  metaCatalogueId
  mode
  name
  otherAttributes
  price
  retailerId
  updatedAt
}

enum SearchableCatalogueSortableFields {
  catalogueId
  countryOfOrigin
  createdAt
  description
  enterpriseId
  hide
  images
  integrationId
  itemCode
  link
  metaCatalogueId
  name
  otherAttributes
  price
  retailerId
  updatedAt
}

enum SearchableCollectionAggregateField {
  collectionId
  createdAt
  enterpriseId
  metaCatalogueId
  mode
  status
  title
  updatedAt
}

enum SearchableCollectionCatalogueAggregateField {
  catalogueId
  collectionId
  createdAt
  enterpriseId
  mode
  updatedAt
}

enum SearchableCollectionCatalogueSortableFields {
  catalogueId
  collectionId
  createdAt
  enterpriseId
  updatedAt
}

enum SearchableCollectionSortableFields {
  collectionId
  createdAt
  enterpriseId
  metaCatalogueId
  status
  title
  updatedAt
}

enum SearchableContactGroupAggregateField {
  contactGroupId
  contactListSource
  createdAt
  dynamic
  enterpriseId
  linkedAppId
  mode
  name
  updatedAt
}

enum SearchableContactGroupSortableFields {
  contactGroupId
  contactListSource
  createdAt
  dynamic
  enterpriseId
  linkedAppId
  name
  updatedAt
}

enum SearchableCustomerAggregateField {
  blacklistReason
  blacklisted
  blacklistedAt
  createdAt
  customerId
  email
  enterpriseId
  firstName
  lastName
  mode
  name
  parent
  parentId
  tags
  updatedAt
  variables
}

enum SearchableCustomerContactGroupAggregateField {
  blacklisted
  contactGroupId
  createdAt
  customerId
  enterpriseId
  mode
  updatedAt
}

enum SearchableCustomerContactGroupSortableFields {
  blacklisted
  contactGroupId
  createdAt
  customerId
  enterpriseId
  updatedAt
}

enum SearchableCustomerSortableFields {
  blacklistReason
  blacklisted
  blacklistedAt
  createdAt
  customerId
  email
  enterpriseId
  firstName
  lastName
  name
  parentId
  tags
  updatedAt
  variables
}

enum SearchableDatabaseValuesAggregateField {
  createdAt
  databaseSchemaId
  databaseValuesId
  enterpriseId
  mode
  updatedAt
  value
}

enum SearchableDatabaseValuesSortableFields {
  createdAt
  databaseSchemaId
  databaseValuesId
  enterpriseId
  updatedAt
  value
}

enum SearchableEventLabelAggregateField {
  campaignId
  conversationId
  createdAt
  customerId
  enterpriseId
  flowId
  interactionId
  label
  labelId
  mode
  nodeId
  previousLabel
  previousValue
  sessionId
  type
  updatedAt
  value
  workspaceId
}

enum SearchableEventLabelSortableFields {
  campaignId
  conversationId
  createdAt
  customerId
  enterpriseId
  flowId
  interactionId
  label
  labelId
  nodeId
  previousLabel
  previousValue
  sessionId
  updatedAt
  value
  workspaceId
}

enum SearchableHealthTableAggregateField {
  channel
  checkFlag
  config
  count
  createdAt
  description
  enterpriseId
  functionOrigin
  healthTableId
  link
  mode
  nodeId
  read
  status
  subType
  title
  type
  updatedAt
  userId
}

enum SearchableHealthTableSortableFields {
  checkFlag
  config
  count
  createdAt
  description
  enterpriseId
  functionOrigin
  healthTableId
  link
  nodeId
  read
  subType
  title
  updatedAt
  userId
}

enum SearchableIntentAggregateField {
  createdAt
  enterpriseId
  intentId
  language
  lexIntentId
  mode
  name
  nodeId
  slots
  updatedAt
  utterance
  workspaceId
}

enum SearchableIntentSortableFields {
  createdAt
  enterpriseId
  intentId
  language
  lexIntentId
  name
  nodeId
  slots
  updatedAt
  utterance
  workspaceId
}

enum SearchableLinkedAppCatalogueAggregateField {
  catalogueId
  createdAt
  enterpriseId
  hide
  linkedAppId
  mode
  status
  updatedAt
  waLinkedAppCatalogueId
}

enum SearchableLinkedAppCatalogueSortableFields {
  catalogueId
  createdAt
  enterpriseId
  hide
  linkedAppId
  status
  updatedAt
  waLinkedAppCatalogueId
}

enum SearchableLinkedAppCollectionAggregateField {
  collectionId
  createdAt
  enterpriseId
  linkedAppId
  mode
  status
  updatedAt
  waLinkedAppCollectionId
}

enum SearchableLinkedAppCollectionSortableFields {
  collectionId
  createdAt
  enterpriseId
  linkedAppId
  status
  updatedAt
  waLinkedAppCollectionId
}

enum SearchableLinkedAppMessageAggregateField {
  createdAt
  customerId
  enterpriseId
  linkedAppId
  message
  mode
  updatedAt
  waMessageId
}

enum SearchableLinkedAppMessageSortableFields {
  createdAt
  customerId
  enterpriseId
  linkedAppId
  message
  updatedAt
  waMessageId
}

enum SearchableMissedUtteranceAggregateField {
  channel
  confidence
  createdAt
  enterpriseId
  language
  missedUtteranceId
  mode
  nodeId
  updatedAt
  utterance
  workspaceId
}

enum SearchableMissedUtteranceSortableFields {
  confidence
  createdAt
  enterpriseId
  language
  missedUtteranceId
  nodeId
  updatedAt
  utterance
  workspaceId
}

enum SearchableSessionAggregateField {
  active
  agentId
  assignment
  campaignMessageId
  channel
  createdAt
  currentNodeId
  customerId
  enterpriseId
  federatedLiveToCustomerId
  federatedRole
  flowId
  healthTableId
  initiatedBy
  integrationId
  language
  metaConversationId
  mode
  nextNodeId
  nodeId
  preview
  referrer
  referrerType
  sessionId
  tags
  updatedAt
  validationCount
  variables
  workspaceId
}

enum SearchableSessionSortableFields {
  active
  agentId
  campaignMessageId
  createdAt
  currentNodeId
  customerId
  enterpriseId
  federatedLiveToCustomerId
  flowId
  healthTableId
  integrationId
  language
  metaConversationId
  nextNodeId
  nodeId
  preview
  referrer
  referrerType
  sessionId
  tags
  updatedAt
  validationCount
  variables
  workspaceId
}

enum SearchableSortDirection {
  asc
  desc
}

enum SearchableUtteranceAggregateField {
  createdAt
  enterpriseId
  intentId
  isPaid
  mode
  sourceName
  updatedAt
  utterance
  utteranceId
}

enum SearchableUtteranceSortableFields {
  createdAt
  enterpriseId
  intentId
  isPaid
  sourceName
  updatedAt
  utterance
  utteranceId
}

enum StepType {
  AUDIENCE_SEGMENTATION
  CONDITION_SPLIT
  INBOUND_JOURNEY
  SEND_CAMPAIGN
  TIME_DELAY
}

enum TableType {
  CAMPAIGNS
  CAMPAIGN_MESSAGES
  CATALOGUES
  COLLECTIONS
  CONTACTS
  CUSTOMER_HUB
  DATABASE
  LINKED_APPS
  LINKED_APP_CAMPAIGNS
  LINKED_APP_CATALOGUES
  LINKED_APP_COLLECTIONS
}

enum TemplateCategory {
  AUTHENTICATION
  MARKETING
  UTILITY
}

enum TemplateTypes {
  AUTHENTICATION
  CAROUSEL
  CATALOG
  COUPON
  LTO
  MARKETING
  MPM
  UTILITY
}

enum WA_FLOW_STATUS {
  BLOCKED
  DEPRECATED
  DRAFT
  PUBLISHED
  THROTTLED
}

enum WA_TEMPLATE_STATUS {
  APPROVED
  DISABLED
  IN_REVIEW
  PAUSED
  PENDING
  REJECTED
}

enum WorkflowStatus {
  COMPLETED
  FAILED
  IN_PROGRESS
  PLANNED
}

input CampaignResponseInput {
  campaignId: ID!
  enterpriseId: ID!
  integrationId: ID!
  mode: MODE!
  regardingObjectIdValue: String
}

input CampaignSyncInput {
  activityId: String
  contactListSource: String
  enterpriseId: ID!
  integrationId: ID!
  isCampaigns: Boolean!
  mode: MODE!
  userId: String
}

input CheckIntentNameInput {
  enterpriseId: ID!
  mode: MODE!
  name: String!
  workspaceId: ID!
}

input CreateAbstractJourneyEventInput {
  businessGoal: String
  createdAt: AWSDateTime
  description: String
  endTime: AWSDateTime
  enterpriseId: ID!
  flowId: ID!
  includeIntents: Boolean!
  industry: String
  journeyNameLibrary: String
  mode: MODE!
  sharingMode: String
  sourceEnterpriseId: ID
  startTime: AWSDateTime
  updatedAt: AWSDateTime
  useCase: String
  workspaceId: ID!
}

input CreateAiBrainFileManagerInput {
  aiEnabled: Boolean
  enterpriseId: ID!
  fileId: ID!
  mode: MODE!
  name: String
  type: String
  url: String
  usage: String
}

input CreateAnalyticsDashboardInput {
  analyticsDashboardId: ID!
  config: AWSJSON
  enterpriseId: ID!
  mode: MODE!
  name: String!
}

input CreateApiGateWayInput {
  enterpriseId: ID!
  flow: String
  interaction: String
  mode: MODE!
  name: String!
  nodeId: String
  payload: AWSJSON
  variable: String!
  workspaceId: ID!
}

input CreateApiInput {
  apiId: ID!
  config: AWSJSON
  enterpriseId: ID!
  mode: MODE!
  name: String!
  workspaceId: ID!
}

input CreateAudienceSegmentsInput {
  createdAt: AWSDateTime
  enterpriseId: ID!
  mode: MODE!
  segmentConfig: AWSJSON
  segmentId: ID!
  segmentName: String
  updatedAt: AWSDateTime
}

input CreateBroadcastInput {
  advancedConfig: AWSJSON
  asset: String
  broadcastId: ID!
  catalogItems: AWSJSON
  enterpriseId: ID!
  isCatalogue: Boolean
  message: String!
  mode: MODE!
  name: String!
  scheduleTime: AWSDateTime!
  senderReceiver: AWSJSON
  status: BroadcastStatus!
}

input CreateBroadcastMessageInput {
  broadcastId: ID!
  broadcastMessageId: ID!
  catalogItems: AWSJSON
  customerId: ID!
  enterpriseId: ID!
  isCatalogue: Boolean
  linkedAppId: ID!
  meta: AWSJSON
  mode: MODE!
  scheduleTime: AWSDateTime!
  status: BroadcastMessageStatus!
  timeToRespond: Int
  waMessageId: ID
}

input CreateCampaignApproverInput {
  approverId: ID!
  campaignId: ID!
  enterpriseId: ID!
  mode: MODE!
  number: String!
}

input CreateCampaignAuditTrailInput {
  approverId: ID!
  auditTrailId: ID!
  campaignId: ID!
  enterpriseId: ID!
  mode: MODE!
  note: String
  senderId: ID
  status: CampaignStatus!
}

input CreateCampaignContactGroupInput {
  campaignId: ID!
  contactGroupId: ID!
  enterpriseId: ID!
  mode: MODE!
}

input CreateCampaignInput {
  advancedConfig: AWSJSON
  averageOrderValue: String
  campaignId: ID!
  createdById: ID
  enterpriseId: ID!
  flowId: ID!
  integrationId: ID
  isHidden: Boolean
  language: String
  lastResponseSyncTime: AWSDateTime
  marketingCost: String
  mode: MODE!
  name: String!
  recurringCampaignId: ID
  responseSyncStatus: ResponseSyncStatus
  scheduleTime: AWSDateTime!
  segment: String
  status: CampaignStatus!
  type: String!
  variables: AWSJSON
  workflowId: ID
  workflowStepsId: ID
}

input CreateCampaignMessageInput {
  campaignId: ID!
  campaignMessageId: ID!
  channel: CHANNEL!
  createdAt: AWSDateTime
  customerId: ID!
  enterpriseId: ID!
  isForApproval: Boolean
  meta: AWSJSON
  mode: MODE!
  retryCount: Int
  scheduleTime: AWSDateTime!
  sessionId: ID
  status: CampaignMessageStatus!
  timeToRespond: Int
  updatedAt: AWSDateTime
}

input CreateCatalogueInput {
  catalogueId: ID!
  countryOfOrigin: String!
  description: String
  enterpriseId: ID!
  hide: Boolean
  images: [String]
  integrationId: ID
  itemCode: String
  link: String
  metaCatalogueId: ID
  mode: MODE!
  name: String!
  otherAttributes: AWSJSON
  price: String
  retailerId: String
  updatedAt: AWSDateTime
}

input CreateCloudFunctionsInput {
  cloudFunctionsId: ID!
  code: AWSJSON
  enterpriseId: ID!
  functionARN: String
  functionName: String
  functionURL: String
  mode: MODE!
  name: String!
  type: String!
  workspaceId: ID!
}

input CreateCollectionCatalogueInput {
  catalogueId: ID!
  collectionId: ID!
  enterpriseId: ID!
  mode: MODE!
}

input CreateCollectionInput {
  collectionId: ID!
  enterpriseId: ID!
  metaCatalogueId: ID
  mode: MODE!
  status: String
  title: String!
}

input CreateContactGroupInput {
  contactGroupId: ID!
  contactListSource: String
  dynamic: Boolean
  enterpriseId: ID!
  linkedAppId: ID
  mode: MODE!
  name: String!
  updatedAt: AWSDateTime
}

input CreateConversationInfoInput {
  analytics: AWSJSON
  channelMessageId: ID
  conversationId: ID!
  cumulativeLeadScore: Int
  deliveredAt: AWSDateTime
  enterpriseId: ID!
  errorMessage: AWSJSON
  leadScoreDiff: Int
  mode: MODE!
  pricing: AWSJSON
  readAt: AWSDateTime
  submittedAt: AWSDateTime
  submittedToPartner: AWSDateTime
}

input CreateConversationInput {
  agentInfo: AWSJSON
  content: String
  conversationId: ID!
  createdAt: AWSDateTime
  createdBy: ASSIGNMENT!
  customerId: ID!
  enterpriseId: ID!
  imagePath: String
  metadata: AWSJSON
  mode: MODE!
  senderId: ID
  sessionId: ID!
}

input CreateCustomerContactGroupInput {
  blacklisted: Boolean
  contactGroupId: ID!
  customerId: ID!
  enterpriseId: ID!
  mode: MODE!
  updatedAt: AWSDateTime
}

input CreateCustomerInput {
  blacklistReason: String
  blacklisted: Boolean
  blacklistedAt: AWSDateTime
  createdAt: AWSDateTime
  customerId: ID!
  email: String
  enterpriseId: ID!
  firstName: String
  lastName: String
  mode: MODE!
  name: String
  parent: SAAS
  parentId: String
  tags: [String]
  updatedAt: AWSDateTime
  variables: AWSJSON
}

input CreateDatabaseSchemaInput {
  config: AWSJSON
  databaseSchemaId: ID!
  description: String
  enterpriseId: ID!
  key: String!
  mode: MODE!
  schema: AWSJSON!
  timeFilterField: String
  workspaceId: ID!
}

input CreateDatabaseValuesInput {
  databaseSchemaId: ID!
  databaseValuesId: ID!
  enterpriseId: ID!
  mode: MODE!
  value: AWSJSON!
}

input CreateDialogFlowBotInput {
  config: AWSJSON!
  workspaceId: ID!
}

input CreateEnterpriseInput {
  brandId: String!
  contactAttributes: AWSJSON
  enterpriseId: ID!
  isActive: Boolean
  name: String!
  onboarding: Boolean
  organizationId: ID!
  variables: AWSJSON
}

input CreateEntityInput {
  enterpriseId: ID!
  entityData: AWSJSON
  entityId: ID!
  language: String
  mode: MODE!
  name: String!
  resolutionStrategy: String
  slotTypeId: ID
  type: String!
  workspaceId: ID!
}

input CreateEventLabelInput {
  campaignId: String
  conversationId: ID!
  createdAt: AWSDateTime
  customerId: ID!
  enterpriseId: ID!
  flowId: ID!
  interactionId: ID!
  label: String!
  labelId: ID!
  mode: MODE!
  nodeId: ID!
  previousLabel: String
  previousValue: String
  sessionId: ID!
  type: EventLabelType!
  updatedAt: AWSDateTime
  value: String!
  workspaceId: ID!
}

input CreateFileManagerFilesInput {
  description: String
  enterpriseId: ID!
  fileManagerFilesId: ID!
  fileType: String
  isFavorite: Boolean
  name: String
  nanoId: String
  size: String
  tags: [String]
  url: String
  workspaceId: ID!
}

input CreateFlowInput {
  campaignId: ID
  designConfig: AWSJSON
  enterpriseId: ID!
  fallbackId: ID
  flowId: ID!
  flowTemplateId: ID
  idleId: ID
  isImported: Boolean
  isInbound: Boolean
  mode: MODE!
  name: String!
  recurringCampaignId: ID
  settings: AWSJSON
  startId: ID
  status: Boolean
  workflowId: ID
  workflowStepsId: ID
  workspaceId: ID!
}

input CreateFlowTemplateInput {
  businessGoal: [String]!
  channels: [String]
  enterpriseId: ID!
  flowId: ID
  flowTemplateId: ID!
  industry: [String]!
  isPrivate: Boolean
  mode: MODE!
  templateData: AWSJSON
  templateDescription: String!
  templateIcon: String!
  templateName: String!
  workspaceId: ID
}

input CreateGbmBotInput {
  config: AWSJSON
  enterpriseId: ID!
  workspaceId: ID!
}

input CreateHealthTableInput {
  channel: CHANNEL
  checkFlag: Int
  config: AWSJSON
  count: Int!
  createdAt: AWSDateTime
  description: String
  enterpriseId: ID!
  functionOrigin: String
  healthTableId: ID!
  link: String
  mode: MODE!
  nodeId: ID
  read: Boolean!
  status: HEALTH_STATUS!
  subType: String
  title: String!
  type: ERROR_TYPE!
  updatedAt: AWSDateTime
  userId: ID
}

input CreateIntegrationInput {
  channel: CHANNEL
  config: AWSJSON
  details: AWSJSON
  enterpriseId: ID!
  flowId: ID
  integrationId: ID!
  logo: String
  metaCatalogueId: ID
  mode: MODE!
  name: String!
  number: String
  primary: Boolean
  saas: SAAS
  workspaceId: ID
}

input CreateIntentEventInput {
  businessGoal: String
  createdAt: AWSDateTime
  description: String
  endTime: AWSDateTime
  enterpriseId: ID!
  includeIntents: Boolean!
  industry: String
  intentEventId: ID!
  mode: MODE!
  name: String
  sharingMode: String
  sourceEnterpriseId: ID
  startTime: AWSDateTime
  updatedAt: AWSDateTime
  useCase: String
  workspaceId: ID!
}

input CreateIntentInput {
  enterpriseId: ID!
  intentId: ID!
  language: String
  lexIntentId: ID
  mode: MODE!
  name: String!
  nodeId: ID
  slots: [String!]
  updatedAt: AWSDateTime
  utterance: [String!]
  workspaceId: ID!
}

input CreateInteractionEventInput {
  businessGoal: String
  createdAt: AWSDateTime
  description: String
  endTime: AWSDateTime
  enterpriseId: ID!
  includeIntents: Boolean!
  industry: String
  interactionId: ID!
  mode: MODE!
  name: String
  sharingMode: String
  sourceEnterpriseId: ID
  startTime: AWSDateTime
  updatedAt: AWSDateTime
  useCase: String
  workspaceId: ID!
}

input CreateInteractionInput {
  enterpriseId: ID!
  flowId: ID!
  interactionId: ID!
  mode: MODE!
  name: String!
}

input CreateJobInput {
  description: String
  enterpriseId: ID!
  executionArn: String
  failureReasons: [String]
  jobId: ID!
  mode: MODE!
  payload: AWSJSON
  read: Boolean
  result: AWSJSON
  status: JobStatus!
  type: JobType!
  updatedAt: AWSDateTime
  userId: ID!
}

input CreateLinkedAppCatalogueInput {
  catalogueId: ID!
  enterpriseId: ID!
  hide: Boolean
  linkedAppId: ID!
  mode: MODE!
  status: String
  waLinkedAppCatalogueId: String
}

input CreateLinkedAppCollectionInput {
  collectionId: ID!
  enterpriseId: ID!
  linkedAppId: ID!
  mode: MODE!
  status: String
  waLinkedAppCollectionId: String
}

input CreateLinkedAppCustomerInput {
  customerDetails: AWSJSON
  customerId: ID!
  enterpriseId: ID!
  linkedAppId: ID!
  mode: MODE!
  updatedAt: AWSDateTime
}

input CreateLinkedAppInput {
  config: AWSJSON
  contactGroupId: ID
  details: AWSJSON
  email: String!
  enterpriseId: ID!
  isBusinessAccount: Boolean
  isCartEnabled: Boolean
  lastSyncTime: AWSDateTime
  linkedAppId: ID!
  mode: MODE!
  name: String!
  qrCode: String
  role: String!
  status: LinkedAppStatus!
}

input CreateLinkedAppMessageInput {
  createdAt: AWSDateTime
  customerId: ID!
  enterpriseId: ID!
  linkedAppId: ID!
  message: AWSJSON
  mode: MODE!
  updatedAt: AWSDateTime
  waMessageId: ID!
}

input CreateMetaCatalogueInput {
  enterpriseId: ID!
  integrationId: ID!
  isCartEnabled: Boolean
  isCatalogVisible: Boolean
  metaCatalogueId: ID!
  mode: MODE!
  name: String!
}

input CreateMissedUtteranceInput {
  channel: CHANNEL!
  confidence: Float!
  enterpriseId: ID!
  language: String
  missedUtteranceId: ID!
  mode: MODE!
  nodeId: String
  updatedAt: AWSDateTime
  utterance: String!
  workspaceId: ID!
}

input CreateModuleInput {
  enterpriseId: ID!
  moduleId: ID!
  name: String!
  roleId: ID
  subModule: AWSJSON
}

input CreateNodeInput {
  config: AWSJSON
  connectedNodes: [String]
  connectedNodesData: AWSJSON
  enterpriseId: ID!
  errorMessage: String
  intentId: ID
  interactionId: ID!
  language: String
  mode: MODE!
  nextId: ID
  noError: Boolean
  nodeId: ID!
  previousId: ID
  templateId: ID
  type: AWSJSON
}

input CreateNotificationInput {
  categoryStatus: JobStatus
  description: String
  enterpriseId: ID!
  link: String
  mode: MODE!
  notificationId: ID!
  read: Boolean!
  title: String
  type: CATEGORY
  updatedAt: AWSDateTime
  userId: ID!
}

input CreateOrganizationInput {
  brandId: String!
  brandName: String!
  name: String!
  organizationId: ID!
}

input CreateOutwardWebhookInput {
  config: AWSJSON
  description: String
  enterpriseId: ID!
  filters: [String]
  mode: MODE!
  name: String!
  outwardWebhookId: ID!
  workspaceId: ID!
}

input CreatePermissionInput {
  create: Boolean!
  delete: Boolean!
  enterpriseId: ID!
  moduleId: ID!
  permissionId: ID!
  read: Boolean!
  roleId: ID!
  subModulePermission: AWSJSON
  update: Boolean!
}

input CreateProfileInput {
  channel: CHANNEL!
  createdAt: AWSDateTime
  customerId: ID!
  enterpriseId: ID!
  maskedProfileId: String
  mode: MODE!
  profileId: ID!
}

input CreateRecurringCampaignInput {
  enterpriseId: ID!
  flowId: ID!
  language: String
  lastResponseSyncTime: AWSDateTime
  mode: MODE!
  name: String!
  recurringCampaignId: ID!
  responseSyncStatus: ResponseSyncStatus
  segment: String
  type: String!
  variables: AWSJSON
}

input CreateRoleInput {
  enterpriseId: ID!
  moduleId: ID
  name: String!
  roleId: ID!
}

input CreateSaasTriggerInput {
  channel: CHANNEL!
  customerAttrPath: String
  enterpriseId: ID!
  incomingPath: String
  mode: MODE!
  name: String!
  otherDetails: AWSJSON
  saasTriggerId: ID!
  triggerType: String!
  type: SAAS!
  workspaceId: ID!
}

input CreateScheduleNodeInput {
  enterpriseId: ID!
  mode: MODE!
  nodeId: ID!
  scheduleNodeId: ID!
  sessionId: ID!
  status: ScheduleNodeStatus!
  time: AWSDateTime!
  updatedAt: AWSDateTime
}

input CreateSessionInput {
  active: Boolean
  agentId: ID
  assignment: ASSIGNMENT!
  campaignMessageId: ID
  channel: CHANNEL!
  createdAt: AWSDateTime
  currentNodeId: ID
  customerId: ID!
  enterpriseId: ID!
  federatedLiveToCustomerId: ID
  federatedRole: FEDERATED_ROLE
  flowId: ID!
  healthTableId: ID
  initiatedBy: SESSION_INITIATED_BY
  integrationId: ID
  language: String
  metaConversationId: ID
  mode: MODE!
  nextNodeId: ID
  nodeId: ID
  preview: Boolean
  referrer: String
  referrerType: String
  sessionId: ID!
  tags: [String]
  updatedAt: AWSDateTime
  validationCount: Int
  variables: AWSJSON
  workspaceId: ID!
}

input CreateTableViewsInput {
  databaseKey: String
  enterpriseId: ID!
  mode: MODE!
  name: String!
  tableViewsId: ID!
  type: TableType!
  updatedAt: AWSDateTime
  viewConfig: AWSJSON!
}

input CreateTemplateEventInput {
  businessGoal: String
  createdAt: AWSDateTime
  description: String
  endTime: AWSDateTime
  enterpriseId: ID!
  includeIntents: Boolean!
  industry: String
  mode: MODE!
  name: String
  sharingMode: String
  sourceEnterpriseId: ID
  startTime: AWSDateTime
  templateEventId: ID!
  templateType: String
  updatedAt: AWSDateTime
  useCase: String
  workspaceId: ID!
}

input CreateTemplatesInput {
  category: TemplateCategory!
  channel: CHANNEL!
  config: AWSJSON
  enterpriseId: ID!
  integrationId: ID
  language: String!
  mode: MODE!
  namespaceId: String
  nodeId: ID
  phoneNo: String
  reSubmit: Boolean
  status: WA_TEMPLATE_STATUS!
  statusMessage: String
  templateId: String
  templatesId: ID!
  title: String!
  updatedAt: AWSDateTime
}

input CreateTriggerInput {
  enterpriseId: ID!
  mode: MODE!
  name: String!
  nodeId: ID
  triggerId: ID!
  workspaceId: ID!
}

input CreateUserInput {
  active: Boolean!
  availability: AVAILABILITY!
  avatarUrl: String
  browserToken: String
  clerkUserId: String
  email: String!
  enterpriseId: ID!
  inviterUserIdClerk: String
  isLoggedIn: Boolean
  lName: String
  lastSignIn: AWSDateTime
  name: String
  notificationConfig: AWSJSON
  phoneNumber: String
  profileDetails: AWSJSON
  roleId: ID
  updatedAt: AWSDateTime
  userId: ID!
}

input CreateUtteranceInput {
  enterpriseId: ID!
  intentId: ID!
  isPaid: Boolean
  mode: MODE!
  sourceName: String
  utterance: String!
  utteranceId: ID!
}

input CreateWhatsappFlowsInput {
  config: AWSJSON
  enterpriseId: ID!
  integrationId: ID!
  mode: MODE!
  name: String!
  status: WA_FLOW_STATUS!
  whatsappFlowId: ID!
}

input CreateWorkflowStepEventInput {
  campaignId: ID
  createdAt: AWSDateTime
  customerId: ID!
  endTime: AWSDateTime
  enterpriseId: ID!
  eventToBeTracked: String
  flowId: ID
  id: ID
  mode: MODE!
  startTime: AWSDateTime
  stepId: ID!
  updatedAt: AWSDateTime
  workflowId: ID!
}

input CreateWorkflowStepsInput {
  campaignId: ID
  conditionalNextSteps: AWSJSON
  createdAt: AWSDateTime
  enterpriseId: ID!
  flowId: ID
  integrationId: ID
  mode: MODE!
  nextStepId: ID
  previousStepId: ID
  status: WorkflowStatus!
  stepConfig: AWSJSON
  stepDetails: AWSJSON
  stepId: ID!
  stepType: StepType
  updatedAt: AWSDateTime
  workflowId: ID!
}

input CreateWorkflowsInput {
  config: AWSJSON
  currentStepId: ID
  enterpriseId: ID!
  mode: MODE!
  startingCampaignId: ID
  startingFlowId: ID
  status: WorkflowStatus!
  workflowId: ID!
  workflowName: String
}

input CreateWorkspaceInput {
  active: Boolean
  botAliasId: String
  botDraftId: String
  botFailureReason: [String]
  botId: String
  botLastUpdated: AWSDateTime
  botStatus: BotStatus
  defaultLanguage: String
  defaultTables: [String]
  designConfig: AWSJSON
  enterpriseId: ID!
  isImported: Boolean
  language: [String]
  mode: MODE!
  name: String!
  publishConfig: AWSJSON
  publishLastUpdated: AWSDateTime
  sessionTimeout: AWSJSON
  timeZone: String
  tools: AWSJSON
  unSupportedMessages: AWSJSON
  variables: AWSJSON
  workspaceId: ID!
  workspaceLastPublished: AWSDateTime
}

input DeleteAbstractJourneyEventInput {
  enterpriseId: ID!
  flowId: ID!
  mode: MODE!
}

input DeleteAiBrainFileManagerInput {
  enterpriseId: ID!
  fileId: ID!
  mode: MODE!
}

input DeleteAnalyticsDashboardInput {
  analyticsDashboardId: ID!
  enterpriseId: ID!
  mode: MODE!
}

input DeleteApiGateWayInput {
  enterpriseId: ID!
  mode: MODE!
  name: String!
  workspaceId: ID!
}

input DeleteApiInput {
  apiId: ID!
  enterpriseId: ID!
  mode: MODE!
}

input DeleteAudienceSegmentsInput {
  enterpriseId: ID!
  mode: MODE!
  segmentId: ID!
}

input DeleteBroadcastInput {
  broadcastId: ID!
  enterpriseId: ID!
  mode: MODE!
}

input DeleteBroadcastMessageInput {
  broadcastMessageId: ID!
  enterpriseId: ID!
  mode: MODE!
}

input DeleteCampaignApproverInput {
  approverId: ID!
  campaignId: ID!
  enterpriseId: ID!
  mode: MODE!
}

input DeleteCampaignAuditTrailInput {
  auditTrailId: ID!
  enterpriseId: ID!
  mode: MODE!
}

input DeleteCampaignContactGroupInput {
  campaignId: ID!
  contactGroupId: ID!
  enterpriseId: ID!
  mode: MODE!
}

input DeleteCampaignInput {
  campaignId: ID!
  enterpriseId: ID!
  mode: MODE!
}

input DeleteCampaignMessageInput {
  campaignMessageId: ID!
  enterpriseId: ID!
  mode: MODE!
}

input DeleteCatalogueInput {
  catalogueId: ID!
  enterpriseId: ID!
  mode: MODE!
}

input DeleteCloudFunctionsInput {
  cloudFunctionsId: ID!
  enterpriseId: ID!
  mode: MODE!
}

input DeleteCollectionCatalogueInput {
  catalogueId: ID!
  collectionId: ID!
  enterpriseId: ID!
  mode: MODE!
}

input DeleteCollectionInput {
  collectionId: ID!
  enterpriseId: ID!
  mode: MODE!
}

input DeleteContactGroupInput {
  contactGroupId: ID!
  enterpriseId: ID!
  mode: MODE!
}

input DeleteConversationInfoInput {
  conversationId: ID!
  enterpriseId: ID!
  mode: MODE!
}

input DeleteConversationInput {
  conversationId: ID!
  enterpriseId: ID!
  mode: MODE!
}

input DeleteCustomerContactGroupInput {
  contactGroupId: ID!
  customerId: ID!
  enterpriseId: ID!
  mode: MODE!
}

input DeleteCustomerInput {
  customerId: ID!
  enterpriseId: ID!
  mode: MODE!
}

input DeleteDatabaseSchemaInput {
  databaseSchemaId: ID!
  enterpriseId: ID!
  mode: MODE!
}

input DeleteDatabaseValuesInput {
  databaseValuesId: ID!
  enterpriseId: ID!
  mode: MODE!
}

input DeleteEnterpriseInput {
  enterpriseId: ID!
}

input DeleteEntityInput {
  enterpriseId: ID!
  entityId: ID!
  mode: MODE!
}

input DeleteEventLabelInput {
  conversationId: ID!
  customerId: ID!
  enterpriseId: ID!
  labelId: ID!
  mode: MODE!
}

input DeleteFileManagerFilesInput {
  enterpriseId: ID!
  fileManagerFilesId: ID!
}

input DeleteFlowInput {
  enterpriseId: ID!
  flowId: ID!
  mode: MODE!
}

input DeleteFlowTemplateInput {
  enterpriseId: ID!
  flowTemplateId: ID!
  mode: MODE!
}

input DeleteHealthTableInput {
  enterpriseId: ID!
  healthTableId: ID!
  mode: MODE!
}

input DeleteIntegrationInput {
  enterpriseId: ID!
  integrationId: ID!
  mode: MODE!
}

input DeleteIntentEventInput {
  enterpriseId: ID!
  intentEventId: ID!
  mode: MODE!
}

input DeleteIntentInput {
  enterpriseId: ID!
  intentId: ID!
  mode: MODE!
}

input DeleteInteractionEventInput {
  enterpriseId: ID!
  interactionId: ID!
  mode: MODE!
}

input DeleteInteractionInput {
  enterpriseId: ID!
  interactionId: ID!
  mode: MODE!
}

input DeleteJobInput {
  enterpriseId: ID!
  jobId: ID!
  mode: MODE!
}

input DeleteLinkedAppCatalogueInput {
  catalogueId: ID!
  enterpriseId: ID!
  linkedAppId: ID!
  mode: MODE!
}

input DeleteLinkedAppCollectionInput {
  collectionId: ID!
  enterpriseId: ID!
  linkedAppId: ID!
  mode: MODE!
}

input DeleteLinkedAppCustomerInput {
  customerId: ID!
  enterpriseId: ID!
  linkedAppId: ID!
  mode: MODE!
}

input DeleteLinkedAppInput {
  enterpriseId: ID!
  linkedAppId: ID!
  mode: MODE!
}

input DeleteLinkedAppMessageInput {
  enterpriseId: ID!
  mode: MODE!
  waMessageId: ID!
}

input DeleteMetaCatalogueInput {
  enterpriseId: ID!
  metaCatalogueId: ID!
  mode: MODE!
}

input DeleteMissedUtteranceInput {
  enterpriseId: ID!
  missedUtteranceId: ID!
  mode: MODE!
}

input DeleteModuleInput {
  enterpriseId: ID!
  moduleId: ID!
}

input DeleteNodeInput {
  enterpriseId: ID!
  mode: MODE!
  nodeId: ID!
}

input DeleteNotificationInput {
  enterpriseId: ID!
  mode: MODE!
  notificationId: ID!
}

input DeleteOrganizationInput {
  brandId: String!
  organizationId: ID!
}

input DeleteOutwardWebhookInput {
  enterpriseId: ID!
  mode: MODE!
  outwardWebhookId: ID!
}

input DeletePermissionInput {
  enterpriseId: ID!
  permissionId: ID!
}

input DeleteProfileInput {
  channel: CHANNEL!
  enterpriseId: ID!
  mode: MODE!
  profileId: ID!
}

input DeleteRecurringCampaignInput {
  enterpriseId: ID!
  mode: MODE!
  recurringCampaignId: ID!
}

input DeleteRoleInput {
  enterpriseId: ID!
  roleId: ID!
}

input DeleteSaasTriggerInput {
  enterpriseId: ID!
  mode: MODE!
  saasTriggerId: ID!
}

input DeleteScheduleNodeInput {
  enterpriseId: ID!
  mode: MODE!
  scheduleNodeId: ID!
}

input DeleteSessionInput {
  enterpriseId: ID!
  mode: MODE!
  sessionId: ID!
}

input DeleteTableViewsInput {
  enterpriseId: ID!
  mode: MODE!
  tableViewsId: ID!
}

input DeleteTemplateEventInput {
  enterpriseId: ID!
  mode: MODE!
  templateEventId: ID!
}

input DeleteTemplatesInput {
  enterpriseId: ID!
  mode: MODE!
  templatesId: ID!
}

input DeleteTriggerInput {
  enterpriseId: ID!
  mode: MODE!
  name: String!
  triggerId: ID!
  workspaceId: ID!
}

input DeleteUserInput {
  enterpriseId: ID!
  userId: ID!
}

input DeleteUtteranceInput {
  enterpriseId: ID!
  mode: MODE!
  utteranceId: ID!
}

input DeleteWhatsappFlowsInput {
  enterpriseId: ID!
  mode: MODE!
  whatsappFlowId: ID!
}

input DeleteWorkflowStepEventInput {
  id: ID!
}

input DeleteWorkflowStepsInput {
  enterpriseId: ID!
  mode: MODE!
  stepId: ID!
}

input DeleteWorkflowsInput {
  enterpriseId: ID!
  mode: MODE!
  workflowId: ID!
}

input DeleteWorkspaceInput {
  enterpriseId: ID!
  mode: MODE!
  workspaceId: ID!
}

input ImportExportInput {
  enterpriseId: ID!
  entityId: ID!
  fileId: String
  flowName: String
  mode: MODE!
  modelName: PlatformModels
  operation: Operation!
  operationType: OperationType!
  sourceEnterpriseId: ID
  sourceEntityId: ID
  sourceFlowId: ID
  targetFlowId: ID
  targetWorkspaceId: ID
  templateId: ID
  type: ImportExportType!
}

input ImportWorkspaceInput {
  enterpriseId: ID!
  fileId: String!
  isTemplate: Boolean
  templateId: ID
}

input ModelASSIGNMENTInput {
  eq: ASSIGNMENT
  ne: ASSIGNMENT
}

input ModelAVAILABILITYInput {
  eq: AVAILABILITY
  ne: AVAILABILITY
}

input ModelAbstractJourneyEventConditionInput {
  and: [ModelAbstractJourneyEventConditionInput]
  businessGoal: ModelStringInput
  createdAt: ModelStringInput
  description: ModelStringInput
  endTime: ModelStringInput
  includeIntents: ModelBooleanInput
  industry: ModelStringInput
  journeyNameLibrary: ModelStringInput
  not: ModelAbstractJourneyEventConditionInput
  or: [ModelAbstractJourneyEventConditionInput]
  sharingMode: ModelStringInput
  sourceEnterpriseId: ModelIDInput
  startTime: ModelStringInput
  updatedAt: ModelStringInput
  useCase: ModelStringInput
  workspaceId: ModelIDInput
}

input ModelAbstractJourneyEventFilterInput {
  and: [ModelAbstractJourneyEventFilterInput]
  businessGoal: ModelStringInput
  createdAt: ModelStringInput
  description: ModelStringInput
  endTime: ModelStringInput
  enterpriseId: ModelIDInput
  flowId: ModelIDInput
  includeIntents: ModelBooleanInput
  industry: ModelStringInput
  journeyNameLibrary: ModelStringInput
  mode: ModelMODEInput
  not: ModelAbstractJourneyEventFilterInput
  or: [ModelAbstractJourneyEventFilterInput]
  sharingMode: ModelStringInput
  sourceEnterpriseId: ModelIDInput
  startTime: ModelStringInput
  updatedAt: ModelStringInput
  useCase: ModelStringInput
  workspaceId: ModelIDInput
}

input ModelAbstractJourneyEventJourneyEventsByWorkspaceIdCompositeKeyConditionInput {
  beginsWith: ModelAbstractJourneyEventJourneyEventsByWorkspaceIdCompositeKeyInput
  between: [ModelAbstractJourneyEventJourneyEventsByWorkspaceIdCompositeKeyInput]
  eq: ModelAbstractJourneyEventJourneyEventsByWorkspaceIdCompositeKeyInput
  ge: ModelAbstractJourneyEventJourneyEventsByWorkspaceIdCompositeKeyInput
  gt: ModelAbstractJourneyEventJourneyEventsByWorkspaceIdCompositeKeyInput
  le: ModelAbstractJourneyEventJourneyEventsByWorkspaceIdCompositeKeyInput
  lt: ModelAbstractJourneyEventJourneyEventsByWorkspaceIdCompositeKeyInput
}

input ModelAbstractJourneyEventJourneyEventsByWorkspaceIdCompositeKeyInput {
  mode: MODE
  workspaceId: ID
}

input ModelAbstractJourneyEventPrimaryCompositeKeyConditionInput {
  beginsWith: ModelAbstractJourneyEventPrimaryCompositeKeyInput
  between: [ModelAbstractJourneyEventPrimaryCompositeKeyInput]
  eq: ModelAbstractJourneyEventPrimaryCompositeKeyInput
  ge: ModelAbstractJourneyEventPrimaryCompositeKeyInput
  gt: ModelAbstractJourneyEventPrimaryCompositeKeyInput
  le: ModelAbstractJourneyEventPrimaryCompositeKeyInput
  lt: ModelAbstractJourneyEventPrimaryCompositeKeyInput
}

input ModelAbstractJourneyEventPrimaryCompositeKeyInput {
  flowId: ID
  mode: MODE
}

input ModelAiBrainFileManagerConditionInput {
  aiEnabled: ModelBooleanInput
  and: [ModelAiBrainFileManagerConditionInput]
  name: ModelStringInput
  not: ModelAiBrainFileManagerConditionInput
  or: [ModelAiBrainFileManagerConditionInput]
  type: ModelStringInput
  url: ModelStringInput
  usage: ModelStringInput
}

input ModelAiBrainFileManagerFilterInput {
  aiEnabled: ModelBooleanInput
  and: [ModelAiBrainFileManagerFilterInput]
  enterpriseId: ModelIDInput
  fileId: ModelIDInput
  mode: ModelMODEInput
  name: ModelStringInput
  not: ModelAiBrainFileManagerFilterInput
  or: [ModelAiBrainFileManagerFilterInput]
  type: ModelStringInput
  url: ModelStringInput
  usage: ModelStringInput
}

input ModelAiBrainFileManagerPrimaryCompositeKeyConditionInput {
  beginsWith: ModelAiBrainFileManagerPrimaryCompositeKeyInput
  between: [ModelAiBrainFileManagerPrimaryCompositeKeyInput]
  eq: ModelAiBrainFileManagerPrimaryCompositeKeyInput
  ge: ModelAiBrainFileManagerPrimaryCompositeKeyInput
  gt: ModelAiBrainFileManagerPrimaryCompositeKeyInput
  le: ModelAiBrainFileManagerPrimaryCompositeKeyInput
  lt: ModelAiBrainFileManagerPrimaryCompositeKeyInput
}

input ModelAiBrainFileManagerPrimaryCompositeKeyInput {
  fileId: ID
  mode: MODE
}

input ModelAnalyticsDashboardConditionInput {
  and: [ModelAnalyticsDashboardConditionInput]
  config: ModelStringInput
  name: ModelStringInput
  not: ModelAnalyticsDashboardConditionInput
  or: [ModelAnalyticsDashboardConditionInput]
}

input ModelAnalyticsDashboardFilterInput {
  analyticsDashboardId: ModelIDInput
  and: [ModelAnalyticsDashboardFilterInput]
  config: ModelStringInput
  enterpriseId: ModelIDInput
  mode: ModelMODEInput
  name: ModelStringInput
  not: ModelAnalyticsDashboardFilterInput
  or: [ModelAnalyticsDashboardFilterInput]
}

input ModelAnalyticsDashboardPrimaryCompositeKeyConditionInput {
  beginsWith: ModelAnalyticsDashboardPrimaryCompositeKeyInput
  between: [ModelAnalyticsDashboardPrimaryCompositeKeyInput]
  eq: ModelAnalyticsDashboardPrimaryCompositeKeyInput
  ge: ModelAnalyticsDashboardPrimaryCompositeKeyInput
  gt: ModelAnalyticsDashboardPrimaryCompositeKeyInput
  le: ModelAnalyticsDashboardPrimaryCompositeKeyInput
  lt: ModelAnalyticsDashboardPrimaryCompositeKeyInput
}

input ModelAnalyticsDashboardPrimaryCompositeKeyInput {
  analyticsDashboardId: ID
  mode: MODE
}

input ModelApiApisByWorkspaceIdCompositeKeyConditionInput {
  beginsWith: ModelApiApisByWorkspaceIdCompositeKeyInput
  between: [ModelApiApisByWorkspaceIdCompositeKeyInput]
  eq: ModelApiApisByWorkspaceIdCompositeKeyInput
  ge: ModelApiApisByWorkspaceIdCompositeKeyInput
  gt: ModelApiApisByWorkspaceIdCompositeKeyInput
  le: ModelApiApisByWorkspaceIdCompositeKeyInput
  lt: ModelApiApisByWorkspaceIdCompositeKeyInput
}

input ModelApiApisByWorkspaceIdCompositeKeyInput {
  mode: MODE
  workspaceId: ID
}

input ModelApiConditionInput {
  and: [ModelApiConditionInput]
  config: ModelStringInput
  name: ModelStringInput
  not: ModelApiConditionInput
  or: [ModelApiConditionInput]
  workspaceId: ModelIDInput
}

input ModelApiFilterInput {
  and: [ModelApiFilterInput]
  apiId: ModelIDInput
  config: ModelStringInput
  enterpriseId: ModelIDInput
  mode: ModelMODEInput
  name: ModelStringInput
  not: ModelApiFilterInput
  or: [ModelApiFilterInput]
  workspaceId: ModelIDInput
}

input ModelApiGateWayApiGateWayByWorkspaceIdCompositeKeyConditionInput {
  beginsWith: ModelApiGateWayApiGateWayByWorkspaceIdCompositeKeyInput
  between: [ModelApiGateWayApiGateWayByWorkspaceIdCompositeKeyInput]
  eq: ModelApiGateWayApiGateWayByWorkspaceIdCompositeKeyInput
  ge: ModelApiGateWayApiGateWayByWorkspaceIdCompositeKeyInput
  gt: ModelApiGateWayApiGateWayByWorkspaceIdCompositeKeyInput
  le: ModelApiGateWayApiGateWayByWorkspaceIdCompositeKeyInput
  lt: ModelApiGateWayApiGateWayByWorkspaceIdCompositeKeyInput
}

input ModelApiGateWayApiGateWayByWorkspaceIdCompositeKeyInput {
  mode: MODE
  workspaceId: ID
}

input ModelApiGateWayConditionInput {
  and: [ModelApiGateWayConditionInput]
  flow: ModelStringInput
  interaction: ModelStringInput
  nodeId: ModelStringInput
  not: ModelApiGateWayConditionInput
  or: [ModelApiGateWayConditionInput]
  payload: ModelStringInput
  variable: ModelStringInput
}

input ModelApiGateWayFilterInput {
  and: [ModelApiGateWayFilterInput]
  enterpriseId: ModelIDInput
  flow: ModelStringInput
  interaction: ModelStringInput
  mode: ModelMODEInput
  name: ModelStringInput
  nodeId: ModelStringInput
  not: ModelApiGateWayFilterInput
  or: [ModelApiGateWayFilterInput]
  payload: ModelStringInput
  variable: ModelStringInput
  workspaceId: ModelIDInput
}

input ModelApiGateWayPrimaryCompositeKeyConditionInput {
  beginsWith: ModelApiGateWayPrimaryCompositeKeyInput
  between: [ModelApiGateWayPrimaryCompositeKeyInput]
  eq: ModelApiGateWayPrimaryCompositeKeyInput
  ge: ModelApiGateWayPrimaryCompositeKeyInput
  gt: ModelApiGateWayPrimaryCompositeKeyInput
  le: ModelApiGateWayPrimaryCompositeKeyInput
  lt: ModelApiGateWayPrimaryCompositeKeyInput
}

input ModelApiGateWayPrimaryCompositeKeyInput {
  mode: MODE
  name: String
  workspaceId: ID
}

input ModelApiPrimaryCompositeKeyConditionInput {
  beginsWith: ModelApiPrimaryCompositeKeyInput
  between: [ModelApiPrimaryCompositeKeyInput]
  eq: ModelApiPrimaryCompositeKeyInput
  ge: ModelApiPrimaryCompositeKeyInput
  gt: ModelApiPrimaryCompositeKeyInput
  le: ModelApiPrimaryCompositeKeyInput
  lt: ModelApiPrimaryCompositeKeyInput
}

input ModelApiPrimaryCompositeKeyInput {
  apiId: ID
  mode: MODE
}

input ModelAudienceSegmentsConditionInput {
  and: [ModelAudienceSegmentsConditionInput]
  createdAt: ModelStringInput
  not: ModelAudienceSegmentsConditionInput
  or: [ModelAudienceSegmentsConditionInput]
  segmentConfig: ModelStringInput
  segmentName: ModelStringInput
  updatedAt: ModelStringInput
}

input ModelAudienceSegmentsFilterInput {
  and: [ModelAudienceSegmentsFilterInput]
  createdAt: ModelStringInput
  enterpriseId: ModelIDInput
  mode: ModelMODEInput
  not: ModelAudienceSegmentsFilterInput
  or: [ModelAudienceSegmentsFilterInput]
  segmentConfig: ModelStringInput
  segmentId: ModelIDInput
  segmentName: ModelStringInput
  updatedAt: ModelStringInput
}

input ModelAudienceSegmentsPrimaryCompositeKeyConditionInput {
  beginsWith: ModelAudienceSegmentsPrimaryCompositeKeyInput
  between: [ModelAudienceSegmentsPrimaryCompositeKeyInput]
  eq: ModelAudienceSegmentsPrimaryCompositeKeyInput
  ge: ModelAudienceSegmentsPrimaryCompositeKeyInput
  gt: ModelAudienceSegmentsPrimaryCompositeKeyInput
  le: ModelAudienceSegmentsPrimaryCompositeKeyInput
  lt: ModelAudienceSegmentsPrimaryCompositeKeyInput
}

input ModelAudienceSegmentsPrimaryCompositeKeyInput {
  mode: MODE
  segmentId: ID
}

input ModelBooleanInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  eq: Boolean
  ne: Boolean
}

input ModelBotStatusInput {
  eq: BotStatus
  ne: BotStatus
}

input ModelBroadcastConditionInput {
  advancedConfig: ModelStringInput
  and: [ModelBroadcastConditionInput]
  asset: ModelStringInput
  catalogItems: ModelStringInput
  isCatalogue: ModelBooleanInput
  message: ModelStringInput
  name: ModelStringInput
  not: ModelBroadcastConditionInput
  or: [ModelBroadcastConditionInput]
  scheduleTime: ModelStringInput
  senderReceiver: ModelStringInput
  status: ModelBroadcastStatusInput
}

input ModelBroadcastFilterInput {
  advancedConfig: ModelStringInput
  and: [ModelBroadcastFilterInput]
  asset: ModelStringInput
  broadcastId: ModelIDInput
  catalogItems: ModelStringInput
  enterpriseId: ModelIDInput
  isCatalogue: ModelBooleanInput
  message: ModelStringInput
  mode: ModelMODEInput
  name: ModelStringInput
  not: ModelBroadcastFilterInput
  or: [ModelBroadcastFilterInput]
  scheduleTime: ModelStringInput
  senderReceiver: ModelStringInput
  status: ModelBroadcastStatusInput
}

input ModelBroadcastMessageBroadcastMessageByBroadcastIdCompositeKeyConditionInput {
  beginsWith: ModelBroadcastMessageBroadcastMessageByBroadcastIdCompositeKeyInput
  between: [ModelBroadcastMessageBroadcastMessageByBroadcastIdCompositeKeyInput]
  eq: ModelBroadcastMessageBroadcastMessageByBroadcastIdCompositeKeyInput
  ge: ModelBroadcastMessageBroadcastMessageByBroadcastIdCompositeKeyInput
  gt: ModelBroadcastMessageBroadcastMessageByBroadcastIdCompositeKeyInput
  le: ModelBroadcastMessageBroadcastMessageByBroadcastIdCompositeKeyInput
  lt: ModelBroadcastMessageBroadcastMessageByBroadcastIdCompositeKeyInput
}

input ModelBroadcastMessageBroadcastMessageByBroadcastIdCompositeKeyInput {
  broadcastId: ID
  mode: MODE
}

input ModelBroadcastMessageBroadcastMessageByCustomerIdCompositeKeyConditionInput {
  beginsWith: ModelBroadcastMessageBroadcastMessageByCustomerIdCompositeKeyInput
  between: [ModelBroadcastMessageBroadcastMessageByCustomerIdCompositeKeyInput]
  eq: ModelBroadcastMessageBroadcastMessageByCustomerIdCompositeKeyInput
  ge: ModelBroadcastMessageBroadcastMessageByCustomerIdCompositeKeyInput
  gt: ModelBroadcastMessageBroadcastMessageByCustomerIdCompositeKeyInput
  le: ModelBroadcastMessageBroadcastMessageByCustomerIdCompositeKeyInput
  lt: ModelBroadcastMessageBroadcastMessageByCustomerIdCompositeKeyInput
}

input ModelBroadcastMessageBroadcastMessageByCustomerIdCompositeKeyInput {
  customerId: ID
  mode: MODE
}

input ModelBroadcastMessageBroadcastMessageByLinkedAppIdCompositeKeyConditionInput {
  beginsWith: ModelBroadcastMessageBroadcastMessageByLinkedAppIdCompositeKeyInput
  between: [ModelBroadcastMessageBroadcastMessageByLinkedAppIdCompositeKeyInput]
  eq: ModelBroadcastMessageBroadcastMessageByLinkedAppIdCompositeKeyInput
  ge: ModelBroadcastMessageBroadcastMessageByLinkedAppIdCompositeKeyInput
  gt: ModelBroadcastMessageBroadcastMessageByLinkedAppIdCompositeKeyInput
  le: ModelBroadcastMessageBroadcastMessageByLinkedAppIdCompositeKeyInput
  lt: ModelBroadcastMessageBroadcastMessageByLinkedAppIdCompositeKeyInput
}

input ModelBroadcastMessageBroadcastMessageByLinkedAppIdCompositeKeyInput {
  linkedAppId: ID
  mode: MODE
}

input ModelBroadcastMessageConditionInput {
  and: [ModelBroadcastMessageConditionInput]
  broadcastId: ModelIDInput
  catalogItems: ModelStringInput
  customerId: ModelIDInput
  isCatalogue: ModelBooleanInput
  linkedAppId: ModelIDInput
  meta: ModelStringInput
  not: ModelBroadcastMessageConditionInput
  or: [ModelBroadcastMessageConditionInput]
  scheduleTime: ModelStringInput
  status: ModelBroadcastMessageStatusInput
  timeToRespond: ModelIntInput
  waMessageId: ModelIDInput
}

input ModelBroadcastMessageFilterInput {
  and: [ModelBroadcastMessageFilterInput]
  broadcastId: ModelIDInput
  broadcastMessageId: ModelIDInput
  catalogItems: ModelStringInput
  customerId: ModelIDInput
  enterpriseId: ModelIDInput
  isCatalogue: ModelBooleanInput
  linkedAppId: ModelIDInput
  meta: ModelStringInput
  mode: ModelMODEInput
  not: ModelBroadcastMessageFilterInput
  or: [ModelBroadcastMessageFilterInput]
  scheduleTime: ModelStringInput
  status: ModelBroadcastMessageStatusInput
  timeToRespond: ModelIntInput
  waMessageId: ModelIDInput
}

input ModelBroadcastMessagePrimaryCompositeKeyConditionInput {
  beginsWith: ModelBroadcastMessagePrimaryCompositeKeyInput
  between: [ModelBroadcastMessagePrimaryCompositeKeyInput]
  eq: ModelBroadcastMessagePrimaryCompositeKeyInput
  ge: ModelBroadcastMessagePrimaryCompositeKeyInput
  gt: ModelBroadcastMessagePrimaryCompositeKeyInput
  le: ModelBroadcastMessagePrimaryCompositeKeyInput
  lt: ModelBroadcastMessagePrimaryCompositeKeyInput
}

input ModelBroadcastMessagePrimaryCompositeKeyInput {
  broadcastMessageId: ID
  mode: MODE
}

input ModelBroadcastMessageStatusInput {
  eq: BroadcastMessageStatus
  ne: BroadcastMessageStatus
}

input ModelBroadcastPrimaryCompositeKeyConditionInput {
  beginsWith: ModelBroadcastPrimaryCompositeKeyInput
  between: [ModelBroadcastPrimaryCompositeKeyInput]
  eq: ModelBroadcastPrimaryCompositeKeyInput
  ge: ModelBroadcastPrimaryCompositeKeyInput
  gt: ModelBroadcastPrimaryCompositeKeyInput
  le: ModelBroadcastPrimaryCompositeKeyInput
  lt: ModelBroadcastPrimaryCompositeKeyInput
}

input ModelBroadcastPrimaryCompositeKeyInput {
  broadcastId: ID
  mode: MODE
}

input ModelBroadcastStatusInput {
  eq: BroadcastStatus
  ne: BroadcastStatus
}

input ModelCATEGORYInput {
  eq: CATEGORY
  ne: CATEGORY
}

input ModelCHANNELInput {
  eq: CHANNEL
  ne: CHANNEL
}

input ModelCampaignApproverCampaignApproverByCampaignIdCompositeKeyConditionInput {
  beginsWith: ModelCampaignApproverCampaignApproverByCampaignIdCompositeKeyInput
  between: [ModelCampaignApproverCampaignApproverByCampaignIdCompositeKeyInput]
  eq: ModelCampaignApproverCampaignApproverByCampaignIdCompositeKeyInput
  ge: ModelCampaignApproverCampaignApproverByCampaignIdCompositeKeyInput
  gt: ModelCampaignApproverCampaignApproverByCampaignIdCompositeKeyInput
  le: ModelCampaignApproverCampaignApproverByCampaignIdCompositeKeyInput
  lt: ModelCampaignApproverCampaignApproverByCampaignIdCompositeKeyInput
}

input ModelCampaignApproverCampaignApproverByCampaignIdCompositeKeyInput {
  campaignId: ID
  mode: MODE
}

input ModelCampaignApproverCampaignApproverByUserCompositeKeyConditionInput {
  beginsWith: ModelCampaignApproverCampaignApproverByUserCompositeKeyInput
  between: [ModelCampaignApproverCampaignApproverByUserCompositeKeyInput]
  eq: ModelCampaignApproverCampaignApproverByUserCompositeKeyInput
  ge: ModelCampaignApproverCampaignApproverByUserCompositeKeyInput
  gt: ModelCampaignApproverCampaignApproverByUserCompositeKeyInput
  le: ModelCampaignApproverCampaignApproverByUserCompositeKeyInput
  lt: ModelCampaignApproverCampaignApproverByUserCompositeKeyInput
}

input ModelCampaignApproverCampaignApproverByUserCompositeKeyInput {
  approverId: ID
  mode: MODE
}

input ModelCampaignApproverConditionInput {
  and: [ModelCampaignApproverConditionInput]
  not: ModelCampaignApproverConditionInput
  number: ModelStringInput
  or: [ModelCampaignApproverConditionInput]
}

input ModelCampaignApproverFilterInput {
  and: [ModelCampaignApproverFilterInput]
  approverId: ModelIDInput
  campaignId: ModelIDInput
  enterpriseId: ModelIDInput
  mode: ModelMODEInput
  not: ModelCampaignApproverFilterInput
  number: ModelStringInput
  or: [ModelCampaignApproverFilterInput]
}

input ModelCampaignApproverPrimaryCompositeKeyConditionInput {
  beginsWith: ModelCampaignApproverPrimaryCompositeKeyInput
  between: [ModelCampaignApproverPrimaryCompositeKeyInput]
  eq: ModelCampaignApproverPrimaryCompositeKeyInput
  ge: ModelCampaignApproverPrimaryCompositeKeyInput
  gt: ModelCampaignApproverPrimaryCompositeKeyInput
  le: ModelCampaignApproverPrimaryCompositeKeyInput
  lt: ModelCampaignApproverPrimaryCompositeKeyInput
}

input ModelCampaignApproverPrimaryCompositeKeyInput {
  approverId: ID
  campaignId: ID
  mode: MODE
}

input ModelCampaignAuditTrailCampaignAuditTrailByCampaignIdCompositeKeyConditionInput {
  beginsWith: ModelCampaignAuditTrailCampaignAuditTrailByCampaignIdCompositeKeyInput
  between: [ModelCampaignAuditTrailCampaignAuditTrailByCampaignIdCompositeKeyInput]
  eq: ModelCampaignAuditTrailCampaignAuditTrailByCampaignIdCompositeKeyInput
  ge: ModelCampaignAuditTrailCampaignAuditTrailByCampaignIdCompositeKeyInput
  gt: ModelCampaignAuditTrailCampaignAuditTrailByCampaignIdCompositeKeyInput
  le: ModelCampaignAuditTrailCampaignAuditTrailByCampaignIdCompositeKeyInput
  lt: ModelCampaignAuditTrailCampaignAuditTrailByCampaignIdCompositeKeyInput
}

input ModelCampaignAuditTrailCampaignAuditTrailByCampaignIdCompositeKeyInput {
  campaignId: ID
  mode: MODE
}

input ModelCampaignAuditTrailConditionInput {
  and: [ModelCampaignAuditTrailConditionInput]
  approverId: ModelIDInput
  campaignId: ModelIDInput
  not: ModelCampaignAuditTrailConditionInput
  note: ModelStringInput
  or: [ModelCampaignAuditTrailConditionInput]
  senderId: ModelIDInput
  status: ModelCampaignStatusInput
}

input ModelCampaignAuditTrailFilterInput {
  and: [ModelCampaignAuditTrailFilterInput]
  approverId: ModelIDInput
  auditTrailId: ModelIDInput
  campaignId: ModelIDInput
  enterpriseId: ModelIDInput
  mode: ModelMODEInput
  not: ModelCampaignAuditTrailFilterInput
  note: ModelStringInput
  or: [ModelCampaignAuditTrailFilterInput]
  senderId: ModelIDInput
  status: ModelCampaignStatusInput
}

input ModelCampaignAuditTrailPrimaryCompositeKeyConditionInput {
  beginsWith: ModelCampaignAuditTrailPrimaryCompositeKeyInput
  between: [ModelCampaignAuditTrailPrimaryCompositeKeyInput]
  eq: ModelCampaignAuditTrailPrimaryCompositeKeyInput
  ge: ModelCampaignAuditTrailPrimaryCompositeKeyInput
  gt: ModelCampaignAuditTrailPrimaryCompositeKeyInput
  le: ModelCampaignAuditTrailPrimaryCompositeKeyInput
  lt: ModelCampaignAuditTrailPrimaryCompositeKeyInput
}

input ModelCampaignAuditTrailPrimaryCompositeKeyInput {
  auditTrailId: ID
  mode: MODE
}

input ModelCampaignCampaignsByModeCompositeKeyConditionInput {
  beginsWith: ModelCampaignCampaignsByModeCompositeKeyInput
  between: [ModelCampaignCampaignsByModeCompositeKeyInput]
  eq: ModelCampaignCampaignsByModeCompositeKeyInput
  ge: ModelCampaignCampaignsByModeCompositeKeyInput
  gt: ModelCampaignCampaignsByModeCompositeKeyInput
  le: ModelCampaignCampaignsByModeCompositeKeyInput
  lt: ModelCampaignCampaignsByModeCompositeKeyInput
}

input ModelCampaignCampaignsByModeCompositeKeyInput {
  mode: MODE
  scheduleTime: String
}

input ModelCampaignCampaignsByRecurringCampaignIdCompositeKeyConditionInput {
  beginsWith: ModelCampaignCampaignsByRecurringCampaignIdCompositeKeyInput
  between: [ModelCampaignCampaignsByRecurringCampaignIdCompositeKeyInput]
  eq: ModelCampaignCampaignsByRecurringCampaignIdCompositeKeyInput
  ge: ModelCampaignCampaignsByRecurringCampaignIdCompositeKeyInput
  gt: ModelCampaignCampaignsByRecurringCampaignIdCompositeKeyInput
  le: ModelCampaignCampaignsByRecurringCampaignIdCompositeKeyInput
  lt: ModelCampaignCampaignsByRecurringCampaignIdCompositeKeyInput
}

input ModelCampaignCampaignsByRecurringCampaignIdCompositeKeyInput {
  mode: MODE
  recurringCampaignId: ID
}

input ModelCampaignConditionInput {
  advancedConfig: ModelStringInput
  and: [ModelCampaignConditionInput]
  averageOrderValue: ModelStringInput
  createdById: ModelIDInput
  flowId: ModelIDInput
  integrationId: ModelIDInput
  isHidden: ModelBooleanInput
  language: ModelStringInput
  lastResponseSyncTime: ModelStringInput
  marketingCost: ModelStringInput
  name: ModelStringInput
  not: ModelCampaignConditionInput
  or: [ModelCampaignConditionInput]
  recurringCampaignId: ModelIDInput
  responseSyncStatus: ModelResponseSyncStatusInput
  scheduleTime: ModelStringInput
  segment: ModelStringInput
  status: ModelCampaignStatusInput
  type: ModelStringInput
  variables: ModelStringInput
  workflowId: ModelIDInput
  workflowStepsId: ModelIDInput
}

input ModelCampaignContactGroupCampaignContactGroupByCampaignIdCompositeKeyConditionInput {
  beginsWith: ModelCampaignContactGroupCampaignContactGroupByCampaignIdCompositeKeyInput
  between: [ModelCampaignContactGroupCampaignContactGroupByCampaignIdCompositeKeyInput]
  eq: ModelCampaignContactGroupCampaignContactGroupByCampaignIdCompositeKeyInput
  ge: ModelCampaignContactGroupCampaignContactGroupByCampaignIdCompositeKeyInput
  gt: ModelCampaignContactGroupCampaignContactGroupByCampaignIdCompositeKeyInput
  le: ModelCampaignContactGroupCampaignContactGroupByCampaignIdCompositeKeyInput
  lt: ModelCampaignContactGroupCampaignContactGroupByCampaignIdCompositeKeyInput
}

input ModelCampaignContactGroupCampaignContactGroupByCampaignIdCompositeKeyInput {
  campaignId: ID
  mode: MODE
}

input ModelCampaignContactGroupConditionInput {
  and: [ModelCampaignContactGroupConditionInput]
  not: ModelCampaignContactGroupConditionInput
  or: [ModelCampaignContactGroupConditionInput]
}

input ModelCampaignContactGroupContactGroupCampaignByContactGroupIdCompositeKeyConditionInput {
  beginsWith: ModelCampaignContactGroupContactGroupCampaignByContactGroupIdCompositeKeyInput
  between: [ModelCampaignContactGroupContactGroupCampaignByContactGroupIdCompositeKeyInput]
  eq: ModelCampaignContactGroupContactGroupCampaignByContactGroupIdCompositeKeyInput
  ge: ModelCampaignContactGroupContactGroupCampaignByContactGroupIdCompositeKeyInput
  gt: ModelCampaignContactGroupContactGroupCampaignByContactGroupIdCompositeKeyInput
  le: ModelCampaignContactGroupContactGroupCampaignByContactGroupIdCompositeKeyInput
  lt: ModelCampaignContactGroupContactGroupCampaignByContactGroupIdCompositeKeyInput
}

input ModelCampaignContactGroupContactGroupCampaignByContactGroupIdCompositeKeyInput {
  contactGroupId: ID
  mode: MODE
}

input ModelCampaignContactGroupFilterInput {
  and: [ModelCampaignContactGroupFilterInput]
  campaignId: ModelIDInput
  contactGroupId: ModelIDInput
  enterpriseId: ModelIDInput
  mode: ModelMODEInput
  not: ModelCampaignContactGroupFilterInput
  or: [ModelCampaignContactGroupFilterInput]
}

input ModelCampaignContactGroupPrimaryCompositeKeyConditionInput {
  beginsWith: ModelCampaignContactGroupPrimaryCompositeKeyInput
  between: [ModelCampaignContactGroupPrimaryCompositeKeyInput]
  eq: ModelCampaignContactGroupPrimaryCompositeKeyInput
  ge: ModelCampaignContactGroupPrimaryCompositeKeyInput
  gt: ModelCampaignContactGroupPrimaryCompositeKeyInput
  le: ModelCampaignContactGroupPrimaryCompositeKeyInput
  lt: ModelCampaignContactGroupPrimaryCompositeKeyInput
}

input ModelCampaignContactGroupPrimaryCompositeKeyInput {
  campaignId: ID
  contactGroupId: ID
  mode: MODE
}

input ModelCampaignFilterInput {
  advancedConfig: ModelStringInput
  and: [ModelCampaignFilterInput]
  averageOrderValue: ModelStringInput
  campaignId: ModelIDInput
  createdById: ModelIDInput
  enterpriseId: ModelIDInput
  flowId: ModelIDInput
  integrationId: ModelIDInput
  isHidden: ModelBooleanInput
  language: ModelStringInput
  lastResponseSyncTime: ModelStringInput
  marketingCost: ModelStringInput
  mode: ModelMODEInput
  name: ModelStringInput
  not: ModelCampaignFilterInput
  or: [ModelCampaignFilterInput]
  recurringCampaignId: ModelIDInput
  responseSyncStatus: ModelResponseSyncStatusInput
  scheduleTime: ModelStringInput
  segment: ModelStringInput
  status: ModelCampaignStatusInput
  type: ModelStringInput
  variables: ModelStringInput
  workflowId: ModelIDInput
  workflowStepsId: ModelIDInput
}

input ModelCampaignMessageCampaignMessageByCustomerAndStatusCompositeKeyConditionInput {
  beginsWith: ModelCampaignMessageCampaignMessageByCustomerAndStatusCompositeKeyInput
  between: [ModelCampaignMessageCampaignMessageByCustomerAndStatusCompositeKeyInput]
  eq: ModelCampaignMessageCampaignMessageByCustomerAndStatusCompositeKeyInput
  ge: ModelCampaignMessageCampaignMessageByCustomerAndStatusCompositeKeyInput
  gt: ModelCampaignMessageCampaignMessageByCustomerAndStatusCompositeKeyInput
  le: ModelCampaignMessageCampaignMessageByCustomerAndStatusCompositeKeyInput
  lt: ModelCampaignMessageCampaignMessageByCustomerAndStatusCompositeKeyInput
}

input ModelCampaignMessageCampaignMessageByCustomerAndStatusCompositeKeyInput {
  customerId: ID
  mode: MODE
  status: CampaignMessageStatus
}

input ModelCampaignMessageCampaignMessageByCustomerIdCompositeKeyConditionInput {
  beginsWith: ModelCampaignMessageCampaignMessageByCustomerIdCompositeKeyInput
  between: [ModelCampaignMessageCampaignMessageByCustomerIdCompositeKeyInput]
  eq: ModelCampaignMessageCampaignMessageByCustomerIdCompositeKeyInput
  ge: ModelCampaignMessageCampaignMessageByCustomerIdCompositeKeyInput
  gt: ModelCampaignMessageCampaignMessageByCustomerIdCompositeKeyInput
  le: ModelCampaignMessageCampaignMessageByCustomerIdCompositeKeyInput
  lt: ModelCampaignMessageCampaignMessageByCustomerIdCompositeKeyInput
}

input ModelCampaignMessageCampaignMessageByCustomerIdCompositeKeyInput {
  customerId: ID
  mode: MODE
}

input ModelCampaignMessageCampaignMessageByStatusByEnterpriseIdCompositeKeyConditionInput {
  beginsWith: ModelCampaignMessageCampaignMessageByStatusByEnterpriseIdCompositeKeyInput
  between: [ModelCampaignMessageCampaignMessageByStatusByEnterpriseIdCompositeKeyInput]
  eq: ModelCampaignMessageCampaignMessageByStatusByEnterpriseIdCompositeKeyInput
  ge: ModelCampaignMessageCampaignMessageByStatusByEnterpriseIdCompositeKeyInput
  gt: ModelCampaignMessageCampaignMessageByStatusByEnterpriseIdCompositeKeyInput
  le: ModelCampaignMessageCampaignMessageByStatusByEnterpriseIdCompositeKeyInput
  lt: ModelCampaignMessageCampaignMessageByStatusByEnterpriseIdCompositeKeyInput
}

input ModelCampaignMessageCampaignMessageByStatusByEnterpriseIdCompositeKeyInput {
  campaignId: ID
  mode: MODE
  status: CampaignMessageStatus
}

input ModelCampaignMessageCampaignMessagesByCampaignIdCompositeKeyConditionInput {
  beginsWith: ModelCampaignMessageCampaignMessagesByCampaignIdCompositeKeyInput
  between: [ModelCampaignMessageCampaignMessagesByCampaignIdCompositeKeyInput]
  eq: ModelCampaignMessageCampaignMessagesByCampaignIdCompositeKeyInput
  ge: ModelCampaignMessageCampaignMessagesByCampaignIdCompositeKeyInput
  gt: ModelCampaignMessageCampaignMessagesByCampaignIdCompositeKeyInput
  le: ModelCampaignMessageCampaignMessagesByCampaignIdCompositeKeyInput
  lt: ModelCampaignMessageCampaignMessagesByCampaignIdCompositeKeyInput
}

input ModelCampaignMessageCampaignMessagesByCampaignIdCompositeKeyInput {
  campaignId: ID
  mode: MODE
}

input ModelCampaignMessageConditionInput {
  and: [ModelCampaignMessageConditionInput]
  campaignId: ModelIDInput
  channel: ModelCHANNELInput
  createdAt: ModelStringInput
  customerId: ModelIDInput
  isForApproval: ModelBooleanInput
  meta: ModelStringInput
  not: ModelCampaignMessageConditionInput
  or: [ModelCampaignMessageConditionInput]
  retryCount: ModelIntInput
  scheduleTime: ModelStringInput
  sessionId: ModelIDInput
  status: ModelCampaignMessageStatusInput
  timeToRespond: ModelIntInput
  updatedAt: ModelStringInput
}

input ModelCampaignMessageFilterInput {
  and: [ModelCampaignMessageFilterInput]
  campaignId: ModelIDInput
  campaignMessageId: ModelIDInput
  channel: ModelCHANNELInput
  createdAt: ModelStringInput
  customerId: ModelIDInput
  enterpriseId: ModelIDInput
  isForApproval: ModelBooleanInput
  meta: ModelStringInput
  mode: ModelMODEInput
  not: ModelCampaignMessageFilterInput
  or: [ModelCampaignMessageFilterInput]
  retryCount: ModelIntInput
  scheduleTime: ModelStringInput
  sessionId: ModelIDInput
  status: ModelCampaignMessageStatusInput
  timeToRespond: ModelIntInput
  updatedAt: ModelStringInput
}

input ModelCampaignMessagePrimaryCompositeKeyConditionInput {
  beginsWith: ModelCampaignMessagePrimaryCompositeKeyInput
  between: [ModelCampaignMessagePrimaryCompositeKeyInput]
  eq: ModelCampaignMessagePrimaryCompositeKeyInput
  ge: ModelCampaignMessagePrimaryCompositeKeyInput
  gt: ModelCampaignMessagePrimaryCompositeKeyInput
  le: ModelCampaignMessagePrimaryCompositeKeyInput
  lt: ModelCampaignMessagePrimaryCompositeKeyInput
}

input ModelCampaignMessagePrimaryCompositeKeyInput {
  campaignMessageId: ID
  mode: MODE
}

input ModelCampaignMessageStatusInput {
  eq: CampaignMessageStatus
  ne: CampaignMessageStatus
}

input ModelCampaignPrimaryCompositeKeyConditionInput {
  beginsWith: ModelCampaignPrimaryCompositeKeyInput
  between: [ModelCampaignPrimaryCompositeKeyInput]
  eq: ModelCampaignPrimaryCompositeKeyInput
  ge: ModelCampaignPrimaryCompositeKeyInput
  gt: ModelCampaignPrimaryCompositeKeyInput
  le: ModelCampaignPrimaryCompositeKeyInput
  lt: ModelCampaignPrimaryCompositeKeyInput
}

input ModelCampaignPrimaryCompositeKeyInput {
  campaignId: ID
  mode: MODE
}

input ModelCampaignStatusInput {
  eq: CampaignStatus
  ne: CampaignStatus
}

input ModelCatalogueCatalogueByMetaCatalogueIdCompositeKeyConditionInput {
  beginsWith: ModelCatalogueCatalogueByMetaCatalogueIdCompositeKeyInput
  between: [ModelCatalogueCatalogueByMetaCatalogueIdCompositeKeyInput]
  eq: ModelCatalogueCatalogueByMetaCatalogueIdCompositeKeyInput
  ge: ModelCatalogueCatalogueByMetaCatalogueIdCompositeKeyInput
  gt: ModelCatalogueCatalogueByMetaCatalogueIdCompositeKeyInput
  le: ModelCatalogueCatalogueByMetaCatalogueIdCompositeKeyInput
  lt: ModelCatalogueCatalogueByMetaCatalogueIdCompositeKeyInput
}

input ModelCatalogueCatalogueByMetaCatalogueIdCompositeKeyInput {
  metaCatalogueId: ID
  mode: MODE
}

input ModelCatalogueConditionInput {
  and: [ModelCatalogueConditionInput]
  countryOfOrigin: ModelStringInput
  description: ModelStringInput
  hide: ModelBooleanInput
  images: ModelStringInput
  integrationId: ModelIDInput
  itemCode: ModelStringInput
  link: ModelStringInput
  metaCatalogueId: ModelIDInput
  name: ModelStringInput
  not: ModelCatalogueConditionInput
  or: [ModelCatalogueConditionInput]
  otherAttributes: ModelStringInput
  price: ModelStringInput
  retailerId: ModelStringInput
  updatedAt: ModelStringInput
}

input ModelCatalogueFilterInput {
  and: [ModelCatalogueFilterInput]
  catalogueId: ModelIDInput
  countryOfOrigin: ModelStringInput
  description: ModelStringInput
  enterpriseId: ModelIDInput
  hide: ModelBooleanInput
  images: ModelStringInput
  integrationId: ModelIDInput
  itemCode: ModelStringInput
  link: ModelStringInput
  metaCatalogueId: ModelIDInput
  mode: ModelMODEInput
  name: ModelStringInput
  not: ModelCatalogueFilterInput
  or: [ModelCatalogueFilterInput]
  otherAttributes: ModelStringInput
  price: ModelStringInput
  retailerId: ModelStringInput
  updatedAt: ModelStringInput
}

input ModelCataloguePrimaryCompositeKeyConditionInput {
  beginsWith: ModelCataloguePrimaryCompositeKeyInput
  between: [ModelCataloguePrimaryCompositeKeyInput]
  eq: ModelCataloguePrimaryCompositeKeyInput
  ge: ModelCataloguePrimaryCompositeKeyInput
  gt: ModelCataloguePrimaryCompositeKeyInput
  le: ModelCataloguePrimaryCompositeKeyInput
  lt: ModelCataloguePrimaryCompositeKeyInput
}

input ModelCataloguePrimaryCompositeKeyInput {
  catalogueId: ID
  mode: MODE
}

input ModelCloudFunctionsCloudFunctionsByWorkspaceIdCompositeKeyConditionInput {
  beginsWith: ModelCloudFunctionsCloudFunctionsByWorkspaceIdCompositeKeyInput
  between: [ModelCloudFunctionsCloudFunctionsByWorkspaceIdCompositeKeyInput]
  eq: ModelCloudFunctionsCloudFunctionsByWorkspaceIdCompositeKeyInput
  ge: ModelCloudFunctionsCloudFunctionsByWorkspaceIdCompositeKeyInput
  gt: ModelCloudFunctionsCloudFunctionsByWorkspaceIdCompositeKeyInput
  le: ModelCloudFunctionsCloudFunctionsByWorkspaceIdCompositeKeyInput
  lt: ModelCloudFunctionsCloudFunctionsByWorkspaceIdCompositeKeyInput
}

input ModelCloudFunctionsCloudFunctionsByWorkspaceIdCompositeKeyInput {
  mode: MODE
  workspaceId: ID
}

input ModelCloudFunctionsConditionInput {
  and: [ModelCloudFunctionsConditionInput]
  code: ModelStringInput
  functionARN: ModelStringInput
  functionName: ModelStringInput
  functionURL: ModelStringInput
  name: ModelStringInput
  not: ModelCloudFunctionsConditionInput
  or: [ModelCloudFunctionsConditionInput]
  type: ModelStringInput
  workspaceId: ModelIDInput
}

input ModelCloudFunctionsFilterInput {
  and: [ModelCloudFunctionsFilterInput]
  cloudFunctionsId: ModelIDInput
  code: ModelStringInput
  enterpriseId: ModelIDInput
  functionARN: ModelStringInput
  functionName: ModelStringInput
  functionURL: ModelStringInput
  mode: ModelMODEInput
  name: ModelStringInput
  not: ModelCloudFunctionsFilterInput
  or: [ModelCloudFunctionsFilterInput]
  type: ModelStringInput
  workspaceId: ModelIDInput
}

input ModelCloudFunctionsPrimaryCompositeKeyConditionInput {
  beginsWith: ModelCloudFunctionsPrimaryCompositeKeyInput
  between: [ModelCloudFunctionsPrimaryCompositeKeyInput]
  eq: ModelCloudFunctionsPrimaryCompositeKeyInput
  ge: ModelCloudFunctionsPrimaryCompositeKeyInput
  gt: ModelCloudFunctionsPrimaryCompositeKeyInput
  le: ModelCloudFunctionsPrimaryCompositeKeyInput
  lt: ModelCloudFunctionsPrimaryCompositeKeyInput
}

input ModelCloudFunctionsPrimaryCompositeKeyInput {
  cloudFunctionsId: ID
  mode: MODE
}

input ModelCollectionCatalogueCatalogueCollectionByCatalogueIdCompositeKeyConditionInput {
  beginsWith: ModelCollectionCatalogueCatalogueCollectionByCatalogueIdCompositeKeyInput
  between: [ModelCollectionCatalogueCatalogueCollectionByCatalogueIdCompositeKeyInput]
  eq: ModelCollectionCatalogueCatalogueCollectionByCatalogueIdCompositeKeyInput
  ge: ModelCollectionCatalogueCatalogueCollectionByCatalogueIdCompositeKeyInput
  gt: ModelCollectionCatalogueCatalogueCollectionByCatalogueIdCompositeKeyInput
  le: ModelCollectionCatalogueCatalogueCollectionByCatalogueIdCompositeKeyInput
  lt: ModelCollectionCatalogueCatalogueCollectionByCatalogueIdCompositeKeyInput
}

input ModelCollectionCatalogueCatalogueCollectionByCatalogueIdCompositeKeyInput {
  catalogueId: ID
  mode: MODE
}

input ModelCollectionCatalogueCatalogueCollectionByCollectionIdCompositeKeyConditionInput {
  beginsWith: ModelCollectionCatalogueCatalogueCollectionByCollectionIdCompositeKeyInput
  between: [ModelCollectionCatalogueCatalogueCollectionByCollectionIdCompositeKeyInput]
  eq: ModelCollectionCatalogueCatalogueCollectionByCollectionIdCompositeKeyInput
  ge: ModelCollectionCatalogueCatalogueCollectionByCollectionIdCompositeKeyInput
  gt: ModelCollectionCatalogueCatalogueCollectionByCollectionIdCompositeKeyInput
  le: ModelCollectionCatalogueCatalogueCollectionByCollectionIdCompositeKeyInput
  lt: ModelCollectionCatalogueCatalogueCollectionByCollectionIdCompositeKeyInput
}

input ModelCollectionCatalogueCatalogueCollectionByCollectionIdCompositeKeyInput {
  collectionId: ID
  mode: MODE
}

input ModelCollectionCatalogueConditionInput {
  and: [ModelCollectionCatalogueConditionInput]
  not: ModelCollectionCatalogueConditionInput
  or: [ModelCollectionCatalogueConditionInput]
}

input ModelCollectionCatalogueFilterInput {
  and: [ModelCollectionCatalogueFilterInput]
  catalogueId: ModelIDInput
  collectionId: ModelIDInput
  enterpriseId: ModelIDInput
  mode: ModelMODEInput
  not: ModelCollectionCatalogueFilterInput
  or: [ModelCollectionCatalogueFilterInput]
}

input ModelCollectionCataloguePrimaryCompositeKeyConditionInput {
  beginsWith: ModelCollectionCataloguePrimaryCompositeKeyInput
  between: [ModelCollectionCataloguePrimaryCompositeKeyInput]
  eq: ModelCollectionCataloguePrimaryCompositeKeyInput
  ge: ModelCollectionCataloguePrimaryCompositeKeyInput
  gt: ModelCollectionCataloguePrimaryCompositeKeyInput
  le: ModelCollectionCataloguePrimaryCompositeKeyInput
  lt: ModelCollectionCataloguePrimaryCompositeKeyInput
}

input ModelCollectionCataloguePrimaryCompositeKeyInput {
  catalogueId: ID
  collectionId: ID
  mode: MODE
}

input ModelCollectionCollectionByMetaCatalogueIdCompositeKeyConditionInput {
  beginsWith: ModelCollectionCollectionByMetaCatalogueIdCompositeKeyInput
  between: [ModelCollectionCollectionByMetaCatalogueIdCompositeKeyInput]
  eq: ModelCollectionCollectionByMetaCatalogueIdCompositeKeyInput
  ge: ModelCollectionCollectionByMetaCatalogueIdCompositeKeyInput
  gt: ModelCollectionCollectionByMetaCatalogueIdCompositeKeyInput
  le: ModelCollectionCollectionByMetaCatalogueIdCompositeKeyInput
  lt: ModelCollectionCollectionByMetaCatalogueIdCompositeKeyInput
}

input ModelCollectionCollectionByMetaCatalogueIdCompositeKeyInput {
  metaCatalogueId: ID
  mode: MODE
}

input ModelCollectionConditionInput {
  and: [ModelCollectionConditionInput]
  metaCatalogueId: ModelIDInput
  not: ModelCollectionConditionInput
  or: [ModelCollectionConditionInput]
  status: ModelStringInput
  title: ModelStringInput
}

input ModelCollectionFilterInput {
  and: [ModelCollectionFilterInput]
  collectionId: ModelIDInput
  enterpriseId: ModelIDInput
  metaCatalogueId: ModelIDInput
  mode: ModelMODEInput
  not: ModelCollectionFilterInput
  or: [ModelCollectionFilterInput]
  status: ModelStringInput
  title: ModelStringInput
}

input ModelCollectionPrimaryCompositeKeyConditionInput {
  beginsWith: ModelCollectionPrimaryCompositeKeyInput
  between: [ModelCollectionPrimaryCompositeKeyInput]
  eq: ModelCollectionPrimaryCompositeKeyInput
  ge: ModelCollectionPrimaryCompositeKeyInput
  gt: ModelCollectionPrimaryCompositeKeyInput
  le: ModelCollectionPrimaryCompositeKeyInput
  lt: ModelCollectionPrimaryCompositeKeyInput
}

input ModelCollectionPrimaryCompositeKeyInput {
  collectionId: ID
  mode: MODE
}

input ModelContactGroupConditionInput {
  and: [ModelContactGroupConditionInput]
  contactListSource: ModelStringInput
  dynamic: ModelBooleanInput
  linkedAppId: ModelIDInput
  name: ModelStringInput
  not: ModelContactGroupConditionInput
  or: [ModelContactGroupConditionInput]
  updatedAt: ModelStringInput
}

input ModelContactGroupFilterInput {
  and: [ModelContactGroupFilterInput]
  contactGroupId: ModelIDInput
  contactListSource: ModelStringInput
  dynamic: ModelBooleanInput
  enterpriseId: ModelIDInput
  linkedAppId: ModelIDInput
  mode: ModelMODEInput
  name: ModelStringInput
  not: ModelContactGroupFilterInput
  or: [ModelContactGroupFilterInput]
  updatedAt: ModelStringInput
}

input ModelContactGroupPrimaryCompositeKeyConditionInput {
  beginsWith: ModelContactGroupPrimaryCompositeKeyInput
  between: [ModelContactGroupPrimaryCompositeKeyInput]
  eq: ModelContactGroupPrimaryCompositeKeyInput
  ge: ModelContactGroupPrimaryCompositeKeyInput
  gt: ModelContactGroupPrimaryCompositeKeyInput
  le: ModelContactGroupPrimaryCompositeKeyInput
  lt: ModelContactGroupPrimaryCompositeKeyInput
}

input ModelContactGroupPrimaryCompositeKeyInput {
  contactGroupId: ID
  mode: MODE
}

input ModelConversationConditionInput {
  agentInfo: ModelStringInput
  and: [ModelConversationConditionInput]
  content: ModelStringInput
  createdAt: ModelStringInput
  createdBy: ModelASSIGNMENTInput
  customerId: ModelIDInput
  imagePath: ModelStringInput
  metadata: ModelStringInput
  not: ModelConversationConditionInput
  or: [ModelConversationConditionInput]
  senderId: ModelIDInput
  sessionId: ModelIDInput
}

input ModelConversationConversationByCustomerAndCreatedByCompositeKeyConditionInput {
  beginsWith: ModelConversationConversationByCustomerAndCreatedByCompositeKeyInput
  between: [ModelConversationConversationByCustomerAndCreatedByCompositeKeyInput]
  eq: ModelConversationConversationByCustomerAndCreatedByCompositeKeyInput
  ge: ModelConversationConversationByCustomerAndCreatedByCompositeKeyInput
  gt: ModelConversationConversationByCustomerAndCreatedByCompositeKeyInput
  le: ModelConversationConversationByCustomerAndCreatedByCompositeKeyInput
  lt: ModelConversationConversationByCustomerAndCreatedByCompositeKeyInput
}

input ModelConversationConversationByCustomerAndCreatedByCompositeKeyInput {
  createdBy: ASSIGNMENT
  customerId: ID
  mode: MODE
}

input ModelConversationFilterInput {
  agentInfo: ModelStringInput
  and: [ModelConversationFilterInput]
  content: ModelStringInput
  conversationId: ModelIDInput
  createdAt: ModelStringInput
  createdBy: ModelASSIGNMENTInput
  customerId: ModelIDInput
  enterpriseId: ModelIDInput
  imagePath: ModelStringInput
  metadata: ModelStringInput
  mode: ModelMODEInput
  not: ModelConversationFilterInput
  or: [ModelConversationFilterInput]
  senderId: ModelIDInput
  sessionId: ModelIDInput
}

input ModelConversationInfoConditionInput {
  analytics: ModelStringInput
  and: [ModelConversationInfoConditionInput]
  channelMessageId: ModelIDInput
  cumulativeLeadScore: ModelIntInput
  deliveredAt: ModelStringInput
  errorMessage: ModelStringInput
  leadScoreDiff: ModelIntInput
  not: ModelConversationInfoConditionInput
  or: [ModelConversationInfoConditionInput]
  pricing: ModelStringInput
  readAt: ModelStringInput
  submittedAt: ModelStringInput
  submittedToPartner: ModelStringInput
}

input ModelConversationInfoFilterInput {
  analytics: ModelStringInput
  and: [ModelConversationInfoFilterInput]
  channelMessageId: ModelIDInput
  conversationId: ModelIDInput
  cumulativeLeadScore: ModelIntInput
  deliveredAt: ModelStringInput
  enterpriseId: ModelIDInput
  errorMessage: ModelStringInput
  leadScoreDiff: ModelIntInput
  mode: ModelMODEInput
  not: ModelConversationInfoFilterInput
  or: [ModelConversationInfoFilterInput]
  pricing: ModelStringInput
  readAt: ModelStringInput
  submittedAt: ModelStringInput
  submittedToPartner: ModelStringInput
}

input ModelConversationInfoPrimaryCompositeKeyConditionInput {
  beginsWith: ModelConversationInfoPrimaryCompositeKeyInput
  between: [ModelConversationInfoPrimaryCompositeKeyInput]
  eq: ModelConversationInfoPrimaryCompositeKeyInput
  ge: ModelConversationInfoPrimaryCompositeKeyInput
  gt: ModelConversationInfoPrimaryCompositeKeyInput
  le: ModelConversationInfoPrimaryCompositeKeyInput
  lt: ModelConversationInfoPrimaryCompositeKeyInput
}

input ModelConversationInfoPrimaryCompositeKeyInput {
  conversationId: ID
  mode: MODE
}

input ModelConversationPrimaryCompositeKeyConditionInput {
  beginsWith: ModelConversationPrimaryCompositeKeyInput
  between: [ModelConversationPrimaryCompositeKeyInput]
  eq: ModelConversationPrimaryCompositeKeyInput
  ge: ModelConversationPrimaryCompositeKeyInput
  gt: ModelConversationPrimaryCompositeKeyInput
  le: ModelConversationPrimaryCompositeKeyInput
  lt: ModelConversationPrimaryCompositeKeyInput
}

input ModelConversationPrimaryCompositeKeyInput {
  conversationId: ID
  mode: MODE
}

input ModelCustomerConditionInput {
  and: [ModelCustomerConditionInput]
  blacklistReason: ModelStringInput
  blacklisted: ModelBooleanInput
  blacklistedAt: ModelStringInput
  createdAt: ModelStringInput
  email: ModelStringInput
  firstName: ModelStringInput
  lastName: ModelStringInput
  name: ModelStringInput
  not: ModelCustomerConditionInput
  or: [ModelCustomerConditionInput]
  parent: ModelSAASInput
  parentId: ModelStringInput
  tags: ModelStringInput
  updatedAt: ModelStringInput
  variables: ModelStringInput
}

input ModelCustomerContactGroupConditionInput {
  and: [ModelCustomerContactGroupConditionInput]
  blacklisted: ModelBooleanInput
  not: ModelCustomerContactGroupConditionInput
  or: [ModelCustomerContactGroupConditionInput]
  updatedAt: ModelStringInput
}

input ModelCustomerContactGroupContactGroupContactByContactGroupIdCompositeKeyConditionInput {
  beginsWith: ModelCustomerContactGroupContactGroupContactByContactGroupIdCompositeKeyInput
  between: [ModelCustomerContactGroupContactGroupContactByContactGroupIdCompositeKeyInput]
  eq: ModelCustomerContactGroupContactGroupContactByContactGroupIdCompositeKeyInput
  ge: ModelCustomerContactGroupContactGroupContactByContactGroupIdCompositeKeyInput
  gt: ModelCustomerContactGroupContactGroupContactByContactGroupIdCompositeKeyInput
  le: ModelCustomerContactGroupContactGroupContactByContactGroupIdCompositeKeyInput
  lt: ModelCustomerContactGroupContactGroupContactByContactGroupIdCompositeKeyInput
}

input ModelCustomerContactGroupContactGroupContactByContactGroupIdCompositeKeyInput {
  contactGroupId: ID
  mode: MODE
}

input ModelCustomerContactGroupCustomerContactGroupByCustomerIdCompositeKeyConditionInput {
  beginsWith: ModelCustomerContactGroupCustomerContactGroupByCustomerIdCompositeKeyInput
  between: [ModelCustomerContactGroupCustomerContactGroupByCustomerIdCompositeKeyInput]
  eq: ModelCustomerContactGroupCustomerContactGroupByCustomerIdCompositeKeyInput
  ge: ModelCustomerContactGroupCustomerContactGroupByCustomerIdCompositeKeyInput
  gt: ModelCustomerContactGroupCustomerContactGroupByCustomerIdCompositeKeyInput
  le: ModelCustomerContactGroupCustomerContactGroupByCustomerIdCompositeKeyInput
  lt: ModelCustomerContactGroupCustomerContactGroupByCustomerIdCompositeKeyInput
}

input ModelCustomerContactGroupCustomerContactGroupByCustomerIdCompositeKeyInput {
  customerId: ID
  mode: MODE
}

input ModelCustomerContactGroupFilterInput {
  and: [ModelCustomerContactGroupFilterInput]
  blacklisted: ModelBooleanInput
  contactGroupId: ModelIDInput
  customerId: ModelIDInput
  enterpriseId: ModelIDInput
  mode: ModelMODEInput
  not: ModelCustomerContactGroupFilterInput
  or: [ModelCustomerContactGroupFilterInput]
  updatedAt: ModelStringInput
}

input ModelCustomerContactGroupPrimaryCompositeKeyConditionInput {
  beginsWith: ModelCustomerContactGroupPrimaryCompositeKeyInput
  between: [ModelCustomerContactGroupPrimaryCompositeKeyInput]
  eq: ModelCustomerContactGroupPrimaryCompositeKeyInput
  ge: ModelCustomerContactGroupPrimaryCompositeKeyInput
  gt: ModelCustomerContactGroupPrimaryCompositeKeyInput
  le: ModelCustomerContactGroupPrimaryCompositeKeyInput
  lt: ModelCustomerContactGroupPrimaryCompositeKeyInput
}

input ModelCustomerContactGroupPrimaryCompositeKeyInput {
  contactGroupId: ID
  customerId: ID
  mode: MODE
}

input ModelCustomerFilterInput {
  and: [ModelCustomerFilterInput]
  blacklistReason: ModelStringInput
  blacklisted: ModelBooleanInput
  blacklistedAt: ModelStringInput
  createdAt: ModelStringInput
  customerId: ModelIDInput
  email: ModelStringInput
  enterpriseId: ModelIDInput
  firstName: ModelStringInput
  lastName: ModelStringInput
  mode: ModelMODEInput
  name: ModelStringInput
  not: ModelCustomerFilterInput
  or: [ModelCustomerFilterInput]
  parent: ModelSAASInput
  parentId: ModelStringInput
  tags: ModelStringInput
  updatedAt: ModelStringInput
  variables: ModelStringInput
}

input ModelCustomerPrimaryCompositeKeyConditionInput {
  beginsWith: ModelCustomerPrimaryCompositeKeyInput
  between: [ModelCustomerPrimaryCompositeKeyInput]
  eq: ModelCustomerPrimaryCompositeKeyInput
  ge: ModelCustomerPrimaryCompositeKeyInput
  gt: ModelCustomerPrimaryCompositeKeyInput
  le: ModelCustomerPrimaryCompositeKeyInput
  lt: ModelCustomerPrimaryCompositeKeyInput
}

input ModelCustomerPrimaryCompositeKeyInput {
  customerId: ID
  mode: MODE
}

input ModelDatabaseSchemaConditionInput {
  and: [ModelDatabaseSchemaConditionInput]
  config: ModelStringInput
  description: ModelStringInput
  key: ModelStringInput
  not: ModelDatabaseSchemaConditionInput
  or: [ModelDatabaseSchemaConditionInput]
  schema: ModelStringInput
  timeFilterField: ModelStringInput
  workspaceId: ModelIDInput
}

input ModelDatabaseSchemaDatabaseSchemaByWorkspaceIdCompositeKeyConditionInput {
  beginsWith: ModelDatabaseSchemaDatabaseSchemaByWorkspaceIdCompositeKeyInput
  between: [ModelDatabaseSchemaDatabaseSchemaByWorkspaceIdCompositeKeyInput]
  eq: ModelDatabaseSchemaDatabaseSchemaByWorkspaceIdCompositeKeyInput
  ge: ModelDatabaseSchemaDatabaseSchemaByWorkspaceIdCompositeKeyInput
  gt: ModelDatabaseSchemaDatabaseSchemaByWorkspaceIdCompositeKeyInput
  le: ModelDatabaseSchemaDatabaseSchemaByWorkspaceIdCompositeKeyInput
  lt: ModelDatabaseSchemaDatabaseSchemaByWorkspaceIdCompositeKeyInput
}

input ModelDatabaseSchemaDatabaseSchemaByWorkspaceIdCompositeKeyInput {
  mode: MODE
  workspaceId: ID
}

input ModelDatabaseSchemaFilterInput {
  and: [ModelDatabaseSchemaFilterInput]
  config: ModelStringInput
  databaseSchemaId: ModelIDInput
  description: ModelStringInput
  enterpriseId: ModelIDInput
  key: ModelStringInput
  mode: ModelMODEInput
  not: ModelDatabaseSchemaFilterInput
  or: [ModelDatabaseSchemaFilterInput]
  schema: ModelStringInput
  timeFilterField: ModelStringInput
  workspaceId: ModelIDInput
}

input ModelDatabaseSchemaPrimaryCompositeKeyConditionInput {
  beginsWith: ModelDatabaseSchemaPrimaryCompositeKeyInput
  between: [ModelDatabaseSchemaPrimaryCompositeKeyInput]
  eq: ModelDatabaseSchemaPrimaryCompositeKeyInput
  ge: ModelDatabaseSchemaPrimaryCompositeKeyInput
  gt: ModelDatabaseSchemaPrimaryCompositeKeyInput
  le: ModelDatabaseSchemaPrimaryCompositeKeyInput
  lt: ModelDatabaseSchemaPrimaryCompositeKeyInput
}

input ModelDatabaseSchemaPrimaryCompositeKeyInput {
  databaseSchemaId: ID
  mode: MODE
}

input ModelDatabaseValuesConditionInput {
  and: [ModelDatabaseValuesConditionInput]
  databaseSchemaId: ModelIDInput
  not: ModelDatabaseValuesConditionInput
  or: [ModelDatabaseValuesConditionInput]
  value: ModelStringInput
}

input ModelDatabaseValuesDatabaseValuesByDatabaseSchemaIdCompositeKeyConditionInput {
  beginsWith: ModelDatabaseValuesDatabaseValuesByDatabaseSchemaIdCompositeKeyInput
  between: [ModelDatabaseValuesDatabaseValuesByDatabaseSchemaIdCompositeKeyInput]
  eq: ModelDatabaseValuesDatabaseValuesByDatabaseSchemaIdCompositeKeyInput
  ge: ModelDatabaseValuesDatabaseValuesByDatabaseSchemaIdCompositeKeyInput
  gt: ModelDatabaseValuesDatabaseValuesByDatabaseSchemaIdCompositeKeyInput
  le: ModelDatabaseValuesDatabaseValuesByDatabaseSchemaIdCompositeKeyInput
  lt: ModelDatabaseValuesDatabaseValuesByDatabaseSchemaIdCompositeKeyInput
}

input ModelDatabaseValuesDatabaseValuesByDatabaseSchemaIdCompositeKeyInput {
  databaseSchemaId: ID
  mode: MODE
}

input ModelDatabaseValuesFilterInput {
  and: [ModelDatabaseValuesFilterInput]
  databaseSchemaId: ModelIDInput
  databaseValuesId: ModelIDInput
  enterpriseId: ModelIDInput
  mode: ModelMODEInput
  not: ModelDatabaseValuesFilterInput
  or: [ModelDatabaseValuesFilterInput]
  value: ModelStringInput
}

input ModelDatabaseValuesPrimaryCompositeKeyConditionInput {
  beginsWith: ModelDatabaseValuesPrimaryCompositeKeyInput
  between: [ModelDatabaseValuesPrimaryCompositeKeyInput]
  eq: ModelDatabaseValuesPrimaryCompositeKeyInput
  ge: ModelDatabaseValuesPrimaryCompositeKeyInput
  gt: ModelDatabaseValuesPrimaryCompositeKeyInput
  le: ModelDatabaseValuesPrimaryCompositeKeyInput
  lt: ModelDatabaseValuesPrimaryCompositeKeyInput
}

input ModelDatabaseValuesPrimaryCompositeKeyInput {
  databaseValuesId: ID
  mode: MODE
}

input ModelERROR_TYPEInput {
  eq: ERROR_TYPE
  ne: ERROR_TYPE
}

input ModelEnterpriseConditionInput {
  and: [ModelEnterpriseConditionInput]
  brandId: ModelStringInput
  contactAttributes: ModelStringInput
  isActive: ModelBooleanInput
  name: ModelStringInput
  not: ModelEnterpriseConditionInput
  onboarding: ModelBooleanInput
  or: [ModelEnterpriseConditionInput]
  organizationId: ModelIDInput
  variables: ModelStringInput
}

input ModelEnterpriseFilterInput {
  and: [ModelEnterpriseFilterInput]
  brandId: ModelStringInput
  contactAttributes: ModelStringInput
  enterpriseId: ModelIDInput
  isActive: ModelBooleanInput
  name: ModelStringInput
  not: ModelEnterpriseFilterInput
  onboarding: ModelBooleanInput
  or: [ModelEnterpriseFilterInput]
  organizationId: ModelIDInput
  variables: ModelStringInput
}

input ModelEntityConditionInput {
  and: [ModelEntityConditionInput]
  entityData: ModelStringInput
  language: ModelStringInput
  name: ModelStringInput
  not: ModelEntityConditionInput
  or: [ModelEntityConditionInput]
  resolutionStrategy: ModelStringInput
  slotTypeId: ModelIDInput
  type: ModelStringInput
  workspaceId: ModelIDInput
}

input ModelEntityEntityByWorkspaceIdCompositeKeyConditionInput {
  beginsWith: ModelEntityEntityByWorkspaceIdCompositeKeyInput
  between: [ModelEntityEntityByWorkspaceIdCompositeKeyInput]
  eq: ModelEntityEntityByWorkspaceIdCompositeKeyInput
  ge: ModelEntityEntityByWorkspaceIdCompositeKeyInput
  gt: ModelEntityEntityByWorkspaceIdCompositeKeyInput
  le: ModelEntityEntityByWorkspaceIdCompositeKeyInput
  lt: ModelEntityEntityByWorkspaceIdCompositeKeyInput
}

input ModelEntityEntityByWorkspaceIdCompositeKeyInput {
  mode: MODE
  workspaceId: ID
}

input ModelEntityFilterInput {
  and: [ModelEntityFilterInput]
  enterpriseId: ModelIDInput
  entityData: ModelStringInput
  entityId: ModelIDInput
  language: ModelStringInput
  mode: ModelMODEInput
  name: ModelStringInput
  not: ModelEntityFilterInput
  or: [ModelEntityFilterInput]
  resolutionStrategy: ModelStringInput
  slotTypeId: ModelIDInput
  type: ModelStringInput
  workspaceId: ModelIDInput
}

input ModelEntityPrimaryCompositeKeyConditionInput {
  beginsWith: ModelEntityPrimaryCompositeKeyInput
  between: [ModelEntityPrimaryCompositeKeyInput]
  eq: ModelEntityPrimaryCompositeKeyInput
  ge: ModelEntityPrimaryCompositeKeyInput
  gt: ModelEntityPrimaryCompositeKeyInput
  le: ModelEntityPrimaryCompositeKeyInput
  lt: ModelEntityPrimaryCompositeKeyInput
}

input ModelEntityPrimaryCompositeKeyInput {
  entityId: ID
  mode: MODE
}

input ModelEventLabelConditionInput {
  and: [ModelEventLabelConditionInput]
  campaignId: ModelStringInput
  createdAt: ModelStringInput
  flowId: ModelIDInput
  interactionId: ModelIDInput
  label: ModelStringInput
  nodeId: ModelIDInput
  not: ModelEventLabelConditionInput
  or: [ModelEventLabelConditionInput]
  previousLabel: ModelStringInput
  previousValue: ModelStringInput
  sessionId: ModelIDInput
  type: ModelEventLabelTypeInput
  updatedAt: ModelStringInput
  value: ModelStringInput
  workspaceId: ModelIDInput
}

input ModelEventLabelEventLabelsByCustomerIdCompositeKeyConditionInput {
  beginsWith: ModelEventLabelEventLabelsByCustomerIdCompositeKeyInput
  between: [ModelEventLabelEventLabelsByCustomerIdCompositeKeyInput]
  eq: ModelEventLabelEventLabelsByCustomerIdCompositeKeyInput
  ge: ModelEventLabelEventLabelsByCustomerIdCompositeKeyInput
  gt: ModelEventLabelEventLabelsByCustomerIdCompositeKeyInput
  le: ModelEventLabelEventLabelsByCustomerIdCompositeKeyInput
  lt: ModelEventLabelEventLabelsByCustomerIdCompositeKeyInput
}

input ModelEventLabelEventLabelsByCustomerIdCompositeKeyInput {
  customerId: ID
  mode: MODE
}

input ModelEventLabelEventLabelsBycustomerAndLabelCompositeKeyConditionInput {
  beginsWith: ModelEventLabelEventLabelsBycustomerAndLabelCompositeKeyInput
  between: [ModelEventLabelEventLabelsBycustomerAndLabelCompositeKeyInput]
  eq: ModelEventLabelEventLabelsBycustomerAndLabelCompositeKeyInput
  ge: ModelEventLabelEventLabelsBycustomerAndLabelCompositeKeyInput
  gt: ModelEventLabelEventLabelsBycustomerAndLabelCompositeKeyInput
  le: ModelEventLabelEventLabelsBycustomerAndLabelCompositeKeyInput
  lt: ModelEventLabelEventLabelsBycustomerAndLabelCompositeKeyInput
}

input ModelEventLabelEventLabelsBycustomerAndLabelCompositeKeyInput {
  customerId: ID
  label: String
  mode: MODE
}

input ModelEventLabelFilterInput {
  and: [ModelEventLabelFilterInput]
  campaignId: ModelStringInput
  conversationId: ModelIDInput
  createdAt: ModelStringInput
  customerId: ModelIDInput
  enterpriseId: ModelIDInput
  flowId: ModelIDInput
  interactionId: ModelIDInput
  label: ModelStringInput
  labelId: ModelIDInput
  mode: ModelMODEInput
  nodeId: ModelIDInput
  not: ModelEventLabelFilterInput
  or: [ModelEventLabelFilterInput]
  previousLabel: ModelStringInput
  previousValue: ModelStringInput
  sessionId: ModelIDInput
  type: ModelEventLabelTypeInput
  updatedAt: ModelStringInput
  value: ModelStringInput
  workspaceId: ModelIDInput
}

input ModelEventLabelPrimaryCompositeKeyConditionInput {
  beginsWith: ModelEventLabelPrimaryCompositeKeyInput
  between: [ModelEventLabelPrimaryCompositeKeyInput]
  eq: ModelEventLabelPrimaryCompositeKeyInput
  ge: ModelEventLabelPrimaryCompositeKeyInput
  gt: ModelEventLabelPrimaryCompositeKeyInput
  le: ModelEventLabelPrimaryCompositeKeyInput
  lt: ModelEventLabelPrimaryCompositeKeyInput
}

input ModelEventLabelPrimaryCompositeKeyInput {
  conversationId: ID
  customerId: ID
  labelId: ID
  mode: MODE
}

input ModelEventLabelTypeInput {
  eq: EventLabelType
  ne: EventLabelType
}

input ModelFEDERATED_ROLEInput {
  eq: FEDERATED_ROLE
  ne: FEDERATED_ROLE
}

input ModelFileManagerFilesConditionInput {
  and: [ModelFileManagerFilesConditionInput]
  description: ModelStringInput
  fileType: ModelStringInput
  isFavorite: ModelBooleanInput
  name: ModelStringInput
  nanoId: ModelStringInput
  not: ModelFileManagerFilesConditionInput
  or: [ModelFileManagerFilesConditionInput]
  size: ModelStringInput
  tags: ModelStringInput
  url: ModelStringInput
  workspaceId: ModelIDInput
}

input ModelFileManagerFilesFilterInput {
  and: [ModelFileManagerFilesFilterInput]
  description: ModelStringInput
  enterpriseId: ModelIDInput
  fileManagerFilesId: ModelIDInput
  fileType: ModelStringInput
  isFavorite: ModelBooleanInput
  name: ModelStringInput
  nanoId: ModelStringInput
  not: ModelFileManagerFilesFilterInput
  or: [ModelFileManagerFilesFilterInput]
  size: ModelStringInput
  tags: ModelStringInput
  url: ModelStringInput
  workspaceId: ModelIDInput
}

input ModelFloatInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  between: [Float]
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
}

input ModelFlowConditionInput {
  and: [ModelFlowConditionInput]
  campaignId: ModelIDInput
  designConfig: ModelStringInput
  fallbackId: ModelIDInput
  flowTemplateId: ModelIDInput
  idleId: ModelIDInput
  isImported: ModelBooleanInput
  isInbound: ModelBooleanInput
  name: ModelStringInput
  not: ModelFlowConditionInput
  or: [ModelFlowConditionInput]
  recurringCampaignId: ModelIDInput
  settings: ModelStringInput
  startId: ModelIDInput
  status: ModelBooleanInput
  workflowId: ModelIDInput
  workflowStepsId: ModelIDInput
  workspaceId: ModelIDInput
}

input ModelFlowFilterInput {
  and: [ModelFlowFilterInput]
  campaignId: ModelIDInput
  designConfig: ModelStringInput
  enterpriseId: ModelIDInput
  fallbackId: ModelIDInput
  flowId: ModelIDInput
  flowTemplateId: ModelIDInput
  idleId: ModelIDInput
  isImported: ModelBooleanInput
  isInbound: ModelBooleanInput
  mode: ModelMODEInput
  name: ModelStringInput
  not: ModelFlowFilterInput
  or: [ModelFlowFilterInput]
  recurringCampaignId: ModelIDInput
  settings: ModelStringInput
  startId: ModelIDInput
  status: ModelBooleanInput
  workflowId: ModelIDInput
  workflowStepsId: ModelIDInput
  workspaceId: ModelIDInput
}

input ModelFlowFlowByWorkspaceIdCompositeKeyConditionInput {
  beginsWith: ModelFlowFlowByWorkspaceIdCompositeKeyInput
  between: [ModelFlowFlowByWorkspaceIdCompositeKeyInput]
  eq: ModelFlowFlowByWorkspaceIdCompositeKeyInput
  ge: ModelFlowFlowByWorkspaceIdCompositeKeyInput
  gt: ModelFlowFlowByWorkspaceIdCompositeKeyInput
  le: ModelFlowFlowByWorkspaceIdCompositeKeyInput
  lt: ModelFlowFlowByWorkspaceIdCompositeKeyInput
}

input ModelFlowFlowByWorkspaceIdCompositeKeyInput {
  mode: MODE
  workspaceId: ID
}

input ModelFlowPrimaryCompositeKeyConditionInput {
  beginsWith: ModelFlowPrimaryCompositeKeyInput
  between: [ModelFlowPrimaryCompositeKeyInput]
  eq: ModelFlowPrimaryCompositeKeyInput
  ge: ModelFlowPrimaryCompositeKeyInput
  gt: ModelFlowPrimaryCompositeKeyInput
  le: ModelFlowPrimaryCompositeKeyInput
  lt: ModelFlowPrimaryCompositeKeyInput
}

input ModelFlowPrimaryCompositeKeyInput {
  flowId: ID
  mode: MODE
}

input ModelFlowTemplateConditionInput {
  and: [ModelFlowTemplateConditionInput]
  businessGoal: ModelStringInput
  channels: ModelStringInput
  flowId: ModelIDInput
  industry: ModelStringInput
  isPrivate: ModelBooleanInput
  not: ModelFlowTemplateConditionInput
  or: [ModelFlowTemplateConditionInput]
  templateData: ModelStringInput
  templateDescription: ModelStringInput
  templateIcon: ModelStringInput
  templateName: ModelStringInput
  workspaceId: ModelIDInput
}

input ModelFlowTemplateFilterInput {
  and: [ModelFlowTemplateFilterInput]
  businessGoal: ModelStringInput
  channels: ModelStringInput
  enterpriseId: ModelIDInput
  flowId: ModelIDInput
  flowTemplateId: ModelIDInput
  industry: ModelStringInput
  isPrivate: ModelBooleanInput
  mode: ModelMODEInput
  not: ModelFlowTemplateFilterInput
  or: [ModelFlowTemplateFilterInput]
  templateData: ModelStringInput
  templateDescription: ModelStringInput
  templateIcon: ModelStringInput
  templateName: ModelStringInput
  workspaceId: ModelIDInput
}

input ModelFlowTemplatePrimaryCompositeKeyConditionInput {
  beginsWith: ModelFlowTemplatePrimaryCompositeKeyInput
  between: [ModelFlowTemplatePrimaryCompositeKeyInput]
  eq: ModelFlowTemplatePrimaryCompositeKeyInput
  ge: ModelFlowTemplatePrimaryCompositeKeyInput
  gt: ModelFlowTemplatePrimaryCompositeKeyInput
  le: ModelFlowTemplatePrimaryCompositeKeyInput
  lt: ModelFlowTemplatePrimaryCompositeKeyInput
}

input ModelFlowTemplatePrimaryCompositeKeyInput {
  flowTemplateId: ID
  mode: MODE
}

input ModelHEALTH_STATUSInput {
  eq: HEALTH_STATUS
  ne: HEALTH_STATUS
}

input ModelHealthTableConditionInput {
  and: [ModelHealthTableConditionInput]
  channel: ModelCHANNELInput
  checkFlag: ModelIntInput
  config: ModelStringInput
  count: ModelIntInput
  createdAt: ModelStringInput
  description: ModelStringInput
  functionOrigin: ModelStringInput
  link: ModelStringInput
  nodeId: ModelIDInput
  not: ModelHealthTableConditionInput
  or: [ModelHealthTableConditionInput]
  read: ModelBooleanInput
  status: ModelHEALTH_STATUSInput
  subType: ModelStringInput
  title: ModelStringInput
  type: ModelERROR_TYPEInput
  updatedAt: ModelStringInput
  userId: ModelIDInput
}

input ModelHealthTableFilterInput {
  and: [ModelHealthTableFilterInput]
  channel: ModelCHANNELInput
  checkFlag: ModelIntInput
  config: ModelStringInput
  count: ModelIntInput
  createdAt: ModelStringInput
  description: ModelStringInput
  enterpriseId: ModelIDInput
  functionOrigin: ModelStringInput
  healthTableId: ModelIDInput
  link: ModelStringInput
  mode: ModelMODEInput
  nodeId: ModelIDInput
  not: ModelHealthTableFilterInput
  or: [ModelHealthTableFilterInput]
  read: ModelBooleanInput
  status: ModelHEALTH_STATUSInput
  subType: ModelStringInput
  title: ModelStringInput
  type: ModelERROR_TYPEInput
  updatedAt: ModelStringInput
  userId: ModelIDInput
}

input ModelHealthTablePrimaryCompositeKeyConditionInput {
  beginsWith: ModelHealthTablePrimaryCompositeKeyInput
  between: [ModelHealthTablePrimaryCompositeKeyInput]
  eq: ModelHealthTablePrimaryCompositeKeyInput
  ge: ModelHealthTablePrimaryCompositeKeyInput
  gt: ModelHealthTablePrimaryCompositeKeyInput
  le: ModelHealthTablePrimaryCompositeKeyInput
  lt: ModelHealthTablePrimaryCompositeKeyInput
}

input ModelHealthTablePrimaryCompositeKeyInput {
  healthTableId: ID
  mode: MODE
}

input ModelIDInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
  size: ModelSizeInput
}

input ModelIDKeyConditionInput {
  beginsWith: ID
  between: [ID]
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
}

input ModelIntInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  between: [Int]
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
}

input ModelIntegrationConditionInput {
  and: [ModelIntegrationConditionInput]
  channel: ModelCHANNELInput
  config: ModelStringInput
  details: ModelStringInput
  flowId: ModelIDInput
  logo: ModelStringInput
  metaCatalogueId: ModelIDInput
  name: ModelStringInput
  not: ModelIntegrationConditionInput
  number: ModelStringInput
  or: [ModelIntegrationConditionInput]
  primary: ModelBooleanInput
  saas: ModelSAASInput
  workspaceId: ModelIDInput
}

input ModelIntegrationFilterInput {
  and: [ModelIntegrationFilterInput]
  channel: ModelCHANNELInput
  config: ModelStringInput
  details: ModelStringInput
  enterpriseId: ModelIDInput
  flowId: ModelIDInput
  integrationId: ModelIDInput
  logo: ModelStringInput
  metaCatalogueId: ModelIDInput
  mode: ModelMODEInput
  name: ModelStringInput
  not: ModelIntegrationFilterInput
  number: ModelStringInput
  or: [ModelIntegrationFilterInput]
  primary: ModelBooleanInput
  saas: ModelSAASInput
  workspaceId: ModelIDInput
}

input ModelIntegrationIntegrationByFlowIdCompositeKeyConditionInput {
  beginsWith: ModelIntegrationIntegrationByFlowIdCompositeKeyInput
  between: [ModelIntegrationIntegrationByFlowIdCompositeKeyInput]
  eq: ModelIntegrationIntegrationByFlowIdCompositeKeyInput
  ge: ModelIntegrationIntegrationByFlowIdCompositeKeyInput
  gt: ModelIntegrationIntegrationByFlowIdCompositeKeyInput
  le: ModelIntegrationIntegrationByFlowIdCompositeKeyInput
  lt: ModelIntegrationIntegrationByFlowIdCompositeKeyInput
}

input ModelIntegrationIntegrationByFlowIdCompositeKeyInput {
  flowId: ID
  mode: MODE
}

input ModelIntegrationIntegrationsByWorkspaceIdCompositeKeyConditionInput {
  beginsWith: ModelIntegrationIntegrationsByWorkspaceIdCompositeKeyInput
  between: [ModelIntegrationIntegrationsByWorkspaceIdCompositeKeyInput]
  eq: ModelIntegrationIntegrationsByWorkspaceIdCompositeKeyInput
  ge: ModelIntegrationIntegrationsByWorkspaceIdCompositeKeyInput
  gt: ModelIntegrationIntegrationsByWorkspaceIdCompositeKeyInput
  le: ModelIntegrationIntegrationsByWorkspaceIdCompositeKeyInput
  lt: ModelIntegrationIntegrationsByWorkspaceIdCompositeKeyInput
}

input ModelIntegrationIntegrationsByWorkspaceIdCompositeKeyInput {
  mode: MODE
  workspaceId: ID
}

input ModelIntegrationPrimaryCompositeKeyConditionInput {
  beginsWith: ModelIntegrationPrimaryCompositeKeyInput
  between: [ModelIntegrationPrimaryCompositeKeyInput]
  eq: ModelIntegrationPrimaryCompositeKeyInput
  ge: ModelIntegrationPrimaryCompositeKeyInput
  gt: ModelIntegrationPrimaryCompositeKeyInput
  le: ModelIntegrationPrimaryCompositeKeyInput
  lt: ModelIntegrationPrimaryCompositeKeyInput
}

input ModelIntegrationPrimaryCompositeKeyInput {
  integrationId: ID
  mode: MODE
}

input ModelIntentConditionInput {
  and: [ModelIntentConditionInput]
  language: ModelStringInput
  lexIntentId: ModelIDInput
  name: ModelStringInput
  nodeId: ModelIDInput
  not: ModelIntentConditionInput
  or: [ModelIntentConditionInput]
  slots: ModelStringInput
  updatedAt: ModelStringInput
  utterance: ModelStringInput
  workspaceId: ModelIDInput
}

input ModelIntentEventConditionInput {
  and: [ModelIntentEventConditionInput]
  businessGoal: ModelStringInput
  createdAt: ModelStringInput
  description: ModelStringInput
  endTime: ModelStringInput
  includeIntents: ModelBooleanInput
  industry: ModelStringInput
  name: ModelStringInput
  not: ModelIntentEventConditionInput
  or: [ModelIntentEventConditionInput]
  sharingMode: ModelStringInput
  sourceEnterpriseId: ModelIDInput
  startTime: ModelStringInput
  updatedAt: ModelStringInput
  useCase: ModelStringInput
  workspaceId: ModelIDInput
}

input ModelIntentEventFilterInput {
  and: [ModelIntentEventFilterInput]
  businessGoal: ModelStringInput
  createdAt: ModelStringInput
  description: ModelStringInput
  endTime: ModelStringInput
  enterpriseId: ModelIDInput
  includeIntents: ModelBooleanInput
  industry: ModelStringInput
  intentEventId: ModelIDInput
  mode: ModelMODEInput
  name: ModelStringInput
  not: ModelIntentEventFilterInput
  or: [ModelIntentEventFilterInput]
  sharingMode: ModelStringInput
  sourceEnterpriseId: ModelIDInput
  startTime: ModelStringInput
  updatedAt: ModelStringInput
  useCase: ModelStringInput
  workspaceId: ModelIDInput
}

input ModelIntentEventIntentEvenByWorkspaceIdCompositeKeyConditionInput {
  beginsWith: ModelIntentEventIntentEvenByWorkspaceIdCompositeKeyInput
  between: [ModelIntentEventIntentEvenByWorkspaceIdCompositeKeyInput]
  eq: ModelIntentEventIntentEvenByWorkspaceIdCompositeKeyInput
  ge: ModelIntentEventIntentEvenByWorkspaceIdCompositeKeyInput
  gt: ModelIntentEventIntentEvenByWorkspaceIdCompositeKeyInput
  le: ModelIntentEventIntentEvenByWorkspaceIdCompositeKeyInput
  lt: ModelIntentEventIntentEvenByWorkspaceIdCompositeKeyInput
}

input ModelIntentEventIntentEvenByWorkspaceIdCompositeKeyInput {
  mode: MODE
  workspaceId: ID
}

input ModelIntentEventPrimaryCompositeKeyConditionInput {
  beginsWith: ModelIntentEventPrimaryCompositeKeyInput
  between: [ModelIntentEventPrimaryCompositeKeyInput]
  eq: ModelIntentEventPrimaryCompositeKeyInput
  ge: ModelIntentEventPrimaryCompositeKeyInput
  gt: ModelIntentEventPrimaryCompositeKeyInput
  le: ModelIntentEventPrimaryCompositeKeyInput
  lt: ModelIntentEventPrimaryCompositeKeyInput
}

input ModelIntentEventPrimaryCompositeKeyInput {
  intentEventId: ID
  mode: MODE
}

input ModelIntentFilterInput {
  and: [ModelIntentFilterInput]
  enterpriseId: ModelIDInput
  intentId: ModelIDInput
  language: ModelStringInput
  lexIntentId: ModelIDInput
  mode: ModelMODEInput
  name: ModelStringInput
  nodeId: ModelIDInput
  not: ModelIntentFilterInput
  or: [ModelIntentFilterInput]
  slots: ModelStringInput
  updatedAt: ModelStringInput
  utterance: ModelStringInput
  workspaceId: ModelIDInput
}

input ModelIntentIntentByWorkspaceIdCompositeKeyConditionInput {
  beginsWith: ModelIntentIntentByWorkspaceIdCompositeKeyInput
  between: [ModelIntentIntentByWorkspaceIdCompositeKeyInput]
  eq: ModelIntentIntentByWorkspaceIdCompositeKeyInput
  ge: ModelIntentIntentByWorkspaceIdCompositeKeyInput
  gt: ModelIntentIntentByWorkspaceIdCompositeKeyInput
  le: ModelIntentIntentByWorkspaceIdCompositeKeyInput
  lt: ModelIntentIntentByWorkspaceIdCompositeKeyInput
}

input ModelIntentIntentByWorkspaceIdCompositeKeyInput {
  mode: MODE
  workspaceId: ID
}

input ModelIntentPrimaryCompositeKeyConditionInput {
  beginsWith: ModelIntentPrimaryCompositeKeyInput
  between: [ModelIntentPrimaryCompositeKeyInput]
  eq: ModelIntentPrimaryCompositeKeyInput
  ge: ModelIntentPrimaryCompositeKeyInput
  gt: ModelIntentPrimaryCompositeKeyInput
  le: ModelIntentPrimaryCompositeKeyInput
  lt: ModelIntentPrimaryCompositeKeyInput
}

input ModelIntentPrimaryCompositeKeyInput {
  intentId: ID
  mode: MODE
}

input ModelInteractionConditionInput {
  and: [ModelInteractionConditionInput]
  flowId: ModelIDInput
  name: ModelStringInput
  not: ModelInteractionConditionInput
  or: [ModelInteractionConditionInput]
}

input ModelInteractionEventConditionInput {
  and: [ModelInteractionEventConditionInput]
  businessGoal: ModelStringInput
  createdAt: ModelStringInput
  description: ModelStringInput
  endTime: ModelStringInput
  includeIntents: ModelBooleanInput
  industry: ModelStringInput
  name: ModelStringInput
  not: ModelInteractionEventConditionInput
  or: [ModelInteractionEventConditionInput]
  sharingMode: ModelStringInput
  sourceEnterpriseId: ModelIDInput
  startTime: ModelStringInput
  updatedAt: ModelStringInput
  useCase: ModelStringInput
  workspaceId: ModelIDInput
}

input ModelInteractionEventFilterInput {
  and: [ModelInteractionEventFilterInput]
  businessGoal: ModelStringInput
  createdAt: ModelStringInput
  description: ModelStringInput
  endTime: ModelStringInput
  enterpriseId: ModelIDInput
  includeIntents: ModelBooleanInput
  industry: ModelStringInput
  interactionId: ModelIDInput
  mode: ModelMODEInput
  name: ModelStringInput
  not: ModelInteractionEventFilterInput
  or: [ModelInteractionEventFilterInput]
  sharingMode: ModelStringInput
  sourceEnterpriseId: ModelIDInput
  startTime: ModelStringInput
  updatedAt: ModelStringInput
  useCase: ModelStringInput
  workspaceId: ModelIDInput
}

input ModelInteractionEventInteractionEventByWorkspaceIdCompositeKeyConditionInput {
  beginsWith: ModelInteractionEventInteractionEventByWorkspaceIdCompositeKeyInput
  between: [ModelInteractionEventInteractionEventByWorkspaceIdCompositeKeyInput]
  eq: ModelInteractionEventInteractionEventByWorkspaceIdCompositeKeyInput
  ge: ModelInteractionEventInteractionEventByWorkspaceIdCompositeKeyInput
  gt: ModelInteractionEventInteractionEventByWorkspaceIdCompositeKeyInput
  le: ModelInteractionEventInteractionEventByWorkspaceIdCompositeKeyInput
  lt: ModelInteractionEventInteractionEventByWorkspaceIdCompositeKeyInput
}

input ModelInteractionEventInteractionEventByWorkspaceIdCompositeKeyInput {
  mode: MODE
  workspaceId: ID
}

input ModelInteractionEventPrimaryCompositeKeyConditionInput {
  beginsWith: ModelInteractionEventPrimaryCompositeKeyInput
  between: [ModelInteractionEventPrimaryCompositeKeyInput]
  eq: ModelInteractionEventPrimaryCompositeKeyInput
  ge: ModelInteractionEventPrimaryCompositeKeyInput
  gt: ModelInteractionEventPrimaryCompositeKeyInput
  le: ModelInteractionEventPrimaryCompositeKeyInput
  lt: ModelInteractionEventPrimaryCompositeKeyInput
}

input ModelInteractionEventPrimaryCompositeKeyInput {
  interactionId: ID
  mode: MODE
}

input ModelInteractionFilterInput {
  and: [ModelInteractionFilterInput]
  enterpriseId: ModelIDInput
  flowId: ModelIDInput
  interactionId: ModelIDInput
  mode: ModelMODEInput
  name: ModelStringInput
  not: ModelInteractionFilterInput
  or: [ModelInteractionFilterInput]
}

input ModelInteractionInteractionByFlowIdCompositeKeyConditionInput {
  beginsWith: ModelInteractionInteractionByFlowIdCompositeKeyInput
  between: [ModelInteractionInteractionByFlowIdCompositeKeyInput]
  eq: ModelInteractionInteractionByFlowIdCompositeKeyInput
  ge: ModelInteractionInteractionByFlowIdCompositeKeyInput
  gt: ModelInteractionInteractionByFlowIdCompositeKeyInput
  le: ModelInteractionInteractionByFlowIdCompositeKeyInput
  lt: ModelInteractionInteractionByFlowIdCompositeKeyInput
}

input ModelInteractionInteractionByFlowIdCompositeKeyInput {
  flowId: ID
  mode: MODE
}

input ModelInteractionPrimaryCompositeKeyConditionInput {
  beginsWith: ModelInteractionPrimaryCompositeKeyInput
  between: [ModelInteractionPrimaryCompositeKeyInput]
  eq: ModelInteractionPrimaryCompositeKeyInput
  ge: ModelInteractionPrimaryCompositeKeyInput
  gt: ModelInteractionPrimaryCompositeKeyInput
  le: ModelInteractionPrimaryCompositeKeyInput
  lt: ModelInteractionPrimaryCompositeKeyInput
}

input ModelInteractionPrimaryCompositeKeyInput {
  interactionId: ID
  mode: MODE
}

input ModelJobConditionInput {
  and: [ModelJobConditionInput]
  description: ModelStringInput
  executionArn: ModelStringInput
  failureReasons: ModelStringInput
  not: ModelJobConditionInput
  or: [ModelJobConditionInput]
  payload: ModelStringInput
  read: ModelBooleanInput
  result: ModelStringInput
  status: ModelJobStatusInput
  type: ModelJobTypeInput
  updatedAt: ModelStringInput
  userId: ModelIDInput
}

input ModelJobFilterInput {
  and: [ModelJobFilterInput]
  description: ModelStringInput
  enterpriseId: ModelIDInput
  executionArn: ModelStringInput
  failureReasons: ModelStringInput
  jobId: ModelIDInput
  mode: ModelMODEInput
  not: ModelJobFilterInput
  or: [ModelJobFilterInput]
  payload: ModelStringInput
  read: ModelBooleanInput
  result: ModelStringInput
  status: ModelJobStatusInput
  type: ModelJobTypeInput
  updatedAt: ModelStringInput
  userId: ModelIDInput
}

input ModelJobPrimaryCompositeKeyConditionInput {
  beginsWith: ModelJobPrimaryCompositeKeyInput
  between: [ModelJobPrimaryCompositeKeyInput]
  eq: ModelJobPrimaryCompositeKeyInput
  ge: ModelJobPrimaryCompositeKeyInput
  gt: ModelJobPrimaryCompositeKeyInput
  le: ModelJobPrimaryCompositeKeyInput
  lt: ModelJobPrimaryCompositeKeyInput
}

input ModelJobPrimaryCompositeKeyInput {
  jobId: ID
  mode: MODE
}

input ModelJobStatusInput {
  eq: JobStatus
  ne: JobStatus
}

input ModelJobTypeInput {
  eq: JobType
  ne: JobType
}

input ModelLinkedAppCatalogueCatalogueLinkedAppByCatalogueIdCompositeKeyConditionInput {
  beginsWith: ModelLinkedAppCatalogueCatalogueLinkedAppByCatalogueIdCompositeKeyInput
  between: [ModelLinkedAppCatalogueCatalogueLinkedAppByCatalogueIdCompositeKeyInput]
  eq: ModelLinkedAppCatalogueCatalogueLinkedAppByCatalogueIdCompositeKeyInput
  ge: ModelLinkedAppCatalogueCatalogueLinkedAppByCatalogueIdCompositeKeyInput
  gt: ModelLinkedAppCatalogueCatalogueLinkedAppByCatalogueIdCompositeKeyInput
  le: ModelLinkedAppCatalogueCatalogueLinkedAppByCatalogueIdCompositeKeyInput
  lt: ModelLinkedAppCatalogueCatalogueLinkedAppByCatalogueIdCompositeKeyInput
}

input ModelLinkedAppCatalogueCatalogueLinkedAppByCatalogueIdCompositeKeyInput {
  catalogueId: ID
  mode: MODE
}

input ModelLinkedAppCatalogueConditionInput {
  and: [ModelLinkedAppCatalogueConditionInput]
  hide: ModelBooleanInput
  not: ModelLinkedAppCatalogueConditionInput
  or: [ModelLinkedAppCatalogueConditionInput]
  status: ModelStringInput
  waLinkedAppCatalogueId: ModelStringInput
}

input ModelLinkedAppCatalogueFilterInput {
  and: [ModelLinkedAppCatalogueFilterInput]
  catalogueId: ModelIDInput
  enterpriseId: ModelIDInput
  hide: ModelBooleanInput
  linkedAppId: ModelIDInput
  mode: ModelMODEInput
  not: ModelLinkedAppCatalogueFilterInput
  or: [ModelLinkedAppCatalogueFilterInput]
  status: ModelStringInput
  waLinkedAppCatalogueId: ModelStringInput
}

input ModelLinkedAppCatalogueLinkedAppCatalogueByLinkedAppIdCompositeKeyConditionInput {
  beginsWith: ModelLinkedAppCatalogueLinkedAppCatalogueByLinkedAppIdCompositeKeyInput
  between: [ModelLinkedAppCatalogueLinkedAppCatalogueByLinkedAppIdCompositeKeyInput]
  eq: ModelLinkedAppCatalogueLinkedAppCatalogueByLinkedAppIdCompositeKeyInput
  ge: ModelLinkedAppCatalogueLinkedAppCatalogueByLinkedAppIdCompositeKeyInput
  gt: ModelLinkedAppCatalogueLinkedAppCatalogueByLinkedAppIdCompositeKeyInput
  le: ModelLinkedAppCatalogueLinkedAppCatalogueByLinkedAppIdCompositeKeyInput
  lt: ModelLinkedAppCatalogueLinkedAppCatalogueByLinkedAppIdCompositeKeyInput
}

input ModelLinkedAppCatalogueLinkedAppCatalogueByLinkedAppIdCompositeKeyInput {
  linkedAppId: ID
  mode: MODE
}

input ModelLinkedAppCataloguePrimaryCompositeKeyConditionInput {
  beginsWith: ModelLinkedAppCataloguePrimaryCompositeKeyInput
  between: [ModelLinkedAppCataloguePrimaryCompositeKeyInput]
  eq: ModelLinkedAppCataloguePrimaryCompositeKeyInput
  ge: ModelLinkedAppCataloguePrimaryCompositeKeyInput
  gt: ModelLinkedAppCataloguePrimaryCompositeKeyInput
  le: ModelLinkedAppCataloguePrimaryCompositeKeyInput
  lt: ModelLinkedAppCataloguePrimaryCompositeKeyInput
}

input ModelLinkedAppCataloguePrimaryCompositeKeyInput {
  catalogueId: ID
  linkedAppId: ID
  mode: MODE
}

input ModelLinkedAppCollectionCollectionLinkedAppByCollectionIdCompositeKeyConditionInput {
  beginsWith: ModelLinkedAppCollectionCollectionLinkedAppByCollectionIdCompositeKeyInput
  between: [ModelLinkedAppCollectionCollectionLinkedAppByCollectionIdCompositeKeyInput]
  eq: ModelLinkedAppCollectionCollectionLinkedAppByCollectionIdCompositeKeyInput
  ge: ModelLinkedAppCollectionCollectionLinkedAppByCollectionIdCompositeKeyInput
  gt: ModelLinkedAppCollectionCollectionLinkedAppByCollectionIdCompositeKeyInput
  le: ModelLinkedAppCollectionCollectionLinkedAppByCollectionIdCompositeKeyInput
  lt: ModelLinkedAppCollectionCollectionLinkedAppByCollectionIdCompositeKeyInput
}

input ModelLinkedAppCollectionCollectionLinkedAppByCollectionIdCompositeKeyInput {
  collectionId: ID
  mode: MODE
}

input ModelLinkedAppCollectionConditionInput {
  and: [ModelLinkedAppCollectionConditionInput]
  not: ModelLinkedAppCollectionConditionInput
  or: [ModelLinkedAppCollectionConditionInput]
  status: ModelStringInput
  waLinkedAppCollectionId: ModelStringInput
}

input ModelLinkedAppCollectionFilterInput {
  and: [ModelLinkedAppCollectionFilterInput]
  collectionId: ModelIDInput
  enterpriseId: ModelIDInput
  linkedAppId: ModelIDInput
  mode: ModelMODEInput
  not: ModelLinkedAppCollectionFilterInput
  or: [ModelLinkedAppCollectionFilterInput]
  status: ModelStringInput
  waLinkedAppCollectionId: ModelStringInput
}

input ModelLinkedAppCollectionLinkedAppCollectionByLinkedAppIdCompositeKeyConditionInput {
  beginsWith: ModelLinkedAppCollectionLinkedAppCollectionByLinkedAppIdCompositeKeyInput
  between: [ModelLinkedAppCollectionLinkedAppCollectionByLinkedAppIdCompositeKeyInput]
  eq: ModelLinkedAppCollectionLinkedAppCollectionByLinkedAppIdCompositeKeyInput
  ge: ModelLinkedAppCollectionLinkedAppCollectionByLinkedAppIdCompositeKeyInput
  gt: ModelLinkedAppCollectionLinkedAppCollectionByLinkedAppIdCompositeKeyInput
  le: ModelLinkedAppCollectionLinkedAppCollectionByLinkedAppIdCompositeKeyInput
  lt: ModelLinkedAppCollectionLinkedAppCollectionByLinkedAppIdCompositeKeyInput
}

input ModelLinkedAppCollectionLinkedAppCollectionByLinkedAppIdCompositeKeyInput {
  linkedAppId: ID
  mode: MODE
}

input ModelLinkedAppCollectionPrimaryCompositeKeyConditionInput {
  beginsWith: ModelLinkedAppCollectionPrimaryCompositeKeyInput
  between: [ModelLinkedAppCollectionPrimaryCompositeKeyInput]
  eq: ModelLinkedAppCollectionPrimaryCompositeKeyInput
  ge: ModelLinkedAppCollectionPrimaryCompositeKeyInput
  gt: ModelLinkedAppCollectionPrimaryCompositeKeyInput
  le: ModelLinkedAppCollectionPrimaryCompositeKeyInput
  lt: ModelLinkedAppCollectionPrimaryCompositeKeyInput
}

input ModelLinkedAppCollectionPrimaryCompositeKeyInput {
  collectionId: ID
  linkedAppId: ID
  mode: MODE
}

input ModelLinkedAppConditionInput {
  and: [ModelLinkedAppConditionInput]
  config: ModelStringInput
  contactGroupId: ModelIDInput
  details: ModelStringInput
  email: ModelStringInput
  isBusinessAccount: ModelBooleanInput
  isCartEnabled: ModelBooleanInput
  lastSyncTime: ModelStringInput
  name: ModelStringInput
  not: ModelLinkedAppConditionInput
  or: [ModelLinkedAppConditionInput]
  qrCode: ModelStringInput
  role: ModelStringInput
  status: ModelLinkedAppStatusInput
}

input ModelLinkedAppCustomerConditionInput {
  and: [ModelLinkedAppCustomerConditionInput]
  customerDetails: ModelStringInput
  not: ModelLinkedAppCustomerConditionInput
  or: [ModelLinkedAppCustomerConditionInput]
  updatedAt: ModelStringInput
}

input ModelLinkedAppCustomerFilterInput {
  and: [ModelLinkedAppCustomerFilterInput]
  customerDetails: ModelStringInput
  customerId: ModelIDInput
  enterpriseId: ModelIDInput
  linkedAppId: ModelIDInput
  mode: ModelMODEInput
  not: ModelLinkedAppCustomerFilterInput
  or: [ModelLinkedAppCustomerFilterInput]
  updatedAt: ModelStringInput
}

input ModelLinkedAppCustomerLinkedAppCustomerByCustomerIdCompositeKeyConditionInput {
  beginsWith: ModelLinkedAppCustomerLinkedAppCustomerByCustomerIdCompositeKeyInput
  between: [ModelLinkedAppCustomerLinkedAppCustomerByCustomerIdCompositeKeyInput]
  eq: ModelLinkedAppCustomerLinkedAppCustomerByCustomerIdCompositeKeyInput
  ge: ModelLinkedAppCustomerLinkedAppCustomerByCustomerIdCompositeKeyInput
  gt: ModelLinkedAppCustomerLinkedAppCustomerByCustomerIdCompositeKeyInput
  le: ModelLinkedAppCustomerLinkedAppCustomerByCustomerIdCompositeKeyInput
  lt: ModelLinkedAppCustomerLinkedAppCustomerByCustomerIdCompositeKeyInput
}

input ModelLinkedAppCustomerLinkedAppCustomerByCustomerIdCompositeKeyInput {
  customerId: ID
  mode: MODE
}

input ModelLinkedAppCustomerLinkedAppCustomersByLinkedAppIdCompositeKeyConditionInput {
  beginsWith: ModelLinkedAppCustomerLinkedAppCustomersByLinkedAppIdCompositeKeyInput
  between: [ModelLinkedAppCustomerLinkedAppCustomersByLinkedAppIdCompositeKeyInput]
  eq: ModelLinkedAppCustomerLinkedAppCustomersByLinkedAppIdCompositeKeyInput
  ge: ModelLinkedAppCustomerLinkedAppCustomersByLinkedAppIdCompositeKeyInput
  gt: ModelLinkedAppCustomerLinkedAppCustomersByLinkedAppIdCompositeKeyInput
  le: ModelLinkedAppCustomerLinkedAppCustomersByLinkedAppIdCompositeKeyInput
  lt: ModelLinkedAppCustomerLinkedAppCustomersByLinkedAppIdCompositeKeyInput
}

input ModelLinkedAppCustomerLinkedAppCustomersByLinkedAppIdCompositeKeyInput {
  linkedAppId: ID
  mode: MODE
}

input ModelLinkedAppCustomerPrimaryCompositeKeyConditionInput {
  beginsWith: ModelLinkedAppCustomerPrimaryCompositeKeyInput
  between: [ModelLinkedAppCustomerPrimaryCompositeKeyInput]
  eq: ModelLinkedAppCustomerPrimaryCompositeKeyInput
  ge: ModelLinkedAppCustomerPrimaryCompositeKeyInput
  gt: ModelLinkedAppCustomerPrimaryCompositeKeyInput
  le: ModelLinkedAppCustomerPrimaryCompositeKeyInput
  lt: ModelLinkedAppCustomerPrimaryCompositeKeyInput
}

input ModelLinkedAppCustomerPrimaryCompositeKeyInput {
  customerId: ID
  linkedAppId: ID
  mode: MODE
}

input ModelLinkedAppFilterInput {
  and: [ModelLinkedAppFilterInput]
  config: ModelStringInput
  contactGroupId: ModelIDInput
  details: ModelStringInput
  email: ModelStringInput
  enterpriseId: ModelIDInput
  isBusinessAccount: ModelBooleanInput
  isCartEnabled: ModelBooleanInput
  lastSyncTime: ModelStringInput
  linkedAppId: ModelIDInput
  mode: ModelMODEInput
  name: ModelStringInput
  not: ModelLinkedAppFilterInput
  or: [ModelLinkedAppFilterInput]
  qrCode: ModelStringInput
  role: ModelStringInput
  status: ModelLinkedAppStatusInput
}

input ModelLinkedAppMessageConditionInput {
  and: [ModelLinkedAppMessageConditionInput]
  createdAt: ModelStringInput
  customerId: ModelIDInput
  linkedAppId: ModelIDInput
  message: ModelStringInput
  not: ModelLinkedAppMessageConditionInput
  or: [ModelLinkedAppMessageConditionInput]
  updatedAt: ModelStringInput
}

input ModelLinkedAppMessageFilterInput {
  and: [ModelLinkedAppMessageFilterInput]
  createdAt: ModelStringInput
  customerId: ModelIDInput
  enterpriseId: ModelIDInput
  linkedAppId: ModelIDInput
  message: ModelStringInput
  mode: ModelMODEInput
  not: ModelLinkedAppMessageFilterInput
  or: [ModelLinkedAppMessageFilterInput]
  updatedAt: ModelStringInput
  waMessageId: ModelIDInput
}

input ModelLinkedAppMessageLinkedAppMessagesByLinkedAppCustomerIdCompositeKeyConditionInput {
  beginsWith: ModelLinkedAppMessageLinkedAppMessagesByLinkedAppCustomerIdCompositeKeyInput
  between: [ModelLinkedAppMessageLinkedAppMessagesByLinkedAppCustomerIdCompositeKeyInput]
  eq: ModelLinkedAppMessageLinkedAppMessagesByLinkedAppCustomerIdCompositeKeyInput
  ge: ModelLinkedAppMessageLinkedAppMessagesByLinkedAppCustomerIdCompositeKeyInput
  gt: ModelLinkedAppMessageLinkedAppMessagesByLinkedAppCustomerIdCompositeKeyInput
  le: ModelLinkedAppMessageLinkedAppMessagesByLinkedAppCustomerIdCompositeKeyInput
  lt: ModelLinkedAppMessageLinkedAppMessagesByLinkedAppCustomerIdCompositeKeyInput
}

input ModelLinkedAppMessageLinkedAppMessagesByLinkedAppCustomerIdCompositeKeyInput {
  customerId: ID
  linkedAppId: ID
  mode: MODE
}

input ModelLinkedAppMessagePrimaryCompositeKeyConditionInput {
  beginsWith: ModelLinkedAppMessagePrimaryCompositeKeyInput
  between: [ModelLinkedAppMessagePrimaryCompositeKeyInput]
  eq: ModelLinkedAppMessagePrimaryCompositeKeyInput
  ge: ModelLinkedAppMessagePrimaryCompositeKeyInput
  gt: ModelLinkedAppMessagePrimaryCompositeKeyInput
  le: ModelLinkedAppMessagePrimaryCompositeKeyInput
  lt: ModelLinkedAppMessagePrimaryCompositeKeyInput
}

input ModelLinkedAppMessagePrimaryCompositeKeyInput {
  mode: MODE
  waMessageId: ID
}

input ModelLinkedAppPrimaryCompositeKeyConditionInput {
  beginsWith: ModelLinkedAppPrimaryCompositeKeyInput
  between: [ModelLinkedAppPrimaryCompositeKeyInput]
  eq: ModelLinkedAppPrimaryCompositeKeyInput
  ge: ModelLinkedAppPrimaryCompositeKeyInput
  gt: ModelLinkedAppPrimaryCompositeKeyInput
  le: ModelLinkedAppPrimaryCompositeKeyInput
  lt: ModelLinkedAppPrimaryCompositeKeyInput
}

input ModelLinkedAppPrimaryCompositeKeyInput {
  linkedAppId: ID
  mode: MODE
}

input ModelLinkedAppStatusInput {
  eq: LinkedAppStatus
  ne: LinkedAppStatus
}

input ModelMODEInput {
  eq: MODE
  ne: MODE
}

input ModelMetaCatalogueConditionInput {
  and: [ModelMetaCatalogueConditionInput]
  integrationId: ModelIDInput
  isCartEnabled: ModelBooleanInput
  isCatalogVisible: ModelBooleanInput
  name: ModelStringInput
  not: ModelMetaCatalogueConditionInput
  or: [ModelMetaCatalogueConditionInput]
}

input ModelMetaCatalogueFilterInput {
  and: [ModelMetaCatalogueFilterInput]
  enterpriseId: ModelIDInput
  integrationId: ModelIDInput
  isCartEnabled: ModelBooleanInput
  isCatalogVisible: ModelBooleanInput
  metaCatalogueId: ModelIDInput
  mode: ModelMODEInput
  name: ModelStringInput
  not: ModelMetaCatalogueFilterInput
  or: [ModelMetaCatalogueFilterInput]
}

input ModelMetaCataloguePrimaryCompositeKeyConditionInput {
  beginsWith: ModelMetaCataloguePrimaryCompositeKeyInput
  between: [ModelMetaCataloguePrimaryCompositeKeyInput]
  eq: ModelMetaCataloguePrimaryCompositeKeyInput
  ge: ModelMetaCataloguePrimaryCompositeKeyInput
  gt: ModelMetaCataloguePrimaryCompositeKeyInput
  le: ModelMetaCataloguePrimaryCompositeKeyInput
  lt: ModelMetaCataloguePrimaryCompositeKeyInput
}

input ModelMetaCataloguePrimaryCompositeKeyInput {
  metaCatalogueId: ID
  mode: MODE
}

input ModelMissedUtteranceConditionInput {
  and: [ModelMissedUtteranceConditionInput]
  channel: ModelCHANNELInput
  confidence: ModelFloatInput
  language: ModelStringInput
  nodeId: ModelStringInput
  not: ModelMissedUtteranceConditionInput
  or: [ModelMissedUtteranceConditionInput]
  updatedAt: ModelStringInput
  utterance: ModelStringInput
  workspaceId: ModelIDInput
}

input ModelMissedUtteranceFilterInput {
  and: [ModelMissedUtteranceFilterInput]
  channel: ModelCHANNELInput
  confidence: ModelFloatInput
  enterpriseId: ModelIDInput
  language: ModelStringInput
  missedUtteranceId: ModelIDInput
  mode: ModelMODEInput
  nodeId: ModelStringInput
  not: ModelMissedUtteranceFilterInput
  or: [ModelMissedUtteranceFilterInput]
  updatedAt: ModelStringInput
  utterance: ModelStringInput
  workspaceId: ModelIDInput
}

input ModelMissedUtteranceMissedUtteranceByWorkspaceIdCompositeKeyConditionInput {
  beginsWith: ModelMissedUtteranceMissedUtteranceByWorkspaceIdCompositeKeyInput
  between: [ModelMissedUtteranceMissedUtteranceByWorkspaceIdCompositeKeyInput]
  eq: ModelMissedUtteranceMissedUtteranceByWorkspaceIdCompositeKeyInput
  ge: ModelMissedUtteranceMissedUtteranceByWorkspaceIdCompositeKeyInput
  gt: ModelMissedUtteranceMissedUtteranceByWorkspaceIdCompositeKeyInput
  le: ModelMissedUtteranceMissedUtteranceByWorkspaceIdCompositeKeyInput
  lt: ModelMissedUtteranceMissedUtteranceByWorkspaceIdCompositeKeyInput
}

input ModelMissedUtteranceMissedUtteranceByWorkspaceIdCompositeKeyInput {
  mode: MODE
  workspaceId: ID
}

input ModelMissedUtterancePrimaryCompositeKeyConditionInput {
  beginsWith: ModelMissedUtterancePrimaryCompositeKeyInput
  between: [ModelMissedUtterancePrimaryCompositeKeyInput]
  eq: ModelMissedUtterancePrimaryCompositeKeyInput
  ge: ModelMissedUtterancePrimaryCompositeKeyInput
  gt: ModelMissedUtterancePrimaryCompositeKeyInput
  le: ModelMissedUtterancePrimaryCompositeKeyInput
  lt: ModelMissedUtterancePrimaryCompositeKeyInput
}

input ModelMissedUtterancePrimaryCompositeKeyInput {
  missedUtteranceId: ID
  mode: MODE
}

input ModelModuleConditionInput {
  and: [ModelModuleConditionInput]
  name: ModelStringInput
  not: ModelModuleConditionInput
  or: [ModelModuleConditionInput]
  roleId: ModelIDInput
  subModule: ModelStringInput
}

input ModelModuleFilterInput {
  and: [ModelModuleFilterInput]
  enterpriseId: ModelIDInput
  moduleId: ModelIDInput
  name: ModelStringInput
  not: ModelModuleFilterInput
  or: [ModelModuleFilterInput]
  roleId: ModelIDInput
  subModule: ModelStringInput
}

input ModelNodeConditionInput {
  and: [ModelNodeConditionInput]
  config: ModelStringInput
  connectedNodes: ModelStringInput
  connectedNodesData: ModelStringInput
  errorMessage: ModelStringInput
  intentId: ModelIDInput
  interactionId: ModelIDInput
  language: ModelStringInput
  nextId: ModelIDInput
  noError: ModelBooleanInput
  not: ModelNodeConditionInput
  or: [ModelNodeConditionInput]
  previousId: ModelIDInput
  templateId: ModelIDInput
  type: ModelStringInput
}

input ModelNodeFilterInput {
  and: [ModelNodeFilterInput]
  config: ModelStringInput
  connectedNodes: ModelStringInput
  connectedNodesData: ModelStringInput
  enterpriseId: ModelIDInput
  errorMessage: ModelStringInput
  intentId: ModelIDInput
  interactionId: ModelIDInput
  language: ModelStringInput
  mode: ModelMODEInput
  nextId: ModelIDInput
  noError: ModelBooleanInput
  nodeId: ModelIDInput
  not: ModelNodeFilterInput
  or: [ModelNodeFilterInput]
  previousId: ModelIDInput
  templateId: ModelIDInput
  type: ModelStringInput
}

input ModelNodeNodeByInteractionIdCompositeKeyConditionInput {
  beginsWith: ModelNodeNodeByInteractionIdCompositeKeyInput
  between: [ModelNodeNodeByInteractionIdCompositeKeyInput]
  eq: ModelNodeNodeByInteractionIdCompositeKeyInput
  ge: ModelNodeNodeByInteractionIdCompositeKeyInput
  gt: ModelNodeNodeByInteractionIdCompositeKeyInput
  le: ModelNodeNodeByInteractionIdCompositeKeyInput
  lt: ModelNodeNodeByInteractionIdCompositeKeyInput
}

input ModelNodeNodeByInteractionIdCompositeKeyInput {
  interactionId: ID
  mode: MODE
}

input ModelNodePrimaryCompositeKeyConditionInput {
  beginsWith: ModelNodePrimaryCompositeKeyInput
  between: [ModelNodePrimaryCompositeKeyInput]
  eq: ModelNodePrimaryCompositeKeyInput
  ge: ModelNodePrimaryCompositeKeyInput
  gt: ModelNodePrimaryCompositeKeyInput
  le: ModelNodePrimaryCompositeKeyInput
  lt: ModelNodePrimaryCompositeKeyInput
}

input ModelNodePrimaryCompositeKeyInput {
  mode: MODE
  nodeId: ID
}

input ModelNotificationConditionInput {
  and: [ModelNotificationConditionInput]
  categoryStatus: ModelJobStatusInput
  description: ModelStringInput
  link: ModelStringInput
  not: ModelNotificationConditionInput
  or: [ModelNotificationConditionInput]
  read: ModelBooleanInput
  title: ModelStringInput
  type: ModelCATEGORYInput
  updatedAt: ModelStringInput
  userId: ModelIDInput
}

input ModelNotificationFilterInput {
  and: [ModelNotificationFilterInput]
  categoryStatus: ModelJobStatusInput
  description: ModelStringInput
  enterpriseId: ModelIDInput
  link: ModelStringInput
  mode: ModelMODEInput
  not: ModelNotificationFilterInput
  notificationId: ModelIDInput
  or: [ModelNotificationFilterInput]
  read: ModelBooleanInput
  title: ModelStringInput
  type: ModelCATEGORYInput
  updatedAt: ModelStringInput
  userId: ModelIDInput
}

input ModelNotificationPrimaryCompositeKeyConditionInput {
  beginsWith: ModelNotificationPrimaryCompositeKeyInput
  between: [ModelNotificationPrimaryCompositeKeyInput]
  eq: ModelNotificationPrimaryCompositeKeyInput
  ge: ModelNotificationPrimaryCompositeKeyInput
  gt: ModelNotificationPrimaryCompositeKeyInput
  le: ModelNotificationPrimaryCompositeKeyInput
  lt: ModelNotificationPrimaryCompositeKeyInput
}

input ModelNotificationPrimaryCompositeKeyInput {
  mode: MODE
  notificationId: ID
}

input ModelOrganizationConditionInput {
  and: [ModelOrganizationConditionInput]
  brandName: ModelStringInput
  name: ModelStringInput
  not: ModelOrganizationConditionInput
  or: [ModelOrganizationConditionInput]
}

input ModelOrganizationFilterInput {
  and: [ModelOrganizationFilterInput]
  brandId: ModelStringInput
  brandName: ModelStringInput
  name: ModelStringInput
  not: ModelOrganizationFilterInput
  or: [ModelOrganizationFilterInput]
  organizationId: ModelIDInput
}

input ModelOutwardWebhookConditionInput {
  and: [ModelOutwardWebhookConditionInput]
  config: ModelStringInput
  description: ModelStringInput
  filters: ModelStringInput
  name: ModelStringInput
  not: ModelOutwardWebhookConditionInput
  or: [ModelOutwardWebhookConditionInput]
  workspaceId: ModelIDInput
}

input ModelOutwardWebhookFilterInput {
  and: [ModelOutwardWebhookFilterInput]
  config: ModelStringInput
  description: ModelStringInput
  enterpriseId: ModelIDInput
  filters: ModelStringInput
  mode: ModelMODEInput
  name: ModelStringInput
  not: ModelOutwardWebhookFilterInput
  or: [ModelOutwardWebhookFilterInput]
  outwardWebhookId: ModelIDInput
  workspaceId: ModelIDInput
}

input ModelOutwardWebhookOutwardWebhookByWorkspaceIdCompositeKeyConditionInput {
  beginsWith: ModelOutwardWebhookOutwardWebhookByWorkspaceIdCompositeKeyInput
  between: [ModelOutwardWebhookOutwardWebhookByWorkspaceIdCompositeKeyInput]
  eq: ModelOutwardWebhookOutwardWebhookByWorkspaceIdCompositeKeyInput
  ge: ModelOutwardWebhookOutwardWebhookByWorkspaceIdCompositeKeyInput
  gt: ModelOutwardWebhookOutwardWebhookByWorkspaceIdCompositeKeyInput
  le: ModelOutwardWebhookOutwardWebhookByWorkspaceIdCompositeKeyInput
  lt: ModelOutwardWebhookOutwardWebhookByWorkspaceIdCompositeKeyInput
}

input ModelOutwardWebhookOutwardWebhookByWorkspaceIdCompositeKeyInput {
  mode: MODE
  workspaceId: ID
}

input ModelOutwardWebhookPrimaryCompositeKeyConditionInput {
  beginsWith: ModelOutwardWebhookPrimaryCompositeKeyInput
  between: [ModelOutwardWebhookPrimaryCompositeKeyInput]
  eq: ModelOutwardWebhookPrimaryCompositeKeyInput
  ge: ModelOutwardWebhookPrimaryCompositeKeyInput
  gt: ModelOutwardWebhookPrimaryCompositeKeyInput
  le: ModelOutwardWebhookPrimaryCompositeKeyInput
  lt: ModelOutwardWebhookPrimaryCompositeKeyInput
}

input ModelOutwardWebhookPrimaryCompositeKeyInput {
  mode: MODE
  outwardWebhookId: ID
}

input ModelPermissionConditionInput {
  and: [ModelPermissionConditionInput]
  create: ModelBooleanInput
  delete: ModelBooleanInput
  moduleId: ModelIDInput
  not: ModelPermissionConditionInput
  or: [ModelPermissionConditionInput]
  read: ModelBooleanInput
  roleId: ModelIDInput
  subModulePermission: ModelStringInput
  update: ModelBooleanInput
}

input ModelPermissionFilterInput {
  and: [ModelPermissionFilterInput]
  create: ModelBooleanInput
  delete: ModelBooleanInput
  enterpriseId: ModelIDInput
  moduleId: ModelIDInput
  not: ModelPermissionFilterInput
  or: [ModelPermissionFilterInput]
  permissionId: ModelIDInput
  read: ModelBooleanInput
  roleId: ModelIDInput
  subModulePermission: ModelStringInput
  update: ModelBooleanInput
}

input ModelProfileConditionInput {
  and: [ModelProfileConditionInput]
  createdAt: ModelStringInput
  customerId: ModelIDInput
  maskedProfileId: ModelStringInput
  not: ModelProfileConditionInput
  or: [ModelProfileConditionInput]
}

input ModelProfileFilterInput {
  and: [ModelProfileFilterInput]
  channel: ModelCHANNELInput
  createdAt: ModelStringInput
  customerId: ModelIDInput
  enterpriseId: ModelIDInput
  maskedProfileId: ModelStringInput
  mode: ModelMODEInput
  not: ModelProfileFilterInput
  or: [ModelProfileFilterInput]
  profileId: ModelIDInput
}

input ModelProfilePrimaryCompositeKeyConditionInput {
  beginsWith: ModelProfilePrimaryCompositeKeyInput
  between: [ModelProfilePrimaryCompositeKeyInput]
  eq: ModelProfilePrimaryCompositeKeyInput
  ge: ModelProfilePrimaryCompositeKeyInput
  gt: ModelProfilePrimaryCompositeKeyInput
  le: ModelProfilePrimaryCompositeKeyInput
  lt: ModelProfilePrimaryCompositeKeyInput
}

input ModelProfilePrimaryCompositeKeyInput {
  channel: CHANNEL
  mode: MODE
  profileId: ID
}

input ModelProfileProfileByCustomerIdCompositeKeyConditionInput {
  beginsWith: ModelProfileProfileByCustomerIdCompositeKeyInput
  between: [ModelProfileProfileByCustomerIdCompositeKeyInput]
  eq: ModelProfileProfileByCustomerIdCompositeKeyInput
  ge: ModelProfileProfileByCustomerIdCompositeKeyInput
  gt: ModelProfileProfileByCustomerIdCompositeKeyInput
  le: ModelProfileProfileByCustomerIdCompositeKeyInput
  lt: ModelProfileProfileByCustomerIdCompositeKeyInput
}

input ModelProfileProfileByCustomerIdCompositeKeyInput {
  customerId: ID
  mode: MODE
}

input ModelRecurringCampaignConditionInput {
  and: [ModelRecurringCampaignConditionInput]
  flowId: ModelIDInput
  language: ModelStringInput
  lastResponseSyncTime: ModelStringInput
  name: ModelStringInput
  not: ModelRecurringCampaignConditionInput
  or: [ModelRecurringCampaignConditionInput]
  responseSyncStatus: ModelResponseSyncStatusInput
  segment: ModelStringInput
  type: ModelStringInput
  variables: ModelStringInput
}

input ModelRecurringCampaignFilterInput {
  and: [ModelRecurringCampaignFilterInput]
  enterpriseId: ModelIDInput
  flowId: ModelIDInput
  language: ModelStringInput
  lastResponseSyncTime: ModelStringInput
  mode: ModelMODEInput
  name: ModelStringInput
  not: ModelRecurringCampaignFilterInput
  or: [ModelRecurringCampaignFilterInput]
  recurringCampaignId: ModelIDInput
  responseSyncStatus: ModelResponseSyncStatusInput
  segment: ModelStringInput
  type: ModelStringInput
  variables: ModelStringInput
}

input ModelRecurringCampaignPrimaryCompositeKeyConditionInput {
  beginsWith: ModelRecurringCampaignPrimaryCompositeKeyInput
  between: [ModelRecurringCampaignPrimaryCompositeKeyInput]
  eq: ModelRecurringCampaignPrimaryCompositeKeyInput
  ge: ModelRecurringCampaignPrimaryCompositeKeyInput
  gt: ModelRecurringCampaignPrimaryCompositeKeyInput
  le: ModelRecurringCampaignPrimaryCompositeKeyInput
  lt: ModelRecurringCampaignPrimaryCompositeKeyInput
}

input ModelRecurringCampaignPrimaryCompositeKeyInput {
  mode: MODE
  recurringCampaignId: ID
}

input ModelResponseSyncStatusInput {
  eq: ResponseSyncStatus
  ne: ResponseSyncStatus
}

input ModelRoleConditionInput {
  and: [ModelRoleConditionInput]
  moduleId: ModelIDInput
  name: ModelStringInput
  not: ModelRoleConditionInput
  or: [ModelRoleConditionInput]
}

input ModelRoleFilterInput {
  and: [ModelRoleFilterInput]
  enterpriseId: ModelIDInput
  moduleId: ModelIDInput
  name: ModelStringInput
  not: ModelRoleFilterInput
  or: [ModelRoleFilterInput]
  roleId: ModelIDInput
}

input ModelSAASInput {
  eq: SAAS
  ne: SAAS
}

input ModelSESSION_INITIATED_BYInput {
  eq: SESSION_INITIATED_BY
  ne: SESSION_INITIATED_BY
}

input ModelSaasTriggerConditionInput {
  and: [ModelSaasTriggerConditionInput]
  channel: ModelCHANNELInput
  customerAttrPath: ModelStringInput
  incomingPath: ModelStringInput
  name: ModelStringInput
  not: ModelSaasTriggerConditionInput
  or: [ModelSaasTriggerConditionInput]
  otherDetails: ModelStringInput
  triggerType: ModelStringInput
  type: ModelSAASInput
  workspaceId: ModelIDInput
}

input ModelSaasTriggerFilterInput {
  and: [ModelSaasTriggerFilterInput]
  channel: ModelCHANNELInput
  customerAttrPath: ModelStringInput
  enterpriseId: ModelIDInput
  incomingPath: ModelStringInput
  mode: ModelMODEInput
  name: ModelStringInput
  not: ModelSaasTriggerFilterInput
  or: [ModelSaasTriggerFilterInput]
  otherDetails: ModelStringInput
  saasTriggerId: ModelIDInput
  triggerType: ModelStringInput
  type: ModelSAASInput
  workspaceId: ModelIDInput
}

input ModelSaasTriggerPrimaryCompositeKeyConditionInput {
  beginsWith: ModelSaasTriggerPrimaryCompositeKeyInput
  between: [ModelSaasTriggerPrimaryCompositeKeyInput]
  eq: ModelSaasTriggerPrimaryCompositeKeyInput
  ge: ModelSaasTriggerPrimaryCompositeKeyInput
  gt: ModelSaasTriggerPrimaryCompositeKeyInput
  le: ModelSaasTriggerPrimaryCompositeKeyInput
  lt: ModelSaasTriggerPrimaryCompositeKeyInput
}

input ModelSaasTriggerPrimaryCompositeKeyInput {
  mode: MODE
  saasTriggerId: ID
}

input ModelSaasTriggerSaasTriggerByWorkspaceIdCompositeKeyConditionInput {
  beginsWith: ModelSaasTriggerSaasTriggerByWorkspaceIdCompositeKeyInput
  between: [ModelSaasTriggerSaasTriggerByWorkspaceIdCompositeKeyInput]
  eq: ModelSaasTriggerSaasTriggerByWorkspaceIdCompositeKeyInput
  ge: ModelSaasTriggerSaasTriggerByWorkspaceIdCompositeKeyInput
  gt: ModelSaasTriggerSaasTriggerByWorkspaceIdCompositeKeyInput
  le: ModelSaasTriggerSaasTriggerByWorkspaceIdCompositeKeyInput
  lt: ModelSaasTriggerSaasTriggerByWorkspaceIdCompositeKeyInput
}

input ModelSaasTriggerSaasTriggerByWorkspaceIdCompositeKeyInput {
  mode: MODE
  workspaceId: ID
}

input ModelScheduleNodeConditionInput {
  and: [ModelScheduleNodeConditionInput]
  nodeId: ModelIDInput
  not: ModelScheduleNodeConditionInput
  or: [ModelScheduleNodeConditionInput]
  sessionId: ModelIDInput
  status: ModelScheduleNodeStatusInput
  time: ModelStringInput
  updatedAt: ModelStringInput
}

input ModelScheduleNodeFilterInput {
  and: [ModelScheduleNodeFilterInput]
  enterpriseId: ModelIDInput
  mode: ModelMODEInput
  nodeId: ModelIDInput
  not: ModelScheduleNodeFilterInput
  or: [ModelScheduleNodeFilterInput]
  scheduleNodeId: ModelIDInput
  sessionId: ModelIDInput
  status: ModelScheduleNodeStatusInput
  time: ModelStringInput
  updatedAt: ModelStringInput
}

input ModelScheduleNodePrimaryCompositeKeyConditionInput {
  beginsWith: ModelScheduleNodePrimaryCompositeKeyInput
  between: [ModelScheduleNodePrimaryCompositeKeyInput]
  eq: ModelScheduleNodePrimaryCompositeKeyInput
  ge: ModelScheduleNodePrimaryCompositeKeyInput
  gt: ModelScheduleNodePrimaryCompositeKeyInput
  le: ModelScheduleNodePrimaryCompositeKeyInput
  lt: ModelScheduleNodePrimaryCompositeKeyInput
}

input ModelScheduleNodePrimaryCompositeKeyInput {
  mode: MODE
  scheduleNodeId: ID
}

input ModelScheduleNodeScheduleNodeByNodeIdCompositeKeyConditionInput {
  beginsWith: ModelScheduleNodeScheduleNodeByNodeIdCompositeKeyInput
  between: [ModelScheduleNodeScheduleNodeByNodeIdCompositeKeyInput]
  eq: ModelScheduleNodeScheduleNodeByNodeIdCompositeKeyInput
  ge: ModelScheduleNodeScheduleNodeByNodeIdCompositeKeyInput
  gt: ModelScheduleNodeScheduleNodeByNodeIdCompositeKeyInput
  le: ModelScheduleNodeScheduleNodeByNodeIdCompositeKeyInput
  lt: ModelScheduleNodeScheduleNodeByNodeIdCompositeKeyInput
}

input ModelScheduleNodeScheduleNodeByNodeIdCompositeKeyInput {
  mode: MODE
  nodeId: ID
}

input ModelScheduleNodeStatusInput {
  eq: ScheduleNodeStatus
  ne: ScheduleNodeStatus
}

input ModelSessionConditionInput {
  active: ModelBooleanInput
  agentId: ModelIDInput
  and: [ModelSessionConditionInput]
  assignment: ModelASSIGNMENTInput
  campaignMessageId: ModelIDInput
  channel: ModelCHANNELInput
  createdAt: ModelStringInput
  currentNodeId: ModelIDInput
  customerId: ModelIDInput
  federatedLiveToCustomerId: ModelIDInput
  federatedRole: ModelFEDERATED_ROLEInput
  flowId: ModelIDInput
  healthTableId: ModelIDInput
  initiatedBy: ModelSESSION_INITIATED_BYInput
  integrationId: ModelIDInput
  language: ModelStringInput
  metaConversationId: ModelIDInput
  nextNodeId: ModelIDInput
  nodeId: ModelIDInput
  not: ModelSessionConditionInput
  or: [ModelSessionConditionInput]
  preview: ModelBooleanInput
  referrer: ModelStringInput
  referrerType: ModelStringInput
  tags: ModelStringInput
  updatedAt: ModelStringInput
  validationCount: ModelIntInput
  variables: ModelStringInput
  workspaceId: ModelIDInput
}

input ModelSessionFilterInput {
  active: ModelBooleanInput
  agentId: ModelIDInput
  and: [ModelSessionFilterInput]
  assignment: ModelASSIGNMENTInput
  campaignMessageId: ModelIDInput
  channel: ModelCHANNELInput
  createdAt: ModelStringInput
  currentNodeId: ModelIDInput
  customerId: ModelIDInput
  enterpriseId: ModelIDInput
  federatedLiveToCustomerId: ModelIDInput
  federatedRole: ModelFEDERATED_ROLEInput
  flowId: ModelIDInput
  healthTableId: ModelIDInput
  initiatedBy: ModelSESSION_INITIATED_BYInput
  integrationId: ModelIDInput
  language: ModelStringInput
  metaConversationId: ModelIDInput
  mode: ModelMODEInput
  nextNodeId: ModelIDInput
  nodeId: ModelIDInput
  not: ModelSessionFilterInput
  or: [ModelSessionFilterInput]
  preview: ModelBooleanInput
  referrer: ModelStringInput
  referrerType: ModelStringInput
  sessionId: ModelIDInput
  tags: ModelStringInput
  updatedAt: ModelStringInput
  validationCount: ModelIntInput
  variables: ModelStringInput
  workspaceId: ModelIDInput
}

input ModelSessionPrimaryCompositeKeyConditionInput {
  beginsWith: ModelSessionPrimaryCompositeKeyInput
  between: [ModelSessionPrimaryCompositeKeyInput]
  eq: ModelSessionPrimaryCompositeKeyInput
  ge: ModelSessionPrimaryCompositeKeyInput
  gt: ModelSessionPrimaryCompositeKeyInput
  le: ModelSessionPrimaryCompositeKeyInput
  lt: ModelSessionPrimaryCompositeKeyInput
}

input ModelSessionPrimaryCompositeKeyInput {
  mode: MODE
  sessionId: ID
}

input ModelSizeInput {
  between: [Int]
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
}

input ModelStepTypeInput {
  eq: StepType
  ne: StepType
}

input ModelStringInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
  size: ModelSizeInput
}

input ModelStringKeyConditionInput {
  beginsWith: String
  between: [String]
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
}

input ModelSubscriptionAbstractJourneyEventFilterInput {
  and: [ModelSubscriptionAbstractJourneyEventFilterInput]
  businessGoal: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  description: ModelSubscriptionStringInput
  endTime: ModelSubscriptionStringInput
  enterpriseId: ModelSubscriptionIDInput
  flowId: ModelSubscriptionIDInput
  includeIntents: ModelSubscriptionBooleanInput
  industry: ModelSubscriptionStringInput
  journeyNameLibrary: ModelSubscriptionStringInput
  mode: ModelSubscriptionStringInput
  or: [ModelSubscriptionAbstractJourneyEventFilterInput]
  sharingMode: ModelSubscriptionStringInput
  sourceEnterpriseId: ModelSubscriptionIDInput
  startTime: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  useCase: ModelSubscriptionStringInput
  workspaceId: ModelSubscriptionIDInput
}

input ModelSubscriptionAiBrainFileManagerFilterInput {
  aiEnabled: ModelSubscriptionBooleanInput
  and: [ModelSubscriptionAiBrainFileManagerFilterInput]
  enterpriseId: ModelSubscriptionIDInput
  fileId: ModelSubscriptionIDInput
  mode: ModelSubscriptionStringInput
  name: ModelSubscriptionStringInput
  or: [ModelSubscriptionAiBrainFileManagerFilterInput]
  type: ModelSubscriptionStringInput
  url: ModelSubscriptionStringInput
  usage: ModelSubscriptionStringInput
}

input ModelSubscriptionAnalyticsDashboardFilterInput {
  analyticsDashboardId: ModelSubscriptionIDInput
  and: [ModelSubscriptionAnalyticsDashboardFilterInput]
  config: ModelSubscriptionStringInput
  enterpriseId: ModelSubscriptionIDInput
  mode: ModelSubscriptionStringInput
  name: ModelSubscriptionStringInput
  or: [ModelSubscriptionAnalyticsDashboardFilterInput]
}

input ModelSubscriptionApiFilterInput {
  and: [ModelSubscriptionApiFilterInput]
  apiId: ModelSubscriptionIDInput
  config: ModelSubscriptionStringInput
  enterpriseId: ModelSubscriptionIDInput
  mode: ModelSubscriptionStringInput
  name: ModelSubscriptionStringInput
  or: [ModelSubscriptionApiFilterInput]
  workspaceId: ModelSubscriptionIDInput
}

input ModelSubscriptionApiGateWayFilterInput {
  and: [ModelSubscriptionApiGateWayFilterInput]
  enterpriseId: ModelSubscriptionIDInput
  flow: ModelSubscriptionStringInput
  interaction: ModelSubscriptionStringInput
  mode: ModelSubscriptionStringInput
  name: ModelSubscriptionStringInput
  nodeId: ModelSubscriptionStringInput
  or: [ModelSubscriptionApiGateWayFilterInput]
  payload: ModelSubscriptionStringInput
  variable: ModelSubscriptionStringInput
  workspaceId: ModelSubscriptionIDInput
}

input ModelSubscriptionAudienceSegmentsFilterInput {
  and: [ModelSubscriptionAudienceSegmentsFilterInput]
  createdAt: ModelSubscriptionStringInput
  enterpriseId: ModelSubscriptionIDInput
  mode: ModelSubscriptionStringInput
  or: [ModelSubscriptionAudienceSegmentsFilterInput]
  segmentConfig: ModelSubscriptionStringInput
  segmentId: ModelSubscriptionIDInput
  segmentName: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
}

input ModelSubscriptionBooleanInput {
  eq: Boolean
  ne: Boolean
}

input ModelSubscriptionBroadcastFilterInput {
  advancedConfig: ModelSubscriptionStringInput
  and: [ModelSubscriptionBroadcastFilterInput]
  asset: ModelSubscriptionStringInput
  broadcastId: ModelSubscriptionIDInput
  catalogItems: ModelSubscriptionStringInput
  enterpriseId: ModelSubscriptionIDInput
  isCatalogue: ModelSubscriptionBooleanInput
  message: ModelSubscriptionStringInput
  mode: ModelSubscriptionStringInput
  name: ModelSubscriptionStringInput
  or: [ModelSubscriptionBroadcastFilterInput]
  scheduleTime: ModelSubscriptionStringInput
  senderReceiver: ModelSubscriptionStringInput
  status: ModelSubscriptionStringInput
}

input ModelSubscriptionBroadcastMessageFilterInput {
  and: [ModelSubscriptionBroadcastMessageFilterInput]
  broadcastId: ModelSubscriptionIDInput
  broadcastMessageId: ModelSubscriptionIDInput
  catalogItems: ModelSubscriptionStringInput
  customerId: ModelSubscriptionIDInput
  enterpriseId: ModelSubscriptionIDInput
  isCatalogue: ModelSubscriptionBooleanInput
  linkedAppId: ModelSubscriptionIDInput
  meta: ModelSubscriptionStringInput
  mode: ModelSubscriptionStringInput
  or: [ModelSubscriptionBroadcastMessageFilterInput]
  scheduleTime: ModelSubscriptionStringInput
  status: ModelSubscriptionStringInput
  timeToRespond: ModelSubscriptionIntInput
  waMessageId: ModelSubscriptionIDInput
}

input ModelSubscriptionCampaignApproverFilterInput {
  and: [ModelSubscriptionCampaignApproverFilterInput]
  approverId: ModelSubscriptionIDInput
  campaignId: ModelSubscriptionIDInput
  enterpriseId: ModelSubscriptionIDInput
  mode: ModelSubscriptionStringInput
  number: ModelSubscriptionStringInput
  or: [ModelSubscriptionCampaignApproverFilterInput]
}

input ModelSubscriptionCampaignAuditTrailFilterInput {
  and: [ModelSubscriptionCampaignAuditTrailFilterInput]
  approverId: ModelSubscriptionIDInput
  auditTrailId: ModelSubscriptionIDInput
  campaignId: ModelSubscriptionIDInput
  enterpriseId: ModelSubscriptionIDInput
  mode: ModelSubscriptionStringInput
  note: ModelSubscriptionStringInput
  or: [ModelSubscriptionCampaignAuditTrailFilterInput]
  senderId: ModelSubscriptionIDInput
  status: ModelSubscriptionStringInput
}

input ModelSubscriptionCampaignContactGroupFilterInput {
  and: [ModelSubscriptionCampaignContactGroupFilterInput]
  campaignId: ModelSubscriptionIDInput
  contactGroupId: ModelSubscriptionIDInput
  enterpriseId: ModelSubscriptionIDInput
  mode: ModelSubscriptionStringInput
  or: [ModelSubscriptionCampaignContactGroupFilterInput]
}

input ModelSubscriptionCampaignFilterInput {
  advancedConfig: ModelSubscriptionStringInput
  and: [ModelSubscriptionCampaignFilterInput]
  averageOrderValue: ModelSubscriptionStringInput
  campaignId: ModelSubscriptionIDInput
  createdById: ModelSubscriptionIDInput
  enterpriseId: ModelSubscriptionIDInput
  flowId: ModelSubscriptionIDInput
  integrationId: ModelSubscriptionIDInput
  isHidden: ModelSubscriptionBooleanInput
  language: ModelSubscriptionStringInput
  lastResponseSyncTime: ModelSubscriptionStringInput
  marketingCost: ModelSubscriptionStringInput
  mode: ModelSubscriptionStringInput
  name: ModelSubscriptionStringInput
  or: [ModelSubscriptionCampaignFilterInput]
  recurringCampaignId: ModelSubscriptionIDInput
  responseSyncStatus: ModelSubscriptionStringInput
  scheduleTime: ModelSubscriptionStringInput
  segment: ModelSubscriptionStringInput
  status: ModelSubscriptionStringInput
  type: ModelSubscriptionStringInput
  variables: ModelSubscriptionStringInput
  workflowId: ModelSubscriptionIDInput
  workflowStepsId: ModelSubscriptionIDInput
}

input ModelSubscriptionCampaignMessageFilterInput {
  and: [ModelSubscriptionCampaignMessageFilterInput]
  campaignId: ModelSubscriptionIDInput
  campaignMessageId: ModelSubscriptionIDInput
  channel: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  customerId: ModelSubscriptionIDInput
  enterpriseId: ModelSubscriptionIDInput
  isForApproval: ModelSubscriptionBooleanInput
  meta: ModelSubscriptionStringInput
  mode: ModelSubscriptionStringInput
  or: [ModelSubscriptionCampaignMessageFilterInput]
  retryCount: ModelSubscriptionIntInput
  scheduleTime: ModelSubscriptionStringInput
  sessionId: ModelSubscriptionIDInput
  status: ModelSubscriptionStringInput
  timeToRespond: ModelSubscriptionIntInput
  updatedAt: ModelSubscriptionStringInput
}

input ModelSubscriptionCatalogueFilterInput {
  and: [ModelSubscriptionCatalogueFilterInput]
  catalogueId: ModelSubscriptionIDInput
  countryOfOrigin: ModelSubscriptionStringInput
  description: ModelSubscriptionStringInput
  enterpriseId: ModelSubscriptionIDInput
  hide: ModelSubscriptionBooleanInput
  images: ModelSubscriptionStringInput
  integrationId: ModelSubscriptionIDInput
  itemCode: ModelSubscriptionStringInput
  link: ModelSubscriptionStringInput
  metaCatalogueId: ModelSubscriptionIDInput
  mode: ModelSubscriptionStringInput
  name: ModelSubscriptionStringInput
  or: [ModelSubscriptionCatalogueFilterInput]
  otherAttributes: ModelSubscriptionStringInput
  price: ModelSubscriptionStringInput
  retailerId: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
}

input ModelSubscriptionCloudFunctionsFilterInput {
  and: [ModelSubscriptionCloudFunctionsFilterInput]
  cloudFunctionsId: ModelSubscriptionIDInput
  code: ModelSubscriptionStringInput
  enterpriseId: ModelSubscriptionIDInput
  functionARN: ModelSubscriptionStringInput
  functionName: ModelSubscriptionStringInput
  functionURL: ModelSubscriptionStringInput
  mode: ModelSubscriptionStringInput
  name: ModelSubscriptionStringInput
  or: [ModelSubscriptionCloudFunctionsFilterInput]
  type: ModelSubscriptionStringInput
  workspaceId: ModelSubscriptionIDInput
}

input ModelSubscriptionCollectionCatalogueFilterInput {
  and: [ModelSubscriptionCollectionCatalogueFilterInput]
  catalogueId: ModelSubscriptionIDInput
  collectionId: ModelSubscriptionIDInput
  enterpriseId: ModelSubscriptionIDInput
  mode: ModelSubscriptionStringInput
  or: [ModelSubscriptionCollectionCatalogueFilterInput]
}

input ModelSubscriptionCollectionFilterInput {
  and: [ModelSubscriptionCollectionFilterInput]
  collectionId: ModelSubscriptionIDInput
  enterpriseId: ModelSubscriptionIDInput
  metaCatalogueId: ModelSubscriptionIDInput
  mode: ModelSubscriptionStringInput
  or: [ModelSubscriptionCollectionFilterInput]
  status: ModelSubscriptionStringInput
  title: ModelSubscriptionStringInput
}

input ModelSubscriptionContactGroupFilterInput {
  and: [ModelSubscriptionContactGroupFilterInput]
  contactGroupId: ModelSubscriptionIDInput
  contactListSource: ModelSubscriptionStringInput
  dynamic: ModelSubscriptionBooleanInput
  enterpriseId: ModelSubscriptionIDInput
  linkedAppId: ModelSubscriptionIDInput
  mode: ModelSubscriptionStringInput
  name: ModelSubscriptionStringInput
  or: [ModelSubscriptionContactGroupFilterInput]
  updatedAt: ModelSubscriptionStringInput
}

input ModelSubscriptionConversationFilterInput {
  agentInfo: ModelSubscriptionStringInput
  and: [ModelSubscriptionConversationFilterInput]
  content: ModelSubscriptionStringInput
  conversationId: ModelSubscriptionIDInput
  createdAt: ModelSubscriptionStringInput
  createdBy: ModelSubscriptionStringInput
  customerId: ModelSubscriptionIDInput
  enterpriseId: ModelSubscriptionIDInput
  imagePath: ModelSubscriptionStringInput
  metadata: ModelSubscriptionStringInput
  mode: ModelSubscriptionStringInput
  or: [ModelSubscriptionConversationFilterInput]
  senderId: ModelSubscriptionIDInput
  sessionId: ModelSubscriptionIDInput
}

input ModelSubscriptionConversationInfoFilterInput {
  analytics: ModelSubscriptionStringInput
  and: [ModelSubscriptionConversationInfoFilterInput]
  channelMessageId: ModelSubscriptionIDInput
  conversationId: ModelSubscriptionIDInput
  cumulativeLeadScore: ModelSubscriptionIntInput
  deliveredAt: ModelSubscriptionStringInput
  enterpriseId: ModelSubscriptionIDInput
  errorMessage: ModelSubscriptionStringInput
  leadScoreDiff: ModelSubscriptionIntInput
  mode: ModelSubscriptionStringInput
  or: [ModelSubscriptionConversationInfoFilterInput]
  pricing: ModelSubscriptionStringInput
  readAt: ModelSubscriptionStringInput
  submittedAt: ModelSubscriptionStringInput
  submittedToPartner: ModelSubscriptionStringInput
}

input ModelSubscriptionCustomerContactGroupFilterInput {
  and: [ModelSubscriptionCustomerContactGroupFilterInput]
  blacklisted: ModelSubscriptionBooleanInput
  contactGroupId: ModelSubscriptionIDInput
  customerId: ModelSubscriptionIDInput
  enterpriseId: ModelSubscriptionIDInput
  mode: ModelSubscriptionStringInput
  or: [ModelSubscriptionCustomerContactGroupFilterInput]
  updatedAt: ModelSubscriptionStringInput
}

input ModelSubscriptionCustomerFilterInput {
  and: [ModelSubscriptionCustomerFilterInput]
  blacklistReason: ModelSubscriptionStringInput
  blacklisted: ModelSubscriptionBooleanInput
  blacklistedAt: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  customerId: ModelSubscriptionIDInput
  email: ModelSubscriptionStringInput
  enterpriseId: ModelSubscriptionIDInput
  firstName: ModelSubscriptionStringInput
  lastName: ModelSubscriptionStringInput
  mode: ModelSubscriptionStringInput
  name: ModelSubscriptionStringInput
  or: [ModelSubscriptionCustomerFilterInput]
  parent: ModelSubscriptionStringInput
  parentId: ModelSubscriptionStringInput
  tags: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  variables: ModelSubscriptionStringInput
}

input ModelSubscriptionDatabaseSchemaFilterInput {
  and: [ModelSubscriptionDatabaseSchemaFilterInput]
  config: ModelSubscriptionStringInput
  databaseSchemaId: ModelSubscriptionIDInput
  description: ModelSubscriptionStringInput
  enterpriseId: ModelSubscriptionIDInput
  key: ModelSubscriptionStringInput
  mode: ModelSubscriptionStringInput
  or: [ModelSubscriptionDatabaseSchemaFilterInput]
  schema: ModelSubscriptionStringInput
  timeFilterField: ModelSubscriptionStringInput
  workspaceId: ModelSubscriptionIDInput
}

input ModelSubscriptionDatabaseValuesFilterInput {
  and: [ModelSubscriptionDatabaseValuesFilterInput]
  databaseSchemaId: ModelSubscriptionIDInput
  databaseValuesId: ModelSubscriptionIDInput
  enterpriseId: ModelSubscriptionIDInput
  mode: ModelSubscriptionStringInput
  or: [ModelSubscriptionDatabaseValuesFilterInput]
  value: ModelSubscriptionStringInput
}

input ModelSubscriptionEnterpriseFilterInput {
  and: [ModelSubscriptionEnterpriseFilterInput]
  brandId: ModelSubscriptionStringInput
  contactAttributes: ModelSubscriptionStringInput
  enterpriseId: ModelSubscriptionIDInput
  isActive: ModelSubscriptionBooleanInput
  name: ModelSubscriptionStringInput
  onboarding: ModelSubscriptionBooleanInput
  or: [ModelSubscriptionEnterpriseFilterInput]
  organizationId: ModelSubscriptionIDInput
  variables: ModelSubscriptionStringInput
}

input ModelSubscriptionEntityFilterInput {
  and: [ModelSubscriptionEntityFilterInput]
  enterpriseId: ModelSubscriptionIDInput
  entityData: ModelSubscriptionStringInput
  entityId: ModelSubscriptionIDInput
  language: ModelSubscriptionStringInput
  mode: ModelSubscriptionStringInput
  name: ModelSubscriptionStringInput
  or: [ModelSubscriptionEntityFilterInput]
  resolutionStrategy: ModelSubscriptionStringInput
  slotTypeId: ModelSubscriptionIDInput
  type: ModelSubscriptionStringInput
  workspaceId: ModelSubscriptionIDInput
}

input ModelSubscriptionEventLabelFilterInput {
  and: [ModelSubscriptionEventLabelFilterInput]
  campaignId: ModelSubscriptionStringInput
  conversationId: ModelSubscriptionIDInput
  createdAt: ModelSubscriptionStringInput
  customerId: ModelSubscriptionIDInput
  enterpriseId: ModelSubscriptionIDInput
  flowId: ModelSubscriptionIDInput
  interactionId: ModelSubscriptionIDInput
  label: ModelSubscriptionStringInput
  labelId: ModelSubscriptionIDInput
  mode: ModelSubscriptionStringInput
  nodeId: ModelSubscriptionIDInput
  or: [ModelSubscriptionEventLabelFilterInput]
  previousLabel: ModelSubscriptionStringInput
  previousValue: ModelSubscriptionStringInput
  sessionId: ModelSubscriptionIDInput
  type: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  value: ModelSubscriptionStringInput
  workspaceId: ModelSubscriptionIDInput
}

input ModelSubscriptionFileManagerFilesFilterInput {
  and: [ModelSubscriptionFileManagerFilesFilterInput]
  description: ModelSubscriptionStringInput
  enterpriseId: ModelSubscriptionIDInput
  fileManagerFilesId: ModelSubscriptionIDInput
  fileType: ModelSubscriptionStringInput
  isFavorite: ModelSubscriptionBooleanInput
  name: ModelSubscriptionStringInput
  nanoId: ModelSubscriptionStringInput
  or: [ModelSubscriptionFileManagerFilesFilterInput]
  size: ModelSubscriptionStringInput
  tags: ModelSubscriptionStringInput
  url: ModelSubscriptionStringInput
  workspaceId: ModelSubscriptionIDInput
}

input ModelSubscriptionFloatInput {
  between: [Float]
  eq: Float
  ge: Float
  gt: Float
  in: [Float]
  le: Float
  lt: Float
  ne: Float
  notIn: [Float]
}

input ModelSubscriptionFlowFilterInput {
  and: [ModelSubscriptionFlowFilterInput]
  campaignId: ModelSubscriptionIDInput
  designConfig: ModelSubscriptionStringInput
  enterpriseId: ModelSubscriptionIDInput
  fallbackId: ModelSubscriptionIDInput
  flowId: ModelSubscriptionIDInput
  flowTemplateId: ModelSubscriptionIDInput
  idleId: ModelSubscriptionIDInput
  isImported: ModelSubscriptionBooleanInput
  isInbound: ModelSubscriptionBooleanInput
  mode: ModelSubscriptionStringInput
  name: ModelSubscriptionStringInput
  or: [ModelSubscriptionFlowFilterInput]
  recurringCampaignId: ModelSubscriptionIDInput
  settings: ModelSubscriptionStringInput
  startId: ModelSubscriptionIDInput
  status: ModelSubscriptionBooleanInput
  workflowId: ModelSubscriptionIDInput
  workflowStepsId: ModelSubscriptionIDInput
  workspaceId: ModelSubscriptionIDInput
}

input ModelSubscriptionFlowTemplateFilterInput {
  and: [ModelSubscriptionFlowTemplateFilterInput]
  businessGoal: ModelSubscriptionStringInput
  channels: ModelSubscriptionStringInput
  enterpriseId: ModelSubscriptionIDInput
  flowId: ModelSubscriptionIDInput
  flowTemplateId: ModelSubscriptionIDInput
  industry: ModelSubscriptionStringInput
  isPrivate: ModelSubscriptionBooleanInput
  mode: ModelSubscriptionStringInput
  or: [ModelSubscriptionFlowTemplateFilterInput]
  templateData: ModelSubscriptionStringInput
  templateDescription: ModelSubscriptionStringInput
  templateIcon: ModelSubscriptionStringInput
  templateName: ModelSubscriptionStringInput
  workspaceId: ModelSubscriptionIDInput
}

input ModelSubscriptionHealthTableFilterInput {
  and: [ModelSubscriptionHealthTableFilterInput]
  channel: ModelSubscriptionStringInput
  checkFlag: ModelSubscriptionIntInput
  config: ModelSubscriptionStringInput
  count: ModelSubscriptionIntInput
  createdAt: ModelSubscriptionStringInput
  description: ModelSubscriptionStringInput
  enterpriseId: ModelSubscriptionIDInput
  functionOrigin: ModelSubscriptionStringInput
  healthTableId: ModelSubscriptionIDInput
  link: ModelSubscriptionStringInput
  mode: ModelSubscriptionStringInput
  nodeId: ModelSubscriptionIDInput
  or: [ModelSubscriptionHealthTableFilterInput]
  read: ModelSubscriptionBooleanInput
  status: ModelSubscriptionStringInput
  subType: ModelSubscriptionStringInput
  title: ModelSubscriptionStringInput
  type: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  userId: ModelSubscriptionIDInput
}

input ModelSubscriptionIDInput {
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  in: [ID]
  le: ID
  lt: ID
  ne: ID
  notContains: ID
  notIn: [ID]
}

input ModelSubscriptionIntInput {
  between: [Int]
  eq: Int
  ge: Int
  gt: Int
  in: [Int]
  le: Int
  lt: Int
  ne: Int
  notIn: [Int]
}

input ModelSubscriptionIntegrationFilterInput {
  and: [ModelSubscriptionIntegrationFilterInput]
  channel: ModelSubscriptionStringInput
  config: ModelSubscriptionStringInput
  details: ModelSubscriptionStringInput
  enterpriseId: ModelSubscriptionIDInput
  flowId: ModelSubscriptionIDInput
  integrationId: ModelSubscriptionIDInput
  logo: ModelSubscriptionStringInput
  metaCatalogueId: ModelSubscriptionIDInput
  mode: ModelSubscriptionStringInput
  name: ModelSubscriptionStringInput
  number: ModelSubscriptionStringInput
  or: [ModelSubscriptionIntegrationFilterInput]
  primary: ModelSubscriptionBooleanInput
  saas: ModelSubscriptionStringInput
  workspaceId: ModelSubscriptionIDInput
}

input ModelSubscriptionIntentEventFilterInput {
  and: [ModelSubscriptionIntentEventFilterInput]
  businessGoal: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  description: ModelSubscriptionStringInput
  endTime: ModelSubscriptionStringInput
  enterpriseId: ModelSubscriptionIDInput
  includeIntents: ModelSubscriptionBooleanInput
  industry: ModelSubscriptionStringInput
  intentEventId: ModelSubscriptionIDInput
  mode: ModelSubscriptionStringInput
  name: ModelSubscriptionStringInput
  or: [ModelSubscriptionIntentEventFilterInput]
  sharingMode: ModelSubscriptionStringInput
  sourceEnterpriseId: ModelSubscriptionIDInput
  startTime: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  useCase: ModelSubscriptionStringInput
  workspaceId: ModelSubscriptionIDInput
}

input ModelSubscriptionIntentFilterInput {
  and: [ModelSubscriptionIntentFilterInput]
  enterpriseId: ModelSubscriptionIDInput
  intentId: ModelSubscriptionIDInput
  language: ModelSubscriptionStringInput
  lexIntentId: ModelSubscriptionIDInput
  mode: ModelSubscriptionStringInput
  name: ModelSubscriptionStringInput
  nodeId: ModelSubscriptionIDInput
  or: [ModelSubscriptionIntentFilterInput]
  slots: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  utterance: ModelSubscriptionStringInput
  workspaceId: ModelSubscriptionIDInput
}

input ModelSubscriptionInteractionEventFilterInput {
  and: [ModelSubscriptionInteractionEventFilterInput]
  businessGoal: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  description: ModelSubscriptionStringInput
  endTime: ModelSubscriptionStringInput
  enterpriseId: ModelSubscriptionIDInput
  includeIntents: ModelSubscriptionBooleanInput
  industry: ModelSubscriptionStringInput
  interactionId: ModelSubscriptionIDInput
  mode: ModelSubscriptionStringInput
  name: ModelSubscriptionStringInput
  or: [ModelSubscriptionInteractionEventFilterInput]
  sharingMode: ModelSubscriptionStringInput
  sourceEnterpriseId: ModelSubscriptionIDInput
  startTime: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  useCase: ModelSubscriptionStringInput
  workspaceId: ModelSubscriptionIDInput
}

input ModelSubscriptionInteractionFilterInput {
  and: [ModelSubscriptionInteractionFilterInput]
  enterpriseId: ModelSubscriptionIDInput
  flowId: ModelSubscriptionIDInput
  interactionId: ModelSubscriptionIDInput
  mode: ModelSubscriptionStringInput
  name: ModelSubscriptionStringInput
  or: [ModelSubscriptionInteractionFilterInput]
}

input ModelSubscriptionJobFilterInput {
  and: [ModelSubscriptionJobFilterInput]
  description: ModelSubscriptionStringInput
  enterpriseId: ModelSubscriptionIDInput
  executionArn: ModelSubscriptionStringInput
  failureReasons: ModelSubscriptionStringInput
  jobId: ModelSubscriptionIDInput
  mode: ModelSubscriptionStringInput
  or: [ModelSubscriptionJobFilterInput]
  payload: ModelSubscriptionStringInput
  read: ModelSubscriptionBooleanInput
  result: ModelSubscriptionStringInput
  status: ModelSubscriptionStringInput
  type: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  userId: ModelSubscriptionIDInput
}

input ModelSubscriptionLinkedAppCatalogueFilterInput {
  and: [ModelSubscriptionLinkedAppCatalogueFilterInput]
  catalogueId: ModelSubscriptionIDInput
  enterpriseId: ModelSubscriptionIDInput
  hide: ModelSubscriptionBooleanInput
  linkedAppId: ModelSubscriptionIDInput
  mode: ModelSubscriptionStringInput
  or: [ModelSubscriptionLinkedAppCatalogueFilterInput]
  status: ModelSubscriptionStringInput
  waLinkedAppCatalogueId: ModelSubscriptionStringInput
}

input ModelSubscriptionLinkedAppCollectionFilterInput {
  and: [ModelSubscriptionLinkedAppCollectionFilterInput]
  collectionId: ModelSubscriptionIDInput
  enterpriseId: ModelSubscriptionIDInput
  linkedAppId: ModelSubscriptionIDInput
  mode: ModelSubscriptionStringInput
  or: [ModelSubscriptionLinkedAppCollectionFilterInput]
  status: ModelSubscriptionStringInput
  waLinkedAppCollectionId: ModelSubscriptionStringInput
}

input ModelSubscriptionLinkedAppCustomerFilterInput {
  and: [ModelSubscriptionLinkedAppCustomerFilterInput]
  customerDetails: ModelSubscriptionStringInput
  customerId: ModelSubscriptionIDInput
  enterpriseId: ModelSubscriptionIDInput
  linkedAppId: ModelSubscriptionIDInput
  mode: ModelSubscriptionStringInput
  or: [ModelSubscriptionLinkedAppCustomerFilterInput]
  updatedAt: ModelSubscriptionStringInput
}

input ModelSubscriptionLinkedAppFilterInput {
  and: [ModelSubscriptionLinkedAppFilterInput]
  config: ModelSubscriptionStringInput
  contactGroupId: ModelSubscriptionIDInput
  details: ModelSubscriptionStringInput
  email: ModelSubscriptionStringInput
  enterpriseId: ModelSubscriptionIDInput
  isBusinessAccount: ModelSubscriptionBooleanInput
  isCartEnabled: ModelSubscriptionBooleanInput
  lastSyncTime: ModelSubscriptionStringInput
  linkedAppId: ModelSubscriptionIDInput
  mode: ModelSubscriptionStringInput
  name: ModelSubscriptionStringInput
  or: [ModelSubscriptionLinkedAppFilterInput]
  qrCode: ModelSubscriptionStringInput
  role: ModelSubscriptionStringInput
  status: ModelSubscriptionStringInput
}

input ModelSubscriptionLinkedAppMessageFilterInput {
  and: [ModelSubscriptionLinkedAppMessageFilterInput]
  createdAt: ModelSubscriptionStringInput
  customerId: ModelSubscriptionIDInput
  enterpriseId: ModelSubscriptionIDInput
  linkedAppId: ModelSubscriptionIDInput
  message: ModelSubscriptionStringInput
  mode: ModelSubscriptionStringInput
  or: [ModelSubscriptionLinkedAppMessageFilterInput]
  updatedAt: ModelSubscriptionStringInput
  waMessageId: ModelSubscriptionIDInput
}

input ModelSubscriptionMetaCatalogueFilterInput {
  and: [ModelSubscriptionMetaCatalogueFilterInput]
  enterpriseId: ModelSubscriptionIDInput
  integrationId: ModelSubscriptionIDInput
  isCartEnabled: ModelSubscriptionBooleanInput
  isCatalogVisible: ModelSubscriptionBooleanInput
  metaCatalogueId: ModelSubscriptionIDInput
  mode: ModelSubscriptionStringInput
  name: ModelSubscriptionStringInput
  or: [ModelSubscriptionMetaCatalogueFilterInput]
}

input ModelSubscriptionMissedUtteranceFilterInput {
  and: [ModelSubscriptionMissedUtteranceFilterInput]
  channel: ModelSubscriptionStringInput
  confidence: ModelSubscriptionFloatInput
  enterpriseId: ModelSubscriptionIDInput
  language: ModelSubscriptionStringInput
  missedUtteranceId: ModelSubscriptionIDInput
  mode: ModelSubscriptionStringInput
  nodeId: ModelSubscriptionStringInput
  or: [ModelSubscriptionMissedUtteranceFilterInput]
  updatedAt: ModelSubscriptionStringInput
  utterance: ModelSubscriptionStringInput
  workspaceId: ModelSubscriptionIDInput
}

input ModelSubscriptionModuleFilterInput {
  and: [ModelSubscriptionModuleFilterInput]
  enterpriseId: ModelSubscriptionIDInput
  moduleId: ModelSubscriptionIDInput
  name: ModelSubscriptionStringInput
  or: [ModelSubscriptionModuleFilterInput]
  roleId: ModelSubscriptionIDInput
  subModule: ModelSubscriptionStringInput
}

input ModelSubscriptionNodeFilterInput {
  and: [ModelSubscriptionNodeFilterInput]
  config: ModelSubscriptionStringInput
  connectedNodes: ModelSubscriptionStringInput
  connectedNodesData: ModelSubscriptionStringInput
  enterpriseId: ModelSubscriptionIDInput
  errorMessage: ModelSubscriptionStringInput
  intentId: ModelSubscriptionIDInput
  interactionId: ModelSubscriptionIDInput
  language: ModelSubscriptionStringInput
  mode: ModelSubscriptionStringInput
  nextId: ModelSubscriptionIDInput
  noError: ModelSubscriptionBooleanInput
  nodeId: ModelSubscriptionIDInput
  or: [ModelSubscriptionNodeFilterInput]
  previousId: ModelSubscriptionIDInput
  templateId: ModelSubscriptionIDInput
  type: ModelSubscriptionStringInput
}

input ModelSubscriptionNotificationFilterInput {
  and: [ModelSubscriptionNotificationFilterInput]
  categoryStatus: ModelSubscriptionStringInput
  description: ModelSubscriptionStringInput
  enterpriseId: ModelSubscriptionIDInput
  link: ModelSubscriptionStringInput
  mode: ModelSubscriptionStringInput
  notificationId: ModelSubscriptionIDInput
  or: [ModelSubscriptionNotificationFilterInput]
  read: ModelSubscriptionBooleanInput
  title: ModelSubscriptionStringInput
  type: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  userId: ModelSubscriptionIDInput
}

input ModelSubscriptionOrganizationFilterInput {
  and: [ModelSubscriptionOrganizationFilterInput]
  brandId: ModelSubscriptionStringInput
  brandName: ModelSubscriptionStringInput
  name: ModelSubscriptionStringInput
  or: [ModelSubscriptionOrganizationFilterInput]
  organizationId: ModelSubscriptionIDInput
}

input ModelSubscriptionOutwardWebhookFilterInput {
  and: [ModelSubscriptionOutwardWebhookFilterInput]
  config: ModelSubscriptionStringInput
  description: ModelSubscriptionStringInput
  enterpriseId: ModelSubscriptionIDInput
  filters: ModelSubscriptionStringInput
  mode: ModelSubscriptionStringInput
  name: ModelSubscriptionStringInput
  or: [ModelSubscriptionOutwardWebhookFilterInput]
  outwardWebhookId: ModelSubscriptionIDInput
  workspaceId: ModelSubscriptionIDInput
}

input ModelSubscriptionPermissionFilterInput {
  and: [ModelSubscriptionPermissionFilterInput]
  create: ModelSubscriptionBooleanInput
  delete: ModelSubscriptionBooleanInput
  enterpriseId: ModelSubscriptionIDInput
  moduleId: ModelSubscriptionIDInput
  or: [ModelSubscriptionPermissionFilterInput]
  permissionId: ModelSubscriptionIDInput
  read: ModelSubscriptionBooleanInput
  roleId: ModelSubscriptionIDInput
  subModulePermission: ModelSubscriptionStringInput
  update: ModelSubscriptionBooleanInput
}

input ModelSubscriptionProfileFilterInput {
  and: [ModelSubscriptionProfileFilterInput]
  channel: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  customerId: ModelSubscriptionIDInput
  enterpriseId: ModelSubscriptionIDInput
  maskedProfileId: ModelSubscriptionStringInput
  mode: ModelSubscriptionStringInput
  or: [ModelSubscriptionProfileFilterInput]
  profileId: ModelSubscriptionIDInput
}

input ModelSubscriptionRecurringCampaignFilterInput {
  and: [ModelSubscriptionRecurringCampaignFilterInput]
  enterpriseId: ModelSubscriptionIDInput
  flowId: ModelSubscriptionIDInput
  language: ModelSubscriptionStringInput
  lastResponseSyncTime: ModelSubscriptionStringInput
  mode: ModelSubscriptionStringInput
  name: ModelSubscriptionStringInput
  or: [ModelSubscriptionRecurringCampaignFilterInput]
  recurringCampaignId: ModelSubscriptionIDInput
  responseSyncStatus: ModelSubscriptionStringInput
  segment: ModelSubscriptionStringInput
  type: ModelSubscriptionStringInput
  variables: ModelSubscriptionStringInput
}

input ModelSubscriptionRoleFilterInput {
  and: [ModelSubscriptionRoleFilterInput]
  enterpriseId: ModelSubscriptionIDInput
  moduleId: ModelSubscriptionIDInput
  name: ModelSubscriptionStringInput
  or: [ModelSubscriptionRoleFilterInput]
  roleId: ModelSubscriptionIDInput
}

input ModelSubscriptionSaasTriggerFilterInput {
  and: [ModelSubscriptionSaasTriggerFilterInput]
  channel: ModelSubscriptionStringInput
  customerAttrPath: ModelSubscriptionStringInput
  enterpriseId: ModelSubscriptionIDInput
  incomingPath: ModelSubscriptionStringInput
  mode: ModelSubscriptionStringInput
  name: ModelSubscriptionStringInput
  or: [ModelSubscriptionSaasTriggerFilterInput]
  otherDetails: ModelSubscriptionStringInput
  saasTriggerId: ModelSubscriptionIDInput
  triggerType: ModelSubscriptionStringInput
  type: ModelSubscriptionStringInput
  workspaceId: ModelSubscriptionIDInput
}

input ModelSubscriptionScheduleNodeFilterInput {
  and: [ModelSubscriptionScheduleNodeFilterInput]
  enterpriseId: ModelSubscriptionIDInput
  mode: ModelSubscriptionStringInput
  nodeId: ModelSubscriptionIDInput
  or: [ModelSubscriptionScheduleNodeFilterInput]
  scheduleNodeId: ModelSubscriptionIDInput
  sessionId: ModelSubscriptionIDInput
  status: ModelSubscriptionStringInput
  time: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
}

input ModelSubscriptionSessionFilterInput {
  active: ModelSubscriptionBooleanInput
  agentId: ModelSubscriptionIDInput
  and: [ModelSubscriptionSessionFilterInput]
  assignment: ModelSubscriptionStringInput
  campaignMessageId: ModelSubscriptionIDInput
  channel: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  currentNodeId: ModelSubscriptionIDInput
  customerId: ModelSubscriptionIDInput
  enterpriseId: ModelSubscriptionIDInput
  federatedLiveToCustomerId: ModelSubscriptionIDInput
  federatedRole: ModelSubscriptionStringInput
  flowId: ModelSubscriptionIDInput
  healthTableId: ModelSubscriptionIDInput
  initiatedBy: ModelSubscriptionStringInput
  integrationId: ModelSubscriptionIDInput
  language: ModelSubscriptionStringInput
  metaConversationId: ModelSubscriptionIDInput
  mode: ModelSubscriptionStringInput
  nextNodeId: ModelSubscriptionIDInput
  nodeId: ModelSubscriptionIDInput
  or: [ModelSubscriptionSessionFilterInput]
  preview: ModelSubscriptionBooleanInput
  referrer: ModelSubscriptionStringInput
  referrerType: ModelSubscriptionStringInput
  sessionId: ModelSubscriptionIDInput
  tags: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  validationCount: ModelSubscriptionIntInput
  variables: ModelSubscriptionStringInput
  workspaceId: ModelSubscriptionIDInput
}

input ModelSubscriptionStringInput {
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  in: [String]
  le: String
  lt: String
  ne: String
  notContains: String
  notIn: [String]
}

input ModelSubscriptionTableViewsFilterInput {
  and: [ModelSubscriptionTableViewsFilterInput]
  databaseKey: ModelSubscriptionStringInput
  enterpriseId: ModelSubscriptionIDInput
  mode: ModelSubscriptionStringInput
  name: ModelSubscriptionStringInput
  or: [ModelSubscriptionTableViewsFilterInput]
  tableViewsId: ModelSubscriptionIDInput
  type: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  viewConfig: ModelSubscriptionStringInput
}

input ModelSubscriptionTemplateEventFilterInput {
  and: [ModelSubscriptionTemplateEventFilterInput]
  businessGoal: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  description: ModelSubscriptionStringInput
  endTime: ModelSubscriptionStringInput
  enterpriseId: ModelSubscriptionIDInput
  includeIntents: ModelSubscriptionBooleanInput
  industry: ModelSubscriptionStringInput
  mode: ModelSubscriptionStringInput
  name: ModelSubscriptionStringInput
  or: [ModelSubscriptionTemplateEventFilterInput]
  sharingMode: ModelSubscriptionStringInput
  sourceEnterpriseId: ModelSubscriptionIDInput
  startTime: ModelSubscriptionStringInput
  templateEventId: ModelSubscriptionIDInput
  templateType: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  useCase: ModelSubscriptionStringInput
  workspaceId: ModelSubscriptionIDInput
}

input ModelSubscriptionTemplatesFilterInput {
  and: [ModelSubscriptionTemplatesFilterInput]
  category: ModelSubscriptionStringInput
  channel: ModelSubscriptionStringInput
  config: ModelSubscriptionStringInput
  enterpriseId: ModelSubscriptionIDInput
  integrationId: ModelSubscriptionIDInput
  language: ModelSubscriptionStringInput
  mode: ModelSubscriptionStringInput
  namespaceId: ModelSubscriptionStringInput
  nodeId: ModelSubscriptionIDInput
  or: [ModelSubscriptionTemplatesFilterInput]
  phoneNo: ModelSubscriptionStringInput
  reSubmit: ModelSubscriptionBooleanInput
  status: ModelSubscriptionStringInput
  statusMessage: ModelSubscriptionStringInput
  templateId: ModelSubscriptionStringInput
  templatesId: ModelSubscriptionIDInput
  title: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
}

input ModelSubscriptionTriggerFilterInput {
  and: [ModelSubscriptionTriggerFilterInput]
  enterpriseId: ModelSubscriptionIDInput
  mode: ModelSubscriptionStringInput
  name: ModelSubscriptionStringInput
  nodeId: ModelSubscriptionIDInput
  or: [ModelSubscriptionTriggerFilterInput]
  triggerId: ModelSubscriptionIDInput
  workspaceId: ModelSubscriptionIDInput
}

input ModelSubscriptionUserFilterInput {
  active: ModelSubscriptionBooleanInput
  and: [ModelSubscriptionUserFilterInput]
  availability: ModelSubscriptionStringInput
  avatarUrl: ModelSubscriptionStringInput
  browserToken: ModelSubscriptionStringInput
  clerkUserId: ModelSubscriptionStringInput
  email: ModelSubscriptionStringInput
  enterpriseId: ModelSubscriptionIDInput
  inviterUserIdClerk: ModelSubscriptionStringInput
  isLoggedIn: ModelSubscriptionBooleanInput
  lName: ModelSubscriptionStringInput
  lastSignIn: ModelSubscriptionStringInput
  name: ModelSubscriptionStringInput
  notificationConfig: ModelSubscriptionStringInput
  or: [ModelSubscriptionUserFilterInput]
  phoneNumber: ModelSubscriptionStringInput
  profileDetails: ModelSubscriptionStringInput
  roleId: ModelSubscriptionIDInput
  updatedAt: ModelSubscriptionStringInput
  userId: ModelSubscriptionIDInput
}

input ModelSubscriptionUtteranceFilterInput {
  and: [ModelSubscriptionUtteranceFilterInput]
  enterpriseId: ModelSubscriptionIDInput
  intentId: ModelSubscriptionIDInput
  isPaid: ModelSubscriptionBooleanInput
  mode: ModelSubscriptionStringInput
  or: [ModelSubscriptionUtteranceFilterInput]
  sourceName: ModelSubscriptionStringInput
  utterance: ModelSubscriptionStringInput
  utteranceId: ModelSubscriptionIDInput
}

input ModelSubscriptionWhatsappFlowsFilterInput {
  and: [ModelSubscriptionWhatsappFlowsFilterInput]
  config: ModelSubscriptionStringInput
  enterpriseId: ModelSubscriptionIDInput
  integrationId: ModelSubscriptionIDInput
  mode: ModelSubscriptionStringInput
  name: ModelSubscriptionStringInput
  or: [ModelSubscriptionWhatsappFlowsFilterInput]
  status: ModelSubscriptionStringInput
  whatsappFlowId: ModelSubscriptionIDInput
}

input ModelSubscriptionWorkflowStepEventFilterInput {
  and: [ModelSubscriptionWorkflowStepEventFilterInput]
  campaignId: ModelSubscriptionIDInput
  createdAt: ModelSubscriptionStringInput
  customerId: ModelSubscriptionIDInput
  endTime: ModelSubscriptionStringInput
  enterpriseId: ModelSubscriptionIDInput
  eventToBeTracked: ModelSubscriptionStringInput
  flowId: ModelSubscriptionIDInput
  mode: ModelSubscriptionStringInput
  or: [ModelSubscriptionWorkflowStepEventFilterInput]
  startTime: ModelSubscriptionStringInput
  stepId: ModelSubscriptionIDInput
  updatedAt: ModelSubscriptionStringInput
  workflowId: ModelSubscriptionIDInput
}

input ModelSubscriptionWorkflowStepsFilterInput {
  and: [ModelSubscriptionWorkflowStepsFilterInput]
  campaignId: ModelSubscriptionIDInput
  conditionalNextSteps: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  enterpriseId: ModelSubscriptionIDInput
  flowId: ModelSubscriptionIDInput
  integrationId: ModelSubscriptionIDInput
  mode: ModelSubscriptionStringInput
  nextStepId: ModelSubscriptionIDInput
  or: [ModelSubscriptionWorkflowStepsFilterInput]
  previousStepId: ModelSubscriptionIDInput
  status: ModelSubscriptionStringInput
  stepConfig: ModelSubscriptionStringInput
  stepDetails: ModelSubscriptionStringInput
  stepId: ModelSubscriptionIDInput
  stepType: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  workflowId: ModelSubscriptionIDInput
}

input ModelSubscriptionWorkflowsFilterInput {
  and: [ModelSubscriptionWorkflowsFilterInput]
  config: ModelSubscriptionStringInput
  currentStepId: ModelSubscriptionIDInput
  enterpriseId: ModelSubscriptionIDInput
  mode: ModelSubscriptionStringInput
  or: [ModelSubscriptionWorkflowsFilterInput]
  startingCampaignId: ModelSubscriptionIDInput
  startingFlowId: ModelSubscriptionIDInput
  status: ModelSubscriptionStringInput
  workflowId: ModelSubscriptionIDInput
  workflowName: ModelSubscriptionStringInput
}

input ModelSubscriptionWorkspaceFilterInput {
  active: ModelSubscriptionBooleanInput
  and: [ModelSubscriptionWorkspaceFilterInput]
  botAliasId: ModelSubscriptionStringInput
  botDraftId: ModelSubscriptionStringInput
  botFailureReason: ModelSubscriptionStringInput
  botId: ModelSubscriptionStringInput
  botLastUpdated: ModelSubscriptionStringInput
  botStatus: ModelSubscriptionStringInput
  defaultLanguage: ModelSubscriptionStringInput
  defaultTables: ModelSubscriptionStringInput
  designConfig: ModelSubscriptionStringInput
  enterpriseId: ModelSubscriptionIDInput
  isImported: ModelSubscriptionBooleanInput
  language: ModelSubscriptionStringInput
  mode: ModelSubscriptionStringInput
  name: ModelSubscriptionStringInput
  or: [ModelSubscriptionWorkspaceFilterInput]
  publishConfig: ModelSubscriptionStringInput
  publishLastUpdated: ModelSubscriptionStringInput
  sessionTimeout: ModelSubscriptionStringInput
  timeZone: ModelSubscriptionStringInput
  tools: ModelSubscriptionStringInput
  unSupportedMessages: ModelSubscriptionStringInput
  variables: ModelSubscriptionStringInput
  workspaceId: ModelSubscriptionIDInput
  workspaceLastPublished: ModelSubscriptionStringInput
}

input ModelTableTypeInput {
  eq: TableType
  ne: TableType
}

input ModelTableViewsConditionInput {
  and: [ModelTableViewsConditionInput]
  databaseKey: ModelStringInput
  name: ModelStringInput
  not: ModelTableViewsConditionInput
  or: [ModelTableViewsConditionInput]
  type: ModelTableTypeInput
  updatedAt: ModelStringInput
  viewConfig: ModelStringInput
}

input ModelTableViewsFilterInput {
  and: [ModelTableViewsFilterInput]
  databaseKey: ModelStringInput
  enterpriseId: ModelIDInput
  mode: ModelMODEInput
  name: ModelStringInput
  not: ModelTableViewsFilterInput
  or: [ModelTableViewsFilterInput]
  tableViewsId: ModelIDInput
  type: ModelTableTypeInput
  updatedAt: ModelStringInput
  viewConfig: ModelStringInput
}

input ModelTableViewsPrimaryCompositeKeyConditionInput {
  beginsWith: ModelTableViewsPrimaryCompositeKeyInput
  between: [ModelTableViewsPrimaryCompositeKeyInput]
  eq: ModelTableViewsPrimaryCompositeKeyInput
  ge: ModelTableViewsPrimaryCompositeKeyInput
  gt: ModelTableViewsPrimaryCompositeKeyInput
  le: ModelTableViewsPrimaryCompositeKeyInput
  lt: ModelTableViewsPrimaryCompositeKeyInput
}

input ModelTableViewsPrimaryCompositeKeyInput {
  mode: MODE
  tableViewsId: ID
}

input ModelTemplateCategoryInput {
  eq: TemplateCategory
  ne: TemplateCategory
}

input ModelTemplateEventConditionInput {
  and: [ModelTemplateEventConditionInput]
  businessGoal: ModelStringInput
  createdAt: ModelStringInput
  description: ModelStringInput
  endTime: ModelStringInput
  includeIntents: ModelBooleanInput
  industry: ModelStringInput
  name: ModelStringInput
  not: ModelTemplateEventConditionInput
  or: [ModelTemplateEventConditionInput]
  sharingMode: ModelStringInput
  sourceEnterpriseId: ModelIDInput
  startTime: ModelStringInput
  templateType: ModelStringInput
  updatedAt: ModelStringInput
  useCase: ModelStringInput
  workspaceId: ModelIDInput
}

input ModelTemplateEventFilterInput {
  and: [ModelTemplateEventFilterInput]
  businessGoal: ModelStringInput
  createdAt: ModelStringInput
  description: ModelStringInput
  endTime: ModelStringInput
  enterpriseId: ModelIDInput
  includeIntents: ModelBooleanInput
  industry: ModelStringInput
  mode: ModelMODEInput
  name: ModelStringInput
  not: ModelTemplateEventFilterInput
  or: [ModelTemplateEventFilterInput]
  sharingMode: ModelStringInput
  sourceEnterpriseId: ModelIDInput
  startTime: ModelStringInput
  templateEventId: ModelIDInput
  templateType: ModelStringInput
  updatedAt: ModelStringInput
  useCase: ModelStringInput
  workspaceId: ModelIDInput
}

input ModelTemplateEventPrimaryCompositeKeyConditionInput {
  beginsWith: ModelTemplateEventPrimaryCompositeKeyInput
  between: [ModelTemplateEventPrimaryCompositeKeyInput]
  eq: ModelTemplateEventPrimaryCompositeKeyInput
  ge: ModelTemplateEventPrimaryCompositeKeyInput
  gt: ModelTemplateEventPrimaryCompositeKeyInput
  le: ModelTemplateEventPrimaryCompositeKeyInput
  lt: ModelTemplateEventPrimaryCompositeKeyInput
}

input ModelTemplateEventPrimaryCompositeKeyInput {
  mode: MODE
  templateEventId: ID
}

input ModelTemplateEventTemplateEventByWorkspaceIdCompositeKeyConditionInput {
  beginsWith: ModelTemplateEventTemplateEventByWorkspaceIdCompositeKeyInput
  between: [ModelTemplateEventTemplateEventByWorkspaceIdCompositeKeyInput]
  eq: ModelTemplateEventTemplateEventByWorkspaceIdCompositeKeyInput
  ge: ModelTemplateEventTemplateEventByWorkspaceIdCompositeKeyInput
  gt: ModelTemplateEventTemplateEventByWorkspaceIdCompositeKeyInput
  le: ModelTemplateEventTemplateEventByWorkspaceIdCompositeKeyInput
  lt: ModelTemplateEventTemplateEventByWorkspaceIdCompositeKeyInput
}

input ModelTemplateEventTemplateEventByWorkspaceIdCompositeKeyInput {
  mode: MODE
  workspaceId: ID
}

input ModelTemplatesConditionInput {
  and: [ModelTemplatesConditionInput]
  category: ModelTemplateCategoryInput
  channel: ModelCHANNELInput
  config: ModelStringInput
  integrationId: ModelIDInput
  language: ModelStringInput
  namespaceId: ModelStringInput
  nodeId: ModelIDInput
  not: ModelTemplatesConditionInput
  or: [ModelTemplatesConditionInput]
  phoneNo: ModelStringInput
  reSubmit: ModelBooleanInput
  status: ModelWA_TEMPLATE_STATUSInput
  statusMessage: ModelStringInput
  templateId: ModelStringInput
  title: ModelStringInput
  updatedAt: ModelStringInput
}

input ModelTemplatesFilterInput {
  and: [ModelTemplatesFilterInput]
  category: ModelTemplateCategoryInput
  channel: ModelCHANNELInput
  config: ModelStringInput
  enterpriseId: ModelIDInput
  integrationId: ModelIDInput
  language: ModelStringInput
  mode: ModelMODEInput
  namespaceId: ModelStringInput
  nodeId: ModelIDInput
  not: ModelTemplatesFilterInput
  or: [ModelTemplatesFilterInput]
  phoneNo: ModelStringInput
  reSubmit: ModelBooleanInput
  status: ModelWA_TEMPLATE_STATUSInput
  statusMessage: ModelStringInput
  templateId: ModelStringInput
  templatesId: ModelIDInput
  title: ModelStringInput
  updatedAt: ModelStringInput
}

input ModelTemplatesPrimaryCompositeKeyConditionInput {
  beginsWith: ModelTemplatesPrimaryCompositeKeyInput
  between: [ModelTemplatesPrimaryCompositeKeyInput]
  eq: ModelTemplatesPrimaryCompositeKeyInput
  ge: ModelTemplatesPrimaryCompositeKeyInput
  gt: ModelTemplatesPrimaryCompositeKeyInput
  le: ModelTemplatesPrimaryCompositeKeyInput
  lt: ModelTemplatesPrimaryCompositeKeyInput
}

input ModelTemplatesPrimaryCompositeKeyInput {
  mode: MODE
  templatesId: ID
}

input ModelTemplatesTemplatesByIntegrationIdCompositeKeyConditionInput {
  beginsWith: ModelTemplatesTemplatesByIntegrationIdCompositeKeyInput
  between: [ModelTemplatesTemplatesByIntegrationIdCompositeKeyInput]
  eq: ModelTemplatesTemplatesByIntegrationIdCompositeKeyInput
  ge: ModelTemplatesTemplatesByIntegrationIdCompositeKeyInput
  gt: ModelTemplatesTemplatesByIntegrationIdCompositeKeyInput
  le: ModelTemplatesTemplatesByIntegrationIdCompositeKeyInput
  lt: ModelTemplatesTemplatesByIntegrationIdCompositeKeyInput
}

input ModelTemplatesTemplatesByIntegrationIdCompositeKeyInput {
  integrationId: ID
  mode: MODE
}

input ModelTriggerConditionInput {
  and: [ModelTriggerConditionInput]
  nodeId: ModelIDInput
  not: ModelTriggerConditionInput
  or: [ModelTriggerConditionInput]
}

input ModelTriggerFilterInput {
  and: [ModelTriggerFilterInput]
  enterpriseId: ModelIDInput
  mode: ModelMODEInput
  name: ModelStringInput
  nodeId: ModelIDInput
  not: ModelTriggerFilterInput
  or: [ModelTriggerFilterInput]
  triggerId: ModelIDInput
  workspaceId: ModelIDInput
}

input ModelTriggerPrimaryCompositeKeyConditionInput {
  beginsWith: ModelTriggerPrimaryCompositeKeyInput
  between: [ModelTriggerPrimaryCompositeKeyInput]
  eq: ModelTriggerPrimaryCompositeKeyInput
  ge: ModelTriggerPrimaryCompositeKeyInput
  gt: ModelTriggerPrimaryCompositeKeyInput
  le: ModelTriggerPrimaryCompositeKeyInput
  lt: ModelTriggerPrimaryCompositeKeyInput
}

input ModelTriggerPrimaryCompositeKeyInput {
  mode: MODE
  name: String
  triggerId: ID
  workspaceId: ID
}

input ModelTriggerTriggerByWorkspaceIdCompositeKeyConditionInput {
  beginsWith: ModelTriggerTriggerByWorkspaceIdCompositeKeyInput
  between: [ModelTriggerTriggerByWorkspaceIdCompositeKeyInput]
  eq: ModelTriggerTriggerByWorkspaceIdCompositeKeyInput
  ge: ModelTriggerTriggerByWorkspaceIdCompositeKeyInput
  gt: ModelTriggerTriggerByWorkspaceIdCompositeKeyInput
  le: ModelTriggerTriggerByWorkspaceIdCompositeKeyInput
  lt: ModelTriggerTriggerByWorkspaceIdCompositeKeyInput
}

input ModelTriggerTriggerByWorkspaceIdCompositeKeyInput {
  mode: MODE
  workspaceId: ID
}

input ModelUserConditionInput {
  active: ModelBooleanInput
  and: [ModelUserConditionInput]
  availability: ModelAVAILABILITYInput
  avatarUrl: ModelStringInput
  browserToken: ModelStringInput
  clerkUserId: ModelStringInput
  email: ModelStringInput
  inviterUserIdClerk: ModelStringInput
  isLoggedIn: ModelBooleanInput
  lName: ModelStringInput
  lastSignIn: ModelStringInput
  name: ModelStringInput
  not: ModelUserConditionInput
  notificationConfig: ModelStringInput
  or: [ModelUserConditionInput]
  phoneNumber: ModelStringInput
  profileDetails: ModelStringInput
  roleId: ModelIDInput
  updatedAt: ModelStringInput
}

input ModelUserFilterInput {
  active: ModelBooleanInput
  and: [ModelUserFilterInput]
  availability: ModelAVAILABILITYInput
  avatarUrl: ModelStringInput
  browserToken: ModelStringInput
  clerkUserId: ModelStringInput
  email: ModelStringInput
  enterpriseId: ModelIDInput
  inviterUserIdClerk: ModelStringInput
  isLoggedIn: ModelBooleanInput
  lName: ModelStringInput
  lastSignIn: ModelStringInput
  name: ModelStringInput
  not: ModelUserFilterInput
  notificationConfig: ModelStringInput
  or: [ModelUserFilterInput]
  phoneNumber: ModelStringInput
  profileDetails: ModelStringInput
  roleId: ModelIDInput
  updatedAt: ModelStringInput
  userId: ModelIDInput
}

input ModelUtteranceConditionInput {
  and: [ModelUtteranceConditionInput]
  intentId: ModelIDInput
  isPaid: ModelBooleanInput
  not: ModelUtteranceConditionInput
  or: [ModelUtteranceConditionInput]
  sourceName: ModelStringInput
  utterance: ModelStringInput
}

input ModelUtteranceFilterInput {
  and: [ModelUtteranceFilterInput]
  enterpriseId: ModelIDInput
  intentId: ModelIDInput
  isPaid: ModelBooleanInput
  mode: ModelMODEInput
  not: ModelUtteranceFilterInput
  or: [ModelUtteranceFilterInput]
  sourceName: ModelStringInput
  utterance: ModelStringInput
  utteranceId: ModelIDInput
}

input ModelUtterancePrimaryCompositeKeyConditionInput {
  beginsWith: ModelUtterancePrimaryCompositeKeyInput
  between: [ModelUtterancePrimaryCompositeKeyInput]
  eq: ModelUtterancePrimaryCompositeKeyInput
  ge: ModelUtterancePrimaryCompositeKeyInput
  gt: ModelUtterancePrimaryCompositeKeyInput
  le: ModelUtterancePrimaryCompositeKeyInput
  lt: ModelUtterancePrimaryCompositeKeyInput
}

input ModelUtterancePrimaryCompositeKeyInput {
  mode: MODE
  utteranceId: ID
}

input ModelUtteranceUtterancesByIntentIdCompositeKeyConditionInput {
  beginsWith: ModelUtteranceUtterancesByIntentIdCompositeKeyInput
  between: [ModelUtteranceUtterancesByIntentIdCompositeKeyInput]
  eq: ModelUtteranceUtterancesByIntentIdCompositeKeyInput
  ge: ModelUtteranceUtterancesByIntentIdCompositeKeyInput
  gt: ModelUtteranceUtterancesByIntentIdCompositeKeyInput
  le: ModelUtteranceUtterancesByIntentIdCompositeKeyInput
  lt: ModelUtteranceUtterancesByIntentIdCompositeKeyInput
}

input ModelUtteranceUtterancesByIntentIdCompositeKeyInput {
  intentId: ID
  mode: MODE
}

input ModelWA_FLOW_STATUSInput {
  eq: WA_FLOW_STATUS
  ne: WA_FLOW_STATUS
}

input ModelWA_TEMPLATE_STATUSInput {
  eq: WA_TEMPLATE_STATUS
  ne: WA_TEMPLATE_STATUS
}

input ModelWhatsappFlowsConditionInput {
  and: [ModelWhatsappFlowsConditionInput]
  config: ModelStringInput
  integrationId: ModelIDInput
  name: ModelStringInput
  not: ModelWhatsappFlowsConditionInput
  or: [ModelWhatsappFlowsConditionInput]
  status: ModelWA_FLOW_STATUSInput
}

input ModelWhatsappFlowsFilterInput {
  and: [ModelWhatsappFlowsFilterInput]
  config: ModelStringInput
  enterpriseId: ModelIDInput
  integrationId: ModelIDInput
  mode: ModelMODEInput
  name: ModelStringInput
  not: ModelWhatsappFlowsFilterInput
  or: [ModelWhatsappFlowsFilterInput]
  status: ModelWA_FLOW_STATUSInput
  whatsappFlowId: ModelIDInput
}

input ModelWhatsappFlowsPrimaryCompositeKeyConditionInput {
  beginsWith: ModelWhatsappFlowsPrimaryCompositeKeyInput
  between: [ModelWhatsappFlowsPrimaryCompositeKeyInput]
  eq: ModelWhatsappFlowsPrimaryCompositeKeyInput
  ge: ModelWhatsappFlowsPrimaryCompositeKeyInput
  gt: ModelWhatsappFlowsPrimaryCompositeKeyInput
  le: ModelWhatsappFlowsPrimaryCompositeKeyInput
  lt: ModelWhatsappFlowsPrimaryCompositeKeyInput
}

input ModelWhatsappFlowsPrimaryCompositeKeyInput {
  mode: MODE
  whatsappFlowId: ID
}

input ModelWhatsappFlowsWhatsappFlowsByIntegrationIdCompositeKeyConditionInput {
  beginsWith: ModelWhatsappFlowsWhatsappFlowsByIntegrationIdCompositeKeyInput
  between: [ModelWhatsappFlowsWhatsappFlowsByIntegrationIdCompositeKeyInput]
  eq: ModelWhatsappFlowsWhatsappFlowsByIntegrationIdCompositeKeyInput
  ge: ModelWhatsappFlowsWhatsappFlowsByIntegrationIdCompositeKeyInput
  gt: ModelWhatsappFlowsWhatsappFlowsByIntegrationIdCompositeKeyInput
  le: ModelWhatsappFlowsWhatsappFlowsByIntegrationIdCompositeKeyInput
  lt: ModelWhatsappFlowsWhatsappFlowsByIntegrationIdCompositeKeyInput
}

input ModelWhatsappFlowsWhatsappFlowsByIntegrationIdCompositeKeyInput {
  integrationId: ID
  mode: MODE
}

input ModelWorkflowStatusInput {
  eq: WorkflowStatus
  ne: WorkflowStatus
}

input ModelWorkflowStepEventConditionInput {
  and: [ModelWorkflowStepEventConditionInput]
  campaignId: ModelIDInput
  createdAt: ModelStringInput
  customerId: ModelIDInput
  endTime: ModelStringInput
  enterpriseId: ModelIDInput
  eventToBeTracked: ModelStringInput
  flowId: ModelIDInput
  mode: ModelMODEInput
  not: ModelWorkflowStepEventConditionInput
  or: [ModelWorkflowStepEventConditionInput]
  startTime: ModelStringInput
  stepId: ModelIDInput
  updatedAt: ModelStringInput
  workflowId: ModelIDInput
}

input ModelWorkflowStepEventCustomerEventsByTimeCompositeKeyConditionInput {
  beginsWith: ModelWorkflowStepEventCustomerEventsByTimeCompositeKeyInput
  between: [ModelWorkflowStepEventCustomerEventsByTimeCompositeKeyInput]
  eq: ModelWorkflowStepEventCustomerEventsByTimeCompositeKeyInput
  ge: ModelWorkflowStepEventCustomerEventsByTimeCompositeKeyInput
  gt: ModelWorkflowStepEventCustomerEventsByTimeCompositeKeyInput
  le: ModelWorkflowStepEventCustomerEventsByTimeCompositeKeyInput
  lt: ModelWorkflowStepEventCustomerEventsByTimeCompositeKeyInput
}

input ModelWorkflowStepEventCustomerEventsByTimeCompositeKeyInput {
  customerId: ID
  endTime: String
  startTime: AWSDateTime
}

input ModelWorkflowStepEventFilterInput {
  and: [ModelWorkflowStepEventFilterInput]
  campaignId: ModelIDInput
  createdAt: ModelStringInput
  customerId: ModelIDInput
  endTime: ModelStringInput
  enterpriseId: ModelIDInput
  eventToBeTracked: ModelStringInput
  flowId: ModelIDInput
  mode: ModelMODEInput
  not: ModelWorkflowStepEventFilterInput
  or: [ModelWorkflowStepEventFilterInput]
  startTime: ModelStringInput
  stepId: ModelIDInput
  updatedAt: ModelStringInput
  workflowId: ModelIDInput
}

input ModelWorkflowStepsConditionInput {
  and: [ModelWorkflowStepsConditionInput]
  campaignId: ModelIDInput
  conditionalNextSteps: ModelStringInput
  createdAt: ModelStringInput
  flowId: ModelIDInput
  integrationId: ModelIDInput
  nextStepId: ModelIDInput
  not: ModelWorkflowStepsConditionInput
  or: [ModelWorkflowStepsConditionInput]
  previousStepId: ModelIDInput
  status: ModelWorkflowStatusInput
  stepConfig: ModelStringInput
  stepDetails: ModelStringInput
  stepType: ModelStepTypeInput
  updatedAt: ModelStringInput
  workflowId: ModelIDInput
}

input ModelWorkflowStepsFilterInput {
  and: [ModelWorkflowStepsFilterInput]
  campaignId: ModelIDInput
  conditionalNextSteps: ModelStringInput
  createdAt: ModelStringInput
  enterpriseId: ModelIDInput
  flowId: ModelIDInput
  integrationId: ModelIDInput
  mode: ModelMODEInput
  nextStepId: ModelIDInput
  not: ModelWorkflowStepsFilterInput
  or: [ModelWorkflowStepsFilterInput]
  previousStepId: ModelIDInput
  status: ModelWorkflowStatusInput
  stepConfig: ModelStringInput
  stepDetails: ModelStringInput
  stepId: ModelIDInput
  stepType: ModelStepTypeInput
  updatedAt: ModelStringInput
  workflowId: ModelIDInput
}

input ModelWorkflowStepsPrimaryCompositeKeyConditionInput {
  beginsWith: ModelWorkflowStepsPrimaryCompositeKeyInput
  between: [ModelWorkflowStepsPrimaryCompositeKeyInput]
  eq: ModelWorkflowStepsPrimaryCompositeKeyInput
  ge: ModelWorkflowStepsPrimaryCompositeKeyInput
  gt: ModelWorkflowStepsPrimaryCompositeKeyInput
  le: ModelWorkflowStepsPrimaryCompositeKeyInput
  lt: ModelWorkflowStepsPrimaryCompositeKeyInput
}

input ModelWorkflowStepsPrimaryCompositeKeyInput {
  mode: MODE
  stepId: ID
}

input ModelWorkflowStepsStepsByWorkflowCompositeKeyConditionInput {
  beginsWith: ModelWorkflowStepsStepsByWorkflowCompositeKeyInput
  between: [ModelWorkflowStepsStepsByWorkflowCompositeKeyInput]
  eq: ModelWorkflowStepsStepsByWorkflowCompositeKeyInput
  ge: ModelWorkflowStepsStepsByWorkflowCompositeKeyInput
  gt: ModelWorkflowStepsStepsByWorkflowCompositeKeyInput
  le: ModelWorkflowStepsStepsByWorkflowCompositeKeyInput
  lt: ModelWorkflowStepsStepsByWorkflowCompositeKeyInput
}

input ModelWorkflowStepsStepsByWorkflowCompositeKeyInput {
  mode: MODE
  workflowId: ID
}

input ModelWorkflowsConditionInput {
  and: [ModelWorkflowsConditionInput]
  config: ModelStringInput
  currentStepId: ModelIDInput
  not: ModelWorkflowsConditionInput
  or: [ModelWorkflowsConditionInput]
  startingCampaignId: ModelIDInput
  startingFlowId: ModelIDInput
  status: ModelWorkflowStatusInput
  workflowName: ModelStringInput
}

input ModelWorkflowsFilterInput {
  and: [ModelWorkflowsFilterInput]
  config: ModelStringInput
  currentStepId: ModelIDInput
  enterpriseId: ModelIDInput
  mode: ModelMODEInput
  not: ModelWorkflowsFilterInput
  or: [ModelWorkflowsFilterInput]
  startingCampaignId: ModelIDInput
  startingFlowId: ModelIDInput
  status: ModelWorkflowStatusInput
  workflowId: ModelIDInput
  workflowName: ModelStringInput
}

input ModelWorkflowsPrimaryCompositeKeyConditionInput {
  beginsWith: ModelWorkflowsPrimaryCompositeKeyInput
  between: [ModelWorkflowsPrimaryCompositeKeyInput]
  eq: ModelWorkflowsPrimaryCompositeKeyInput
  ge: ModelWorkflowsPrimaryCompositeKeyInput
  gt: ModelWorkflowsPrimaryCompositeKeyInput
  le: ModelWorkflowsPrimaryCompositeKeyInput
  lt: ModelWorkflowsPrimaryCompositeKeyInput
}

input ModelWorkflowsPrimaryCompositeKeyInput {
  mode: MODE
  workflowId: ID
}

input ModelWorkspaceConditionInput {
  active: ModelBooleanInput
  and: [ModelWorkspaceConditionInput]
  botAliasId: ModelStringInput
  botDraftId: ModelStringInput
  botFailureReason: ModelStringInput
  botId: ModelStringInput
  botLastUpdated: ModelStringInput
  botStatus: ModelBotStatusInput
  defaultLanguage: ModelStringInput
  defaultTables: ModelStringInput
  designConfig: ModelStringInput
  isImported: ModelBooleanInput
  language: ModelStringInput
  name: ModelStringInput
  not: ModelWorkspaceConditionInput
  or: [ModelWorkspaceConditionInput]
  publishConfig: ModelStringInput
  publishLastUpdated: ModelStringInput
  sessionTimeout: ModelStringInput
  timeZone: ModelStringInput
  tools: ModelStringInput
  unSupportedMessages: ModelStringInput
  variables: ModelStringInput
  workspaceLastPublished: ModelStringInput
}

input ModelWorkspaceFilterInput {
  active: ModelBooleanInput
  and: [ModelWorkspaceFilterInput]
  botAliasId: ModelStringInput
  botDraftId: ModelStringInput
  botFailureReason: ModelStringInput
  botId: ModelStringInput
  botLastUpdated: ModelStringInput
  botStatus: ModelBotStatusInput
  defaultLanguage: ModelStringInput
  defaultTables: ModelStringInput
  designConfig: ModelStringInput
  enterpriseId: ModelIDInput
  isImported: ModelBooleanInput
  language: ModelStringInput
  mode: ModelMODEInput
  name: ModelStringInput
  not: ModelWorkspaceFilterInput
  or: [ModelWorkspaceFilterInput]
  publishConfig: ModelStringInput
  publishLastUpdated: ModelStringInput
  sessionTimeout: ModelStringInput
  timeZone: ModelStringInput
  tools: ModelStringInput
  unSupportedMessages: ModelStringInput
  variables: ModelStringInput
  workspaceId: ModelIDInput
  workspaceLastPublished: ModelStringInput
}

input ModelWorkspacePrimaryCompositeKeyConditionInput {
  beginsWith: ModelWorkspacePrimaryCompositeKeyInput
  between: [ModelWorkspacePrimaryCompositeKeyInput]
  eq: ModelWorkspacePrimaryCompositeKeyInput
  ge: ModelWorkspacePrimaryCompositeKeyInput
  gt: ModelWorkspacePrimaryCompositeKeyInput
  le: ModelWorkspacePrimaryCompositeKeyInput
  lt: ModelWorkspacePrimaryCompositeKeyInput
}

input ModelWorkspacePrimaryCompositeKeyInput {
  mode: MODE
  workspaceId: ID
}

input PermissionInput {
  enterpriseId: ID!
  permissions: AWSJSON!
}

input QuicksightGenerateAnonUrlInput {
  dashboardId: String!
  enterpriseId: ID!
  sessionLifetimeInMinutes: Int
}

input RequestReportsCsvInput {
  enterpriseId: ID!
  from: AWSDateTime
  timeZone: String!
  to: AWSDateTime
  userId: ID
}

input SearchableBooleanFilterInput {
  eq: Boolean
  ne: Boolean
}

input SearchableBroadcastAggregationInput {
  field: SearchableBroadcastAggregateField!
  name: String!
  type: SearchableAggregateType!
}

input SearchableBroadcastFilterInput {
  advancedConfig: SearchableStringFilterInput
  and: [SearchableBroadcastFilterInput]
  asset: SearchableStringFilterInput
  broadcastId: SearchableIDFilterInput
  catalogItems: SearchableStringFilterInput
  createdAt: SearchableStringFilterInput
  enterpriseId: SearchableIDFilterInput
  isCatalogue: SearchableBooleanFilterInput
  message: SearchableStringFilterInput
  mode: SearchableStringFilterInput
  name: SearchableStringFilterInput
  not: SearchableBroadcastFilterInput
  or: [SearchableBroadcastFilterInput]
  scheduleTime: SearchableStringFilterInput
  senderReceiver: SearchableStringFilterInput
  status: SearchableStringFilterInput
  updatedAt: SearchableStringFilterInput
}

input SearchableBroadcastMessageAggregationInput {
  field: SearchableBroadcastMessageAggregateField!
  name: String!
  type: SearchableAggregateType!
}

input SearchableBroadcastMessageFilterInput {
  and: [SearchableBroadcastMessageFilterInput]
  broadcastId: SearchableIDFilterInput
  broadcastMessageId: SearchableIDFilterInput
  catalogItems: SearchableStringFilterInput
  createdAt: SearchableStringFilterInput
  customerId: SearchableIDFilterInput
  enterpriseId: SearchableIDFilterInput
  isCatalogue: SearchableBooleanFilterInput
  linkedAppId: SearchableIDFilterInput
  meta: SearchableStringFilterInput
  mode: SearchableStringFilterInput
  not: SearchableBroadcastMessageFilterInput
  or: [SearchableBroadcastMessageFilterInput]
  scheduleTime: SearchableStringFilterInput
  status: SearchableStringFilterInput
  timeToRespond: SearchableIntFilterInput
  updatedAt: SearchableStringFilterInput
  waMessageId: SearchableIDFilterInput
}

input SearchableBroadcastMessageSortInput {
  direction: SearchableSortDirection
  field: SearchableBroadcastMessageSortableFields
}

input SearchableBroadcastSortInput {
  direction: SearchableSortDirection
  field: SearchableBroadcastSortableFields
}

input SearchableCampaignApproverAggregationInput {
  field: SearchableCampaignApproverAggregateField!
  name: String!
  type: SearchableAggregateType!
}

input SearchableCampaignApproverFilterInput {
  and: [SearchableCampaignApproverFilterInput]
  approverId: SearchableIDFilterInput
  campaignId: SearchableIDFilterInput
  createdAt: SearchableStringFilterInput
  enterpriseId: SearchableIDFilterInput
  mode: SearchableStringFilterInput
  not: SearchableCampaignApproverFilterInput
  number: SearchableStringFilterInput
  or: [SearchableCampaignApproverFilterInput]
  updatedAt: SearchableStringFilterInput
}

input SearchableCampaignApproverSortInput {
  direction: SearchableSortDirection
  field: SearchableCampaignApproverSortableFields
}

input SearchableCampaignAuditTrailAggregationInput {
  field: SearchableCampaignAuditTrailAggregateField!
  name: String!
  type: SearchableAggregateType!
}

input SearchableCampaignAuditTrailFilterInput {
  and: [SearchableCampaignAuditTrailFilterInput]
  approverId: SearchableIDFilterInput
  auditTrailId: SearchableIDFilterInput
  campaignId: SearchableIDFilterInput
  createdAt: SearchableStringFilterInput
  enterpriseId: SearchableIDFilterInput
  mode: SearchableStringFilterInput
  not: SearchableCampaignAuditTrailFilterInput
  note: SearchableStringFilterInput
  or: [SearchableCampaignAuditTrailFilterInput]
  senderId: SearchableIDFilterInput
  status: SearchableStringFilterInput
  updatedAt: SearchableStringFilterInput
}

input SearchableCampaignAuditTrailSortInput {
  direction: SearchableSortDirection
  field: SearchableCampaignAuditTrailSortableFields
}

input SearchableCampaignMessageAggregationInput {
  field: SearchableCampaignMessageAggregateField!
  name: String!
  type: SearchableAggregateType!
}

input SearchableCampaignMessageFilterInput {
  and: [SearchableCampaignMessageFilterInput]
  campaignId: SearchableIDFilterInput
  campaignMessageId: SearchableIDFilterInput
  channel: SearchableStringFilterInput
  createdAt: SearchableStringFilterInput
  customerId: SearchableIDFilterInput
  enterpriseId: SearchableIDFilterInput
  isForApproval: SearchableBooleanFilterInput
  meta: SearchableStringFilterInput
  mode: SearchableStringFilterInput
  not: SearchableCampaignMessageFilterInput
  or: [SearchableCampaignMessageFilterInput]
  retryCount: SearchableIntFilterInput
  scheduleTime: SearchableStringFilterInput
  sessionId: SearchableIDFilterInput
  status: SearchableStringFilterInput
  timeToRespond: SearchableIntFilterInput
  updatedAt: SearchableStringFilterInput
}

input SearchableCampaignMessageSortInput {
  direction: SearchableSortDirection
  field: SearchableCampaignMessageSortableFields
}

input SearchableCatalogueAggregationInput {
  field: SearchableCatalogueAggregateField!
  name: String!
  type: SearchableAggregateType!
}

input SearchableCatalogueFilterInput {
  and: [SearchableCatalogueFilterInput]
  catalogueId: SearchableIDFilterInput
  countryOfOrigin: SearchableStringFilterInput
  createdAt: SearchableStringFilterInput
  description: SearchableStringFilterInput
  enterpriseId: SearchableIDFilterInput
  hide: SearchableBooleanFilterInput
  images: SearchableStringFilterInput
  integrationId: SearchableIDFilterInput
  itemCode: SearchableStringFilterInput
  link: SearchableStringFilterInput
  metaCatalogueId: SearchableIDFilterInput
  mode: SearchableStringFilterInput
  name: SearchableStringFilterInput
  not: SearchableCatalogueFilterInput
  or: [SearchableCatalogueFilterInput]
  otherAttributes: SearchableStringFilterInput
  price: SearchableStringFilterInput
  retailerId: SearchableStringFilterInput
  updatedAt: SearchableStringFilterInput
}

input SearchableCatalogueSortInput {
  direction: SearchableSortDirection
  field: SearchableCatalogueSortableFields
}

input SearchableCollectionAggregationInput {
  field: SearchableCollectionAggregateField!
  name: String!
  type: SearchableAggregateType!
}

input SearchableCollectionCatalogueAggregationInput {
  field: SearchableCollectionCatalogueAggregateField!
  name: String!
  type: SearchableAggregateType!
}

input SearchableCollectionCatalogueFilterInput {
  and: [SearchableCollectionCatalogueFilterInput]
  catalogueId: SearchableIDFilterInput
  collectionId: SearchableIDFilterInput
  createdAt: SearchableStringFilterInput
  enterpriseId: SearchableIDFilterInput
  mode: SearchableStringFilterInput
  not: SearchableCollectionCatalogueFilterInput
  or: [SearchableCollectionCatalogueFilterInput]
  updatedAt: SearchableStringFilterInput
}

input SearchableCollectionCatalogueSortInput {
  direction: SearchableSortDirection
  field: SearchableCollectionCatalogueSortableFields
}

input SearchableCollectionFilterInput {
  and: [SearchableCollectionFilterInput]
  collectionId: SearchableIDFilterInput
  createdAt: SearchableStringFilterInput
  enterpriseId: SearchableIDFilterInput
  metaCatalogueId: SearchableIDFilterInput
  mode: SearchableStringFilterInput
  not: SearchableCollectionFilterInput
  or: [SearchableCollectionFilterInput]
  status: SearchableStringFilterInput
  title: SearchableStringFilterInput
  updatedAt: SearchableStringFilterInput
}

input SearchableCollectionSortInput {
  direction: SearchableSortDirection
  field: SearchableCollectionSortableFields
}

input SearchableContactGroupAggregationInput {
  field: SearchableContactGroupAggregateField!
  name: String!
  type: SearchableAggregateType!
}

input SearchableContactGroupFilterInput {
  and: [SearchableContactGroupFilterInput]
  contactGroupId: SearchableIDFilterInput
  contactListSource: SearchableStringFilterInput
  createdAt: SearchableStringFilterInput
  dynamic: SearchableBooleanFilterInput
  enterpriseId: SearchableIDFilterInput
  linkedAppId: SearchableIDFilterInput
  mode: SearchableStringFilterInput
  name: SearchableStringFilterInput
  not: SearchableContactGroupFilterInput
  or: [SearchableContactGroupFilterInput]
  updatedAt: SearchableStringFilterInput
}

input SearchableContactGroupSortInput {
  direction: SearchableSortDirection
  field: SearchableContactGroupSortableFields
}

input SearchableCustomerAggregationInput {
  field: SearchableCustomerAggregateField!
  name: String!
  type: SearchableAggregateType!
}

input SearchableCustomerContactGroupAggregationInput {
  field: SearchableCustomerContactGroupAggregateField!
  name: String!
  type: SearchableAggregateType!
}

input SearchableCustomerContactGroupFilterInput {
  and: [SearchableCustomerContactGroupFilterInput]
  blacklisted: SearchableBooleanFilterInput
  contactGroupId: SearchableIDFilterInput
  createdAt: SearchableStringFilterInput
  customerId: SearchableIDFilterInput
  enterpriseId: SearchableIDFilterInput
  mode: SearchableStringFilterInput
  not: SearchableCustomerContactGroupFilterInput
  or: [SearchableCustomerContactGroupFilterInput]
  updatedAt: SearchableStringFilterInput
}

input SearchableCustomerContactGroupSortInput {
  direction: SearchableSortDirection
  field: SearchableCustomerContactGroupSortableFields
}

input SearchableCustomerFilterInput {
  and: [SearchableCustomerFilterInput]
  blacklistReason: SearchableStringFilterInput
  blacklisted: SearchableBooleanFilterInput
  blacklistedAt: SearchableStringFilterInput
  createdAt: SearchableStringFilterInput
  customerId: SearchableIDFilterInput
  email: SearchableStringFilterInput
  enterpriseId: SearchableIDFilterInput
  firstName: SearchableStringFilterInput
  lastName: SearchableStringFilterInput
  mode: SearchableStringFilterInput
  name: SearchableStringFilterInput
  not: SearchableCustomerFilterInput
  or: [SearchableCustomerFilterInput]
  parent: SearchableStringFilterInput
  parentId: SearchableStringFilterInput
  tags: SearchableStringFilterInput
  updatedAt: SearchableStringFilterInput
  variables: SearchableStringFilterInput
}

input SearchableCustomerSortInput {
  direction: SearchableSortDirection
  field: SearchableCustomerSortableFields
}

input SearchableDatabaseValuesAggregationInput {
  field: SearchableDatabaseValuesAggregateField!
  name: String!
  type: SearchableAggregateType!
}

input SearchableDatabaseValuesFilterInput {
  and: [SearchableDatabaseValuesFilterInput]
  createdAt: SearchableStringFilterInput
  databaseSchemaId: SearchableIDFilterInput
  databaseValuesId: SearchableIDFilterInput
  enterpriseId: SearchableIDFilterInput
  mode: SearchableStringFilterInput
  not: SearchableDatabaseValuesFilterInput
  or: [SearchableDatabaseValuesFilterInput]
  updatedAt: SearchableStringFilterInput
  value: SearchableStringFilterInput
}

input SearchableDatabaseValuesSortInput {
  direction: SearchableSortDirection
  field: SearchableDatabaseValuesSortableFields
}

input SearchableEventLabelAggregationInput {
  field: SearchableEventLabelAggregateField!
  name: String!
  type: SearchableAggregateType!
}

input SearchableEventLabelFilterInput {
  and: [SearchableEventLabelFilterInput]
  campaignId: SearchableStringFilterInput
  conversationId: SearchableIDFilterInput
  createdAt: SearchableStringFilterInput
  customerId: SearchableIDFilterInput
  enterpriseId: SearchableIDFilterInput
  flowId: SearchableIDFilterInput
  interactionId: SearchableIDFilterInput
  label: SearchableStringFilterInput
  labelId: SearchableIDFilterInput
  mode: SearchableStringFilterInput
  nodeId: SearchableIDFilterInput
  not: SearchableEventLabelFilterInput
  or: [SearchableEventLabelFilterInput]
  previousLabel: SearchableStringFilterInput
  previousValue: SearchableStringFilterInput
  sessionId: SearchableIDFilterInput
  type: SearchableStringFilterInput
  updatedAt: SearchableStringFilterInput
  value: SearchableStringFilterInput
  workspaceId: SearchableIDFilterInput
}

input SearchableEventLabelSortInput {
  direction: SearchableSortDirection
  field: SearchableEventLabelSortableFields
}

input SearchableFloatFilterInput {
  eq: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  ne: Float
  range: [Float]
}

input SearchableHealthTableAggregationInput {
  field: SearchableHealthTableAggregateField!
  name: String!
  type: SearchableAggregateType!
}

input SearchableHealthTableFilterInput {
  and: [SearchableHealthTableFilterInput]
  channel: SearchableStringFilterInput
  checkFlag: SearchableIntFilterInput
  config: SearchableStringFilterInput
  count: SearchableIntFilterInput
  createdAt: SearchableStringFilterInput
  description: SearchableStringFilterInput
  enterpriseId: SearchableIDFilterInput
  functionOrigin: SearchableStringFilterInput
  healthTableId: SearchableIDFilterInput
  link: SearchableStringFilterInput
  mode: SearchableStringFilterInput
  nodeId: SearchableIDFilterInput
  not: SearchableHealthTableFilterInput
  or: [SearchableHealthTableFilterInput]
  read: SearchableBooleanFilterInput
  status: SearchableStringFilterInput
  subType: SearchableStringFilterInput
  title: SearchableStringFilterInput
  type: SearchableStringFilterInput
  updatedAt: SearchableStringFilterInput
  userId: SearchableIDFilterInput
}

input SearchableHealthTableSortInput {
  direction: SearchableSortDirection
  field: SearchableHealthTableSortableFields
}

input SearchableIDFilterInput {
  eq: ID
  exists: Boolean
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  match: ID
  matchPhrase: ID
  matchPhrasePrefix: ID
  multiMatch: ID
  ne: ID
  range: [ID]
  regexp: ID
  wildcard: ID
}

input SearchableIntFilterInput {
  eq: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  ne: Int
  range: [Int]
}

input SearchableIntentAggregationInput {
  field: SearchableIntentAggregateField!
  name: String!
  type: SearchableAggregateType!
}

input SearchableIntentFilterInput {
  and: [SearchableIntentFilterInput]
  createdAt: SearchableStringFilterInput
  enterpriseId: SearchableIDFilterInput
  intentId: SearchableIDFilterInput
  language: SearchableStringFilterInput
  lexIntentId: SearchableIDFilterInput
  mode: SearchableStringFilterInput
  name: SearchableStringFilterInput
  nodeId: SearchableIDFilterInput
  not: SearchableIntentFilterInput
  or: [SearchableIntentFilterInput]
  slots: SearchableStringFilterInput
  updatedAt: SearchableStringFilterInput
  utterance: SearchableStringFilterInput
  workspaceId: SearchableIDFilterInput
}

input SearchableIntentSortInput {
  direction: SearchableSortDirection
  field: SearchableIntentSortableFields
}

input SearchableLinkedAppCatalogueAggregationInput {
  field: SearchableLinkedAppCatalogueAggregateField!
  name: String!
  type: SearchableAggregateType!
}

input SearchableLinkedAppCatalogueFilterInput {
  and: [SearchableLinkedAppCatalogueFilterInput]
  catalogueId: SearchableIDFilterInput
  createdAt: SearchableStringFilterInput
  enterpriseId: SearchableIDFilterInput
  hide: SearchableBooleanFilterInput
  linkedAppId: SearchableIDFilterInput
  mode: SearchableStringFilterInput
  not: SearchableLinkedAppCatalogueFilterInput
  or: [SearchableLinkedAppCatalogueFilterInput]
  status: SearchableStringFilterInput
  updatedAt: SearchableStringFilterInput
  waLinkedAppCatalogueId: SearchableStringFilterInput
}

input SearchableLinkedAppCatalogueSortInput {
  direction: SearchableSortDirection
  field: SearchableLinkedAppCatalogueSortableFields
}

input SearchableLinkedAppCollectionAggregationInput {
  field: SearchableLinkedAppCollectionAggregateField!
  name: String!
  type: SearchableAggregateType!
}

input SearchableLinkedAppCollectionFilterInput {
  and: [SearchableLinkedAppCollectionFilterInput]
  collectionId: SearchableIDFilterInput
  createdAt: SearchableStringFilterInput
  enterpriseId: SearchableIDFilterInput
  linkedAppId: SearchableIDFilterInput
  mode: SearchableStringFilterInput
  not: SearchableLinkedAppCollectionFilterInput
  or: [SearchableLinkedAppCollectionFilterInput]
  status: SearchableStringFilterInput
  updatedAt: SearchableStringFilterInput
  waLinkedAppCollectionId: SearchableStringFilterInput
}

input SearchableLinkedAppCollectionSortInput {
  direction: SearchableSortDirection
  field: SearchableLinkedAppCollectionSortableFields
}

input SearchableLinkedAppMessageAggregationInput {
  field: SearchableLinkedAppMessageAggregateField!
  name: String!
  type: SearchableAggregateType!
}

input SearchableLinkedAppMessageFilterInput {
  and: [SearchableLinkedAppMessageFilterInput]
  createdAt: SearchableStringFilterInput
  customerId: SearchableIDFilterInput
  enterpriseId: SearchableIDFilterInput
  linkedAppId: SearchableIDFilterInput
  message: SearchableStringFilterInput
  mode: SearchableStringFilterInput
  not: SearchableLinkedAppMessageFilterInput
  or: [SearchableLinkedAppMessageFilterInput]
  updatedAt: SearchableStringFilterInput
  waMessageId: SearchableIDFilterInput
}

input SearchableLinkedAppMessageSortInput {
  direction: SearchableSortDirection
  field: SearchableLinkedAppMessageSortableFields
}

input SearchableMissedUtteranceAggregationInput {
  field: SearchableMissedUtteranceAggregateField!
  name: String!
  type: SearchableAggregateType!
}

input SearchableMissedUtteranceFilterInput {
  and: [SearchableMissedUtteranceFilterInput]
  channel: SearchableStringFilterInput
  confidence: SearchableFloatFilterInput
  createdAt: SearchableStringFilterInput
  enterpriseId: SearchableIDFilterInput
  language: SearchableStringFilterInput
  missedUtteranceId: SearchableIDFilterInput
  mode: SearchableStringFilterInput
  nodeId: SearchableStringFilterInput
  not: SearchableMissedUtteranceFilterInput
  or: [SearchableMissedUtteranceFilterInput]
  updatedAt: SearchableStringFilterInput
  utterance: SearchableStringFilterInput
  workspaceId: SearchableIDFilterInput
}

input SearchableMissedUtteranceSortInput {
  direction: SearchableSortDirection
  field: SearchableMissedUtteranceSortableFields
}

input SearchableSessionAggregationInput {
  field: SearchableSessionAggregateField!
  name: String!
  type: SearchableAggregateType!
}

input SearchableSessionFilterInput {
  active: SearchableBooleanFilterInput
  agentId: SearchableIDFilterInput
  and: [SearchableSessionFilterInput]
  assignment: SearchableStringFilterInput
  campaignMessageId: SearchableIDFilterInput
  channel: SearchableStringFilterInput
  createdAt: SearchableStringFilterInput
  currentNodeId: SearchableIDFilterInput
  customerId: SearchableIDFilterInput
  enterpriseId: SearchableIDFilterInput
  federatedLiveToCustomerId: SearchableIDFilterInput
  federatedRole: SearchableStringFilterInput
  flowId: SearchableIDFilterInput
  healthTableId: SearchableIDFilterInput
  initiatedBy: SearchableStringFilterInput
  integrationId: SearchableIDFilterInput
  language: SearchableStringFilterInput
  metaConversationId: SearchableIDFilterInput
  mode: SearchableStringFilterInput
  nextNodeId: SearchableIDFilterInput
  nodeId: SearchableIDFilterInput
  not: SearchableSessionFilterInput
  or: [SearchableSessionFilterInput]
  preview: SearchableBooleanFilterInput
  referrer: SearchableStringFilterInput
  referrerType: SearchableStringFilterInput
  sessionId: SearchableIDFilterInput
  tags: SearchableStringFilterInput
  updatedAt: SearchableStringFilterInput
  validationCount: SearchableIntFilterInput
  variables: SearchableStringFilterInput
  workspaceId: SearchableIDFilterInput
}

input SearchableSessionSortInput {
  direction: SearchableSortDirection
  field: SearchableSessionSortableFields
}

input SearchableStringFilterInput {
  eq: String
  exists: Boolean
  gt: String
  gte: String
  lt: String
  lte: String
  match: String
  matchPhrase: String
  matchPhrasePrefix: String
  multiMatch: String
  ne: String
  range: [String]
  regexp: String
  wildcard: String
}

input SearchableUtteranceAggregationInput {
  field: SearchableUtteranceAggregateField!
  name: String!
  type: SearchableAggregateType!
}

input SearchableUtteranceFilterInput {
  and: [SearchableUtteranceFilterInput]
  createdAt: SearchableStringFilterInput
  enterpriseId: SearchableIDFilterInput
  intentId: SearchableIDFilterInput
  isPaid: SearchableBooleanFilterInput
  mode: SearchableStringFilterInput
  not: SearchableUtteranceFilterInput
  or: [SearchableUtteranceFilterInput]
  sourceName: SearchableStringFilterInput
  updatedAt: SearchableStringFilterInput
  utterance: SearchableStringFilterInput
  utteranceId: SearchableIDFilterInput
}

input SearchableUtteranceSortInput {
  direction: SearchableSortDirection
  field: SearchableUtteranceSortableFields
}

input SuggestedIntentsInput {
  language: String
  name: String!
  utterance: [String]
}

input UpdateAbstractJourneyEventInput {
  businessGoal: String
  createdAt: AWSDateTime
  description: String
  endTime: AWSDateTime
  enterpriseId: ID!
  flowId: ID!
  includeIntents: Boolean
  industry: String
  journeyNameLibrary: String
  mode: MODE!
  sharingMode: String
  sourceEnterpriseId: ID
  startTime: AWSDateTime
  updatedAt: AWSDateTime
  useCase: String
  workspaceId: ID
}

input UpdateAiBrainFileManagerInput {
  aiEnabled: Boolean
  enterpriseId: ID!
  fileId: ID!
  mode: MODE!
  name: String
  type: String
  url: String
  usage: String
}

input UpdateAnalyticsDashboardInput {
  analyticsDashboardId: ID!
  config: AWSJSON
  enterpriseId: ID!
  mode: MODE!
  name: String
}

input UpdateApiGateWayInput {
  enterpriseId: ID!
  flow: String
  interaction: String
  mode: MODE!
  name: String!
  nodeId: String
  payload: AWSJSON
  variable: String
  workspaceId: ID!
}

input UpdateApiInput {
  apiId: ID!
  config: AWSJSON
  enterpriseId: ID!
  mode: MODE!
  name: String
  workspaceId: ID
}

input UpdateAudienceSegmentsInput {
  createdAt: AWSDateTime
  enterpriseId: ID!
  mode: MODE!
  segmentConfig: AWSJSON
  segmentId: ID!
  segmentName: String
  updatedAt: AWSDateTime
}

input UpdateBroadcastInput {
  advancedConfig: AWSJSON
  asset: String
  broadcastId: ID!
  catalogItems: AWSJSON
  enterpriseId: ID!
  isCatalogue: Boolean
  message: String
  mode: MODE!
  name: String
  scheduleTime: AWSDateTime
  senderReceiver: AWSJSON
  status: BroadcastStatus
}

input UpdateBroadcastMessageInput {
  broadcastId: ID
  broadcastMessageId: ID!
  catalogItems: AWSJSON
  customerId: ID
  enterpriseId: ID!
  isCatalogue: Boolean
  linkedAppId: ID
  meta: AWSJSON
  mode: MODE!
  scheduleTime: AWSDateTime
  status: BroadcastMessageStatus
  timeToRespond: Int
  waMessageId: ID
}

input UpdateCampaignApproverInput {
  approverId: ID!
  campaignId: ID!
  enterpriseId: ID!
  mode: MODE!
  number: String
}

input UpdateCampaignAuditTrailInput {
  approverId: ID
  auditTrailId: ID!
  campaignId: ID
  enterpriseId: ID!
  mode: MODE!
  note: String
  senderId: ID
  status: CampaignStatus
}

input UpdateCampaignContactGroupInput {
  campaignId: ID!
  contactGroupId: ID!
  enterpriseId: ID!
  mode: MODE!
}

input UpdateCampaignInput {
  advancedConfig: AWSJSON
  averageOrderValue: String
  campaignId: ID!
  createdById: ID
  enterpriseId: ID!
  flowId: ID
  integrationId: ID
  isHidden: Boolean
  language: String
  lastResponseSyncTime: AWSDateTime
  marketingCost: String
  mode: MODE!
  name: String
  recurringCampaignId: ID
  responseSyncStatus: ResponseSyncStatus
  scheduleTime: AWSDateTime
  segment: String
  status: CampaignStatus
  type: String
  variables: AWSJSON
  workflowId: ID
  workflowStepsId: ID
}

input UpdateCampaignMessageInput {
  campaignId: ID
  campaignMessageId: ID!
  channel: CHANNEL
  createdAt: AWSDateTime
  customerId: ID
  enterpriseId: ID!
  isForApproval: Boolean
  meta: AWSJSON
  mode: MODE!
  retryCount: Int
  scheduleTime: AWSDateTime
  sessionId: ID
  status: CampaignMessageStatus
  timeToRespond: Int
  updatedAt: AWSDateTime
}

input UpdateCatalogueInput {
  catalogueId: ID!
  countryOfOrigin: String
  description: String
  enterpriseId: ID!
  hide: Boolean
  images: [String]
  integrationId: ID
  itemCode: String
  link: String
  metaCatalogueId: ID
  mode: MODE!
  name: String
  otherAttributes: AWSJSON
  price: String
  retailerId: String
  updatedAt: AWSDateTime
}

input UpdateCloudFunctionsInput {
  cloudFunctionsId: ID!
  code: AWSJSON
  enterpriseId: ID!
  functionARN: String
  functionName: String
  functionURL: String
  mode: MODE!
  name: String
  type: String
  workspaceId: ID
}

input UpdateCollectionCatalogueInput {
  catalogueId: ID!
  collectionId: ID!
  enterpriseId: ID!
  mode: MODE!
}

input UpdateCollectionInput {
  collectionId: ID!
  enterpriseId: ID!
  metaCatalogueId: ID
  mode: MODE!
  status: String
  title: String
}

input UpdateContactGroupInput {
  contactGroupId: ID!
  contactListSource: String
  dynamic: Boolean
  enterpriseId: ID!
  linkedAppId: ID
  mode: MODE!
  name: String
  updatedAt: AWSDateTime
}

input UpdateConversationInfoInput {
  analytics: AWSJSON
  channelMessageId: ID
  conversationId: ID!
  cumulativeLeadScore: Int
  deliveredAt: AWSDateTime
  enterpriseId: ID!
  errorMessage: AWSJSON
  leadScoreDiff: Int
  mode: MODE!
  pricing: AWSJSON
  readAt: AWSDateTime
  submittedAt: AWSDateTime
  submittedToPartner: AWSDateTime
}

input UpdateConversationInput {
  agentInfo: AWSJSON
  content: String
  conversationId: ID!
  createdAt: AWSDateTime
  createdBy: ASSIGNMENT
  customerId: ID
  enterpriseId: ID!
  imagePath: String
  metadata: AWSJSON
  mode: MODE!
  senderId: ID
  sessionId: ID
}

input UpdateCustomerContactGroupInput {
  blacklisted: Boolean
  contactGroupId: ID!
  customerId: ID!
  enterpriseId: ID!
  mode: MODE!
  updatedAt: AWSDateTime
}

input UpdateCustomerInput {
  blacklistReason: String
  blacklisted: Boolean
  blacklistedAt: AWSDateTime
  createdAt: AWSDateTime
  customerId: ID!
  email: String
  enterpriseId: ID!
  firstName: String
  lastName: String
  mode: MODE!
  name: String
  parent: SAAS
  parentId: String
  tags: [String]
  updatedAt: AWSDateTime
  variables: AWSJSON
}

input UpdateDatabaseSchemaInput {
  config: AWSJSON
  databaseSchemaId: ID!
  description: String
  enterpriseId: ID!
  key: String
  mode: MODE!
  schema: AWSJSON
  timeFilterField: String
  workspaceId: ID
}

input UpdateDatabaseValuesInput {
  databaseSchemaId: ID
  databaseValuesId: ID!
  enterpriseId: ID!
  mode: MODE!
  value: AWSJSON
}

input UpdateEnterpriseInput {
  brandId: String
  contactAttributes: AWSJSON
  enterpriseId: ID!
  isActive: Boolean
  name: String
  onboarding: Boolean
  organizationId: ID
  variables: AWSJSON
}

input UpdateEntityInput {
  enterpriseId: ID!
  entityData: AWSJSON
  entityId: ID!
  language: String
  mode: MODE!
  name: String
  resolutionStrategy: String
  slotTypeId: ID
  type: String
  workspaceId: ID
}

input UpdateEventLabelInput {
  campaignId: String
  conversationId: ID!
  createdAt: AWSDateTime
  customerId: ID!
  enterpriseId: ID!
  flowId: ID
  interactionId: ID
  label: String
  labelId: ID!
  mode: MODE!
  nodeId: ID
  previousLabel: String
  previousValue: String
  sessionId: ID
  type: EventLabelType
  updatedAt: AWSDateTime
  value: String
  workspaceId: ID
}

input UpdateFileManagerFilesInput {
  description: String
  enterpriseId: ID!
  fileManagerFilesId: ID!
  fileType: String
  isFavorite: Boolean
  name: String
  nanoId: String
  size: String
  tags: [String]
  url: String
  workspaceId: ID
}

input UpdateFlowInput {
  campaignId: ID
  designConfig: AWSJSON
  enterpriseId: ID!
  fallbackId: ID
  flowId: ID!
  flowTemplateId: ID
  idleId: ID
  isImported: Boolean
  isInbound: Boolean
  mode: MODE!
  name: String
  recurringCampaignId: ID
  settings: AWSJSON
  startId: ID
  status: Boolean
  workflowId: ID
  workflowStepsId: ID
  workspaceId: ID
}

input UpdateFlowTemplateInput {
  businessGoal: [String]
  channels: [String]
  enterpriseId: ID!
  flowId: ID
  flowTemplateId: ID!
  industry: [String]
  isPrivate: Boolean
  mode: MODE!
  templateData: AWSJSON
  templateDescription: String
  templateIcon: String
  templateName: String
  workspaceId: ID
}

input UpdateHealthTableInput {
  channel: CHANNEL
  checkFlag: Int
  config: AWSJSON
  count: Int
  createdAt: AWSDateTime
  description: String
  enterpriseId: ID!
  functionOrigin: String
  healthTableId: ID!
  link: String
  mode: MODE!
  nodeId: ID
  read: Boolean
  status: HEALTH_STATUS
  subType: String
  title: String
  type: ERROR_TYPE
  updatedAt: AWSDateTime
  userId: ID
}

input UpdateIntegrationInput {
  channel: CHANNEL
  config: AWSJSON
  details: AWSJSON
  enterpriseId: ID!
  flowId: ID
  integrationId: ID!
  logo: String
  metaCatalogueId: ID
  mode: MODE!
  name: String
  number: String
  primary: Boolean
  saas: SAAS
  workspaceId: ID
}

input UpdateIntentEventInput {
  businessGoal: String
  createdAt: AWSDateTime
  description: String
  endTime: AWSDateTime
  enterpriseId: ID!
  includeIntents: Boolean
  industry: String
  intentEventId: ID!
  mode: MODE!
  name: String
  sharingMode: String
  sourceEnterpriseId: ID
  startTime: AWSDateTime
  updatedAt: AWSDateTime
  useCase: String
  workspaceId: ID
}

input UpdateIntentInput {
  enterpriseId: ID!
  intentId: ID!
  language: String
  lexIntentId: ID
  mode: MODE!
  name: String
  nodeId: ID
  slots: [String!]
  updatedAt: AWSDateTime
  utterance: [String!]
  workspaceId: ID
}

input UpdateInteractionEventInput {
  businessGoal: String
  createdAt: AWSDateTime
  description: String
  endTime: AWSDateTime
  enterpriseId: ID!
  includeIntents: Boolean
  industry: String
  interactionId: ID!
  mode: MODE!
  name: String
  sharingMode: String
  sourceEnterpriseId: ID
  startTime: AWSDateTime
  updatedAt: AWSDateTime
  useCase: String
  workspaceId: ID
}

input UpdateInteractionInput {
  enterpriseId: ID!
  flowId: ID
  interactionId: ID!
  mode: MODE!
  name: String
}

input UpdateJobInput {
  description: String
  enterpriseId: ID!
  executionArn: String
  failureReasons: [String]
  jobId: ID!
  mode: MODE!
  payload: AWSJSON
  read: Boolean
  result: AWSJSON
  status: JobStatus
  type: JobType
  updatedAt: AWSDateTime
  userId: ID
}

input UpdateLinkedAppCatalogueInput {
  catalogueId: ID!
  enterpriseId: ID!
  hide: Boolean
  linkedAppId: ID!
  mode: MODE!
  status: String
  waLinkedAppCatalogueId: String
}

input UpdateLinkedAppCollectionInput {
  collectionId: ID!
  enterpriseId: ID!
  linkedAppId: ID!
  mode: MODE!
  status: String
  waLinkedAppCollectionId: String
}

input UpdateLinkedAppCustomerInput {
  customerDetails: AWSJSON
  customerId: ID!
  enterpriseId: ID!
  linkedAppId: ID!
  mode: MODE!
  updatedAt: AWSDateTime
}

input UpdateLinkedAppInput {
  config: AWSJSON
  contactGroupId: ID
  details: AWSJSON
  email: String
  enterpriseId: ID!
  isBusinessAccount: Boolean
  isCartEnabled: Boolean
  lastSyncTime: AWSDateTime
  linkedAppId: ID!
  mode: MODE!
  name: String
  qrCode: String
  role: String
  status: LinkedAppStatus
}

input UpdateLinkedAppMessageInput {
  createdAt: AWSDateTime
  customerId: ID
  enterpriseId: ID!
  linkedAppId: ID
  message: AWSJSON
  mode: MODE!
  updatedAt: AWSDateTime
  waMessageId: ID!
}

input UpdateMetaCatalogueInput {
  enterpriseId: ID!
  integrationId: ID
  isCartEnabled: Boolean
  isCatalogVisible: Boolean
  metaCatalogueId: ID!
  mode: MODE!
  name: String
}

input UpdateMissedUtteranceInput {
  channel: CHANNEL
  confidence: Float
  enterpriseId: ID!
  language: String
  missedUtteranceId: ID!
  mode: MODE!
  nodeId: String
  updatedAt: AWSDateTime
  utterance: String
  workspaceId: ID
}

input UpdateModuleInput {
  enterpriseId: ID!
  moduleId: ID!
  name: String
  roleId: ID
  subModule: AWSJSON
}

input UpdateNodeInput {
  config: AWSJSON
  connectedNodes: [String]
  connectedNodesData: AWSJSON
  enterpriseId: ID!
  errorMessage: String
  intentId: ID
  interactionId: ID
  language: String
  mode: MODE!
  nextId: ID
  noError: Boolean
  nodeId: ID!
  previousId: ID
  templateId: ID
  type: AWSJSON
}

input UpdateNotificationInput {
  categoryStatus: JobStatus
  description: String
  enterpriseId: ID!
  link: String
  mode: MODE!
  notificationId: ID!
  read: Boolean
  title: String
  type: CATEGORY
  updatedAt: AWSDateTime
  userId: ID
}

input UpdateOrganizationInput {
  brandId: String!
  brandName: String
  name: String
  organizationId: ID!
}

input UpdateOutwardWebhookInput {
  config: AWSJSON
  description: String
  enterpriseId: ID!
  filters: [String]
  mode: MODE!
  name: String
  outwardWebhookId: ID!
  workspaceId: ID
}

input UpdatePermissionInput {
  create: Boolean
  delete: Boolean
  enterpriseId: ID!
  moduleId: ID
  permissionId: ID!
  read: Boolean
  roleId: ID
  subModulePermission: AWSJSON
  update: Boolean
}

input UpdateProfileInput {
  channel: CHANNEL!
  createdAt: AWSDateTime
  customerId: ID
  enterpriseId: ID!
  maskedProfileId: String
  mode: MODE!
  profileId: ID!
}

input UpdateRecurringCampaignInput {
  enterpriseId: ID!
  flowId: ID
  language: String
  lastResponseSyncTime: AWSDateTime
  mode: MODE!
  name: String
  recurringCampaignId: ID!
  responseSyncStatus: ResponseSyncStatus
  segment: String
  type: String
  variables: AWSJSON
}

input UpdateRoleInput {
  enterpriseId: ID!
  moduleId: ID
  name: String
  roleId: ID!
}

input UpdateSaasTriggerInput {
  channel: CHANNEL
  customerAttrPath: String
  enterpriseId: ID!
  incomingPath: String
  mode: MODE!
  name: String
  otherDetails: AWSJSON
  saasTriggerId: ID!
  triggerType: String
  type: SAAS
  workspaceId: ID
}

input UpdateScheduleNodeInput {
  enterpriseId: ID!
  mode: MODE!
  nodeId: ID
  scheduleNodeId: ID!
  sessionId: ID
  status: ScheduleNodeStatus
  time: AWSDateTime
  updatedAt: AWSDateTime
}

input UpdateSessionInput {
  active: Boolean
  agentId: ID
  assignment: ASSIGNMENT
  campaignMessageId: ID
  channel: CHANNEL
  createdAt: AWSDateTime
  currentNodeId: ID
  customerId: ID
  enterpriseId: ID!
  federatedLiveToCustomerId: ID
  federatedRole: FEDERATED_ROLE
  flowId: ID
  healthTableId: ID
  initiatedBy: SESSION_INITIATED_BY
  integrationId: ID
  language: String
  metaConversationId: ID
  mode: MODE!
  nextNodeId: ID
  nodeId: ID
  preview: Boolean
  referrer: String
  referrerType: String
  sessionId: ID!
  tags: [String]
  updatedAt: AWSDateTime
  validationCount: Int
  variables: AWSJSON
  workspaceId: ID
}

input UpdateTableViewsInput {
  databaseKey: String
  enterpriseId: ID!
  mode: MODE!
  name: String
  tableViewsId: ID!
  type: TableType
  updatedAt: AWSDateTime
  viewConfig: AWSJSON
}

input UpdateTemplateEventInput {
  businessGoal: String
  createdAt: AWSDateTime
  description: String
  endTime: AWSDateTime
  enterpriseId: ID!
  includeIntents: Boolean
  industry: String
  mode: MODE!
  name: String
  sharingMode: String
  sourceEnterpriseId: ID
  startTime: AWSDateTime
  templateEventId: ID!
  templateType: String
  updatedAt: AWSDateTime
  useCase: String
  workspaceId: ID
}

input UpdateTemplatesInput {
  category: TemplateCategory
  channel: CHANNEL
  config: AWSJSON
  enterpriseId: ID!
  integrationId: ID
  language: String
  mode: MODE!
  namespaceId: String
  nodeId: ID
  phoneNo: String
  reSubmit: Boolean
  status: WA_TEMPLATE_STATUS
  statusMessage: String
  templateId: String
  templatesId: ID!
  title: String
  updatedAt: AWSDateTime
}

input UpdateTriggerInput {
  enterpriseId: ID!
  mode: MODE!
  name: String!
  nodeId: ID
  triggerId: ID!
  workspaceId: ID!
}

input UpdateUserInput {
  active: Boolean
  availability: AVAILABILITY
  avatarUrl: String
  browserToken: String
  clerkUserId: String
  email: String
  enterpriseId: ID!
  inviterUserIdClerk: String
  isLoggedIn: Boolean
  lName: String
  lastSignIn: AWSDateTime
  name: String
  notificationConfig: AWSJSON
  phoneNumber: String
  profileDetails: AWSJSON
  roleId: ID
  updatedAt: AWSDateTime
  userId: ID!
}

input UpdateUtteranceInput {
  enterpriseId: ID!
  intentId: ID
  isPaid: Boolean
  mode: MODE!
  sourceName: String
  utterance: String
  utteranceId: ID!
}

input UpdateWhatsappFlowsInput {
  config: AWSJSON
  enterpriseId: ID!
  integrationId: ID
  mode: MODE!
  name: String
  status: WA_FLOW_STATUS
  whatsappFlowId: ID!
}

input UpdateWorkflowStepEventInput {
  campaignId: ID
  createdAt: AWSDateTime
  customerId: ID
  endTime: AWSDateTime
  enterpriseId: ID
  eventToBeTracked: String
  flowId: ID
  id: ID!
  mode: MODE
  startTime: AWSDateTime
  stepId: ID
  updatedAt: AWSDateTime
  workflowId: ID
}

input UpdateWorkflowStepsInput {
  campaignId: ID
  conditionalNextSteps: AWSJSON
  createdAt: AWSDateTime
  enterpriseId: ID!
  flowId: ID
  integrationId: ID
  mode: MODE!
  nextStepId: ID
  previousStepId: ID
  status: WorkflowStatus
  stepConfig: AWSJSON
  stepDetails: AWSJSON
  stepId: ID!
  stepType: StepType
  updatedAt: AWSDateTime
  workflowId: ID
}

input UpdateWorkflowsInput {
  config: AWSJSON
  currentStepId: ID
  enterpriseId: ID!
  mode: MODE!
  startingCampaignId: ID
  startingFlowId: ID
  status: WorkflowStatus
  workflowId: ID!
  workflowName: String
}

input UpdateWorkspaceInput {
  active: Boolean
  botAliasId: String
  botDraftId: String
  botFailureReason: [String]
  botId: String
  botLastUpdated: AWSDateTime
  botStatus: BotStatus
  defaultLanguage: String
  defaultTables: [String]
  designConfig: AWSJSON
  enterpriseId: ID!
  isImported: Boolean
  language: [String]
  mode: MODE!
  name: String
  publishConfig: AWSJSON
  publishLastUpdated: AWSDateTime
  sessionTimeout: AWSJSON
  timeZone: String
  tools: AWSJSON
  unSupportedMessages: AWSJSON
  variables: AWSJSON
  workspaceId: ID!
  workspaceLastPublished: AWSDateTime
}
